/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the HelmAdoptionConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmAdoptionConfiguration{}

// HelmAdoptionConfiguration struct for HelmAdoptionConfiguration
type HelmAdoptionConfiguration struct {
	// The Helm chart repository URL
	ChartRepoURL string `json:"chartRepoURL"`
	// The password to authenticate with the registry
	Password *string `json:"password,omitempty"`
	// The Helm release name
	ReleaseName string `json:"releaseName"`
	// The Helm release namespace
	ReleaseNamespace string `json:"releaseNamespace"`
	RuntimeConfiguration *HelmRuntimeConfiguration `json:"runtimeConfiguration,omitempty"`
	// The username to authenticate with the registry
	Username *string `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HelmAdoptionConfiguration HelmAdoptionConfiguration

// NewHelmAdoptionConfiguration instantiates a new HelmAdoptionConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmAdoptionConfiguration(chartRepoURL string, releaseName string, releaseNamespace string) *HelmAdoptionConfiguration {
	this := HelmAdoptionConfiguration{}
	this.ChartRepoURL = chartRepoURL
	this.ReleaseName = releaseName
	this.ReleaseNamespace = releaseNamespace
	return &this
}

// NewHelmAdoptionConfigurationWithDefaults instantiates a new HelmAdoptionConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmAdoptionConfigurationWithDefaults() *HelmAdoptionConfiguration {
	this := HelmAdoptionConfiguration{}
	return &this
}

// GetChartRepoURL returns the ChartRepoURL field value
func (o *HelmAdoptionConfiguration) GetChartRepoURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChartRepoURL
}

// GetChartRepoURLOk returns a tuple with the ChartRepoURL field value
// and a boolean to check if the value has been set.
func (o *HelmAdoptionConfiguration) GetChartRepoURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChartRepoURL, true
}

// SetChartRepoURL sets field value
func (o *HelmAdoptionConfiguration) SetChartRepoURL(v string) {
	o.ChartRepoURL = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *HelmAdoptionConfiguration) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmAdoptionConfiguration) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *HelmAdoptionConfiguration) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *HelmAdoptionConfiguration) SetPassword(v string) {
	o.Password = &v
}

// GetReleaseName returns the ReleaseName field value
func (o *HelmAdoptionConfiguration) GetReleaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleaseName
}

// GetReleaseNameOk returns a tuple with the ReleaseName field value
// and a boolean to check if the value has been set.
func (o *HelmAdoptionConfiguration) GetReleaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseName, true
}

// SetReleaseName sets field value
func (o *HelmAdoptionConfiguration) SetReleaseName(v string) {
	o.ReleaseName = v
}

// GetReleaseNamespace returns the ReleaseNamespace field value
func (o *HelmAdoptionConfiguration) GetReleaseNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleaseNamespace
}

// GetReleaseNamespaceOk returns a tuple with the ReleaseNamespace field value
// and a boolean to check if the value has been set.
func (o *HelmAdoptionConfiguration) GetReleaseNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseNamespace, true
}

// SetReleaseNamespace sets field value
func (o *HelmAdoptionConfiguration) SetReleaseNamespace(v string) {
	o.ReleaseNamespace = v
}

// GetRuntimeConfiguration returns the RuntimeConfiguration field value if set, zero value otherwise.
func (o *HelmAdoptionConfiguration) GetRuntimeConfiguration() HelmRuntimeConfiguration {
	if o == nil || IsNil(o.RuntimeConfiguration) {
		var ret HelmRuntimeConfiguration
		return ret
	}
	return *o.RuntimeConfiguration
}

// GetRuntimeConfigurationOk returns a tuple with the RuntimeConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmAdoptionConfiguration) GetRuntimeConfigurationOk() (*HelmRuntimeConfiguration, bool) {
	if o == nil || IsNil(o.RuntimeConfiguration) {
		return nil, false
	}
	return o.RuntimeConfiguration, true
}

// HasRuntimeConfiguration returns a boolean if a field has been set.
func (o *HelmAdoptionConfiguration) HasRuntimeConfiguration() bool {
	if o != nil && !IsNil(o.RuntimeConfiguration) {
		return true
	}

	return false
}

// SetRuntimeConfiguration gets a reference to the given HelmRuntimeConfiguration and assigns it to the RuntimeConfiguration field.
func (o *HelmAdoptionConfiguration) SetRuntimeConfiguration(v HelmRuntimeConfiguration) {
	o.RuntimeConfiguration = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *HelmAdoptionConfiguration) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmAdoptionConfiguration) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *HelmAdoptionConfiguration) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *HelmAdoptionConfiguration) SetUsername(v string) {
	o.Username = &v
}

func (o HelmAdoptionConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmAdoptionConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chartRepoURL"] = o.ChartRepoURL
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	toSerialize["releaseName"] = o.ReleaseName
	toSerialize["releaseNamespace"] = o.ReleaseNamespace
	if !IsNil(o.RuntimeConfiguration) {
		toSerialize["runtimeConfiguration"] = o.RuntimeConfiguration
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmAdoptionConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chartRepoURL",
		"releaseName",
		"releaseNamespace",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmAdoptionConfiguration := _HelmAdoptionConfiguration{}

	err = json.Unmarshal(data, &varHelmAdoptionConfiguration)

	if err != nil {
		return err
	}

	*o = HelmAdoptionConfiguration(varHelmAdoptionConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chartRepoURL")
		delete(additionalProperties, "password")
		delete(additionalProperties, "releaseName")
		delete(additionalProperties, "releaseNamespace")
		delete(additionalProperties, "runtimeConfiguration")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmAdoptionConfiguration struct {
	value *HelmAdoptionConfiguration
	isSet bool
}

func (v NullableHelmAdoptionConfiguration) Get() *HelmAdoptionConfiguration {
	return v.value
}

func (v *NullableHelmAdoptionConfiguration) Set(val *HelmAdoptionConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmAdoptionConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmAdoptionConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmAdoptionConfiguration(val *HelmAdoptionConfiguration) *NullableHelmAdoptionConfiguration {
	return &NullableHelmAdoptionConfiguration{value: val, isSet: true}
}

func (v NullableHelmAdoptionConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmAdoptionConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


