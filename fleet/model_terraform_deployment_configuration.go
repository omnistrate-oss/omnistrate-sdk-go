/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the TerraformDeploymentConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformDeploymentConfiguration{}

// TerraformDeploymentConfiguration struct for TerraformDeploymentConfiguration
type TerraformDeploymentConfiguration struct {
	// Deployed files for Terraform deployment
	ConfigurationFiles *map[string]string `json:"ConfigurationFiles,omitempty"`
	// Errors encountered during the Terraform deployment
	DeploymentErrors *string `json:"DeploymentErrors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TerraformDeploymentConfiguration TerraformDeploymentConfiguration

// NewTerraformDeploymentConfiguration instantiates a new TerraformDeploymentConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformDeploymentConfiguration() *TerraformDeploymentConfiguration {
	this := TerraformDeploymentConfiguration{}
	return &this
}

// NewTerraformDeploymentConfigurationWithDefaults instantiates a new TerraformDeploymentConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformDeploymentConfigurationWithDefaults() *TerraformDeploymentConfiguration {
	this := TerraformDeploymentConfiguration{}
	return &this
}

// GetConfigurationFiles returns the ConfigurationFiles field value if set, zero value otherwise.
func (o *TerraformDeploymentConfiguration) GetConfigurationFiles() map[string]string {
	if o == nil || IsNil(o.ConfigurationFiles) {
		var ret map[string]string
		return ret
	}
	return *o.ConfigurationFiles
}

// GetConfigurationFilesOk returns a tuple with the ConfigurationFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformDeploymentConfiguration) GetConfigurationFilesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ConfigurationFiles) {
		return nil, false
	}
	return o.ConfigurationFiles, true
}

// HasConfigurationFiles returns a boolean if a field has been set.
func (o *TerraformDeploymentConfiguration) HasConfigurationFiles() bool {
	if o != nil && !IsNil(o.ConfigurationFiles) {
		return true
	}

	return false
}

// SetConfigurationFiles gets a reference to the given map[string]string and assigns it to the ConfigurationFiles field.
func (o *TerraformDeploymentConfiguration) SetConfigurationFiles(v map[string]string) {
	o.ConfigurationFiles = &v
}

// GetDeploymentErrors returns the DeploymentErrors field value if set, zero value otherwise.
func (o *TerraformDeploymentConfiguration) GetDeploymentErrors() string {
	if o == nil || IsNil(o.DeploymentErrors) {
		var ret string
		return ret
	}
	return *o.DeploymentErrors
}

// GetDeploymentErrorsOk returns a tuple with the DeploymentErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformDeploymentConfiguration) GetDeploymentErrorsOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentErrors) {
		return nil, false
	}
	return o.DeploymentErrors, true
}

// HasDeploymentErrors returns a boolean if a field has been set.
func (o *TerraformDeploymentConfiguration) HasDeploymentErrors() bool {
	if o != nil && !IsNil(o.DeploymentErrors) {
		return true
	}

	return false
}

// SetDeploymentErrors gets a reference to the given string and assigns it to the DeploymentErrors field.
func (o *TerraformDeploymentConfiguration) SetDeploymentErrors(v string) {
	o.DeploymentErrors = &v
}

func (o TerraformDeploymentConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformDeploymentConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigurationFiles) {
		toSerialize["ConfigurationFiles"] = o.ConfigurationFiles
	}
	if !IsNil(o.DeploymentErrors) {
		toSerialize["DeploymentErrors"] = o.DeploymentErrors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerraformDeploymentConfiguration) UnmarshalJSON(data []byte) (err error) {
	varTerraformDeploymentConfiguration := _TerraformDeploymentConfiguration{}

	err = json.Unmarshal(data, &varTerraformDeploymentConfiguration)

	if err != nil {
		return err
	}

	*o = TerraformDeploymentConfiguration(varTerraformDeploymentConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ConfigurationFiles")
		delete(additionalProperties, "DeploymentErrors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerraformDeploymentConfiguration struct {
	value *TerraformDeploymentConfiguration
	isSet bool
}

func (v NullableTerraformDeploymentConfiguration) Get() *TerraformDeploymentConfiguration {
	return v.value
}

func (v *NullableTerraformDeploymentConfiguration) Set(val *TerraformDeploymentConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformDeploymentConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformDeploymentConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformDeploymentConfiguration(val *TerraformDeploymentConfiguration) *NullableTerraformDeploymentConfiguration {
	return &NullableTerraformDeploymentConfiguration{value: val, isSet: true}
}

func (v NullableTerraformDeploymentConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformDeploymentConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


