/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the SubscriptionSearchRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionSearchRecord{}

// SubscriptionSearchRecord struct for SubscriptionSearchRecord
type SubscriptionSearchRecord struct {
	// The Subscription ID.
	Id string `json:"id"`
	// ID of an Org
	OrgID string `json:"orgID"`
	// ID of a Product Tier
	ProductTierID string `json:"productTierID"`
	// The root user email of the subscription.
	RootUserEmail string `json:"rootUserEmail"`
	// ID of a User
	RootUserID string `json:"rootUserID"`
	// The root user name of the subscription.
	RootUserName string `json:"rootUserName"`
	// ID of a Service Environment
	ServiceEnvironmentID string `json:"serviceEnvironmentID"`
	// The service environment name of the subscription.
	ServiceEnvironmentName string `json:"serviceEnvironmentName"`
	// The type of service environment
	ServiceEnvironmentType *string `json:"serviceEnvironmentType,omitempty"`
	// ID of a Service
	ServiceID string `json:"serviceID"`
	// The service name of the subscription.
	ServiceName string `json:"serviceName"`
	// The service plan name of the subscription.
	ServicePlanName string `json:"servicePlanName"`
	// Subscription Status
	Status string `json:"status"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionSearchRecord SubscriptionSearchRecord

// NewSubscriptionSearchRecord instantiates a new SubscriptionSearchRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionSearchRecord(id string, orgID string, productTierID string, rootUserEmail string, rootUserID string, rootUserName string, serviceEnvironmentID string, serviceEnvironmentName string, serviceID string, serviceName string, servicePlanName string, status string) *SubscriptionSearchRecord {
	this := SubscriptionSearchRecord{}
	this.Id = id
	this.OrgID = orgID
	this.ProductTierID = productTierID
	this.RootUserEmail = rootUserEmail
	this.RootUserID = rootUserID
	this.RootUserName = rootUserName
	this.ServiceEnvironmentID = serviceEnvironmentID
	this.ServiceEnvironmentName = serviceEnvironmentName
	this.ServiceID = serviceID
	this.ServiceName = serviceName
	this.ServicePlanName = servicePlanName
	this.Status = status
	return &this
}

// NewSubscriptionSearchRecordWithDefaults instantiates a new SubscriptionSearchRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionSearchRecordWithDefaults() *SubscriptionSearchRecord {
	this := SubscriptionSearchRecord{}
	return &this
}

// GetId returns the Id field value
func (o *SubscriptionSearchRecord) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SubscriptionSearchRecord) SetId(v string) {
	o.Id = v
}

// GetOrgID returns the OrgID field value
func (o *SubscriptionSearchRecord) GetOrgID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgID
}

// GetOrgIDOk returns a tuple with the OrgID field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetOrgIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgID, true
}

// SetOrgID sets field value
func (o *SubscriptionSearchRecord) SetOrgID(v string) {
	o.OrgID = v
}

// GetProductTierID returns the ProductTierID field value
func (o *SubscriptionSearchRecord) GetProductTierID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTierID
}

// GetProductTierIDOk returns a tuple with the ProductTierID field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetProductTierIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTierID, true
}

// SetProductTierID sets field value
func (o *SubscriptionSearchRecord) SetProductTierID(v string) {
	o.ProductTierID = v
}

// GetRootUserEmail returns the RootUserEmail field value
func (o *SubscriptionSearchRecord) GetRootUserEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootUserEmail
}

// GetRootUserEmailOk returns a tuple with the RootUserEmail field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetRootUserEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootUserEmail, true
}

// SetRootUserEmail sets field value
func (o *SubscriptionSearchRecord) SetRootUserEmail(v string) {
	o.RootUserEmail = v
}

// GetRootUserID returns the RootUserID field value
func (o *SubscriptionSearchRecord) GetRootUserID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootUserID
}

// GetRootUserIDOk returns a tuple with the RootUserID field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetRootUserIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootUserID, true
}

// SetRootUserID sets field value
func (o *SubscriptionSearchRecord) SetRootUserID(v string) {
	o.RootUserID = v
}

// GetRootUserName returns the RootUserName field value
func (o *SubscriptionSearchRecord) GetRootUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootUserName
}

// GetRootUserNameOk returns a tuple with the RootUserName field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetRootUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootUserName, true
}

// SetRootUserName sets field value
func (o *SubscriptionSearchRecord) SetRootUserName(v string) {
	o.RootUserName = v
}

// GetServiceEnvironmentID returns the ServiceEnvironmentID field value
func (o *SubscriptionSearchRecord) GetServiceEnvironmentID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceEnvironmentID
}

// GetServiceEnvironmentIDOk returns a tuple with the ServiceEnvironmentID field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetServiceEnvironmentIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceEnvironmentID, true
}

// SetServiceEnvironmentID sets field value
func (o *SubscriptionSearchRecord) SetServiceEnvironmentID(v string) {
	o.ServiceEnvironmentID = v
}

// GetServiceEnvironmentName returns the ServiceEnvironmentName field value
func (o *SubscriptionSearchRecord) GetServiceEnvironmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceEnvironmentName
}

// GetServiceEnvironmentNameOk returns a tuple with the ServiceEnvironmentName field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetServiceEnvironmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceEnvironmentName, true
}

// SetServiceEnvironmentName sets field value
func (o *SubscriptionSearchRecord) SetServiceEnvironmentName(v string) {
	o.ServiceEnvironmentName = v
}

// GetServiceEnvironmentType returns the ServiceEnvironmentType field value if set, zero value otherwise.
func (o *SubscriptionSearchRecord) GetServiceEnvironmentType() string {
	if o == nil || IsNil(o.ServiceEnvironmentType) {
		var ret string
		return ret
	}
	return *o.ServiceEnvironmentType
}

// GetServiceEnvironmentTypeOk returns a tuple with the ServiceEnvironmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetServiceEnvironmentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceEnvironmentType) {
		return nil, false
	}
	return o.ServiceEnvironmentType, true
}

// HasServiceEnvironmentType returns a boolean if a field has been set.
func (o *SubscriptionSearchRecord) HasServiceEnvironmentType() bool {
	if o != nil && !IsNil(o.ServiceEnvironmentType) {
		return true
	}

	return false
}

// SetServiceEnvironmentType gets a reference to the given string and assigns it to the ServiceEnvironmentType field.
func (o *SubscriptionSearchRecord) SetServiceEnvironmentType(v string) {
	o.ServiceEnvironmentType = &v
}

// GetServiceID returns the ServiceID field value
func (o *SubscriptionSearchRecord) GetServiceID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceID
}

// GetServiceIDOk returns a tuple with the ServiceID field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetServiceIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceID, true
}

// SetServiceID sets field value
func (o *SubscriptionSearchRecord) SetServiceID(v string) {
	o.ServiceID = v
}

// GetServiceName returns the ServiceName field value
func (o *SubscriptionSearchRecord) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *SubscriptionSearchRecord) SetServiceName(v string) {
	o.ServiceName = v
}

// GetServicePlanName returns the ServicePlanName field value
func (o *SubscriptionSearchRecord) GetServicePlanName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServicePlanName
}

// GetServicePlanNameOk returns a tuple with the ServicePlanName field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetServicePlanNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServicePlanName, true
}

// SetServicePlanName sets field value
func (o *SubscriptionSearchRecord) SetServicePlanName(v string) {
	o.ServicePlanName = v
}

// GetStatus returns the Status field value
func (o *SubscriptionSearchRecord) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SubscriptionSearchRecord) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SubscriptionSearchRecord) SetStatus(v string) {
	o.Status = v
}

func (o SubscriptionSearchRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionSearchRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["orgID"] = o.OrgID
	toSerialize["productTierID"] = o.ProductTierID
	toSerialize["rootUserEmail"] = o.RootUserEmail
	toSerialize["rootUserID"] = o.RootUserID
	toSerialize["rootUserName"] = o.RootUserName
	toSerialize["serviceEnvironmentID"] = o.ServiceEnvironmentID
	toSerialize["serviceEnvironmentName"] = o.ServiceEnvironmentName
	if !IsNil(o.ServiceEnvironmentType) {
		toSerialize["serviceEnvironmentType"] = o.ServiceEnvironmentType
	}
	toSerialize["serviceID"] = o.ServiceID
	toSerialize["serviceName"] = o.ServiceName
	toSerialize["servicePlanName"] = o.ServicePlanName
	toSerialize["status"] = o.Status

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionSearchRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"orgID",
		"productTierID",
		"rootUserEmail",
		"rootUserID",
		"rootUserName",
		"serviceEnvironmentID",
		"serviceEnvironmentName",
		"serviceID",
		"serviceName",
		"servicePlanName",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionSearchRecord := _SubscriptionSearchRecord{}

	err = json.Unmarshal(data, &varSubscriptionSearchRecord)

	if err != nil {
		return err
	}

	*o = SubscriptionSearchRecord(varSubscriptionSearchRecord)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "orgID")
		delete(additionalProperties, "productTierID")
		delete(additionalProperties, "rootUserEmail")
		delete(additionalProperties, "rootUserID")
		delete(additionalProperties, "rootUserName")
		delete(additionalProperties, "serviceEnvironmentID")
		delete(additionalProperties, "serviceEnvironmentName")
		delete(additionalProperties, "serviceEnvironmentType")
		delete(additionalProperties, "serviceID")
		delete(additionalProperties, "serviceName")
		delete(additionalProperties, "servicePlanName")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionSearchRecord struct {
	value *SubscriptionSearchRecord
	isSet bool
}

func (v NullableSubscriptionSearchRecord) Get() *SubscriptionSearchRecord {
	return v.value
}

func (v *NullableSubscriptionSearchRecord) Set(val *SubscriptionSearchRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionSearchRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionSearchRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionSearchRecord(val *SubscriptionSearchRecord) *NullableSubscriptionSearchRecord {
	return &NullableSubscriptionSearchRecord{value: val, isSet: true}
}

func (v NullableSubscriptionSearchRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionSearchRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


