/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the DetailedNodeHealthResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetailedNodeHealthResult{}

// DetailedNodeHealthResult struct for DetailedNodeHealthResult
type DetailedNodeHealthResult struct {
	// The heath status of a resource
	ConnectivityStatus *string `json:"ConnectivityStatus,omitempty"`
	// The heath status of a resource
	DiskHealth *string `json:"DiskHealth,omitempty"`
	IntegrationsHealth *IntegrationsHealth `json:"IntegrationsHealth,omitempty"`
	// The load status of a pod
	LoadHealth *string `json:"LoadHealth,omitempty"`
	// The load status of a pod
	LoadStatus *string `json:"LoadStatus,omitempty"`
	// The heath status of a resource
	NodeHealth *string `json:"NodeHealth,omitempty"`
	// The heath status of a resource
	ProcessHealth *string `json:"ProcessHealth,omitempty"`
	// The heath status of a resource
	ProcessLiveness *string `json:"ProcessLiveness,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DetailedNodeHealthResult DetailedNodeHealthResult

// NewDetailedNodeHealthResult instantiates a new DetailedNodeHealthResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailedNodeHealthResult() *DetailedNodeHealthResult {
	this := DetailedNodeHealthResult{}
	return &this
}

// NewDetailedNodeHealthResultWithDefaults instantiates a new DetailedNodeHealthResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailedNodeHealthResultWithDefaults() *DetailedNodeHealthResult {
	this := DetailedNodeHealthResult{}
	return &this
}

// GetConnectivityStatus returns the ConnectivityStatus field value if set, zero value otherwise.
func (o *DetailedNodeHealthResult) GetConnectivityStatus() string {
	if o == nil || IsNil(o.ConnectivityStatus) {
		var ret string
		return ret
	}
	return *o.ConnectivityStatus
}

// GetConnectivityStatusOk returns a tuple with the ConnectivityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedNodeHealthResult) GetConnectivityStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectivityStatus) {
		return nil, false
	}
	return o.ConnectivityStatus, true
}

// HasConnectivityStatus returns a boolean if a field has been set.
func (o *DetailedNodeHealthResult) HasConnectivityStatus() bool {
	if o != nil && !IsNil(o.ConnectivityStatus) {
		return true
	}

	return false
}

// SetConnectivityStatus gets a reference to the given string and assigns it to the ConnectivityStatus field.
func (o *DetailedNodeHealthResult) SetConnectivityStatus(v string) {
	o.ConnectivityStatus = &v
}

// GetDiskHealth returns the DiskHealth field value if set, zero value otherwise.
func (o *DetailedNodeHealthResult) GetDiskHealth() string {
	if o == nil || IsNil(o.DiskHealth) {
		var ret string
		return ret
	}
	return *o.DiskHealth
}

// GetDiskHealthOk returns a tuple with the DiskHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedNodeHealthResult) GetDiskHealthOk() (*string, bool) {
	if o == nil || IsNil(o.DiskHealth) {
		return nil, false
	}
	return o.DiskHealth, true
}

// HasDiskHealth returns a boolean if a field has been set.
func (o *DetailedNodeHealthResult) HasDiskHealth() bool {
	if o != nil && !IsNil(o.DiskHealth) {
		return true
	}

	return false
}

// SetDiskHealth gets a reference to the given string and assigns it to the DiskHealth field.
func (o *DetailedNodeHealthResult) SetDiskHealth(v string) {
	o.DiskHealth = &v
}

// GetIntegrationsHealth returns the IntegrationsHealth field value if set, zero value otherwise.
func (o *DetailedNodeHealthResult) GetIntegrationsHealth() IntegrationsHealth {
	if o == nil || IsNil(o.IntegrationsHealth) {
		var ret IntegrationsHealth
		return ret
	}
	return *o.IntegrationsHealth
}

// GetIntegrationsHealthOk returns a tuple with the IntegrationsHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedNodeHealthResult) GetIntegrationsHealthOk() (*IntegrationsHealth, bool) {
	if o == nil || IsNil(o.IntegrationsHealth) {
		return nil, false
	}
	return o.IntegrationsHealth, true
}

// HasIntegrationsHealth returns a boolean if a field has been set.
func (o *DetailedNodeHealthResult) HasIntegrationsHealth() bool {
	if o != nil && !IsNil(o.IntegrationsHealth) {
		return true
	}

	return false
}

// SetIntegrationsHealth gets a reference to the given IntegrationsHealth and assigns it to the IntegrationsHealth field.
func (o *DetailedNodeHealthResult) SetIntegrationsHealth(v IntegrationsHealth) {
	o.IntegrationsHealth = &v
}

// GetLoadHealth returns the LoadHealth field value if set, zero value otherwise.
func (o *DetailedNodeHealthResult) GetLoadHealth() string {
	if o == nil || IsNil(o.LoadHealth) {
		var ret string
		return ret
	}
	return *o.LoadHealth
}

// GetLoadHealthOk returns a tuple with the LoadHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedNodeHealthResult) GetLoadHealthOk() (*string, bool) {
	if o == nil || IsNil(o.LoadHealth) {
		return nil, false
	}
	return o.LoadHealth, true
}

// HasLoadHealth returns a boolean if a field has been set.
func (o *DetailedNodeHealthResult) HasLoadHealth() bool {
	if o != nil && !IsNil(o.LoadHealth) {
		return true
	}

	return false
}

// SetLoadHealth gets a reference to the given string and assigns it to the LoadHealth field.
func (o *DetailedNodeHealthResult) SetLoadHealth(v string) {
	o.LoadHealth = &v
}

// GetLoadStatus returns the LoadStatus field value if set, zero value otherwise.
func (o *DetailedNodeHealthResult) GetLoadStatus() string {
	if o == nil || IsNil(o.LoadStatus) {
		var ret string
		return ret
	}
	return *o.LoadStatus
}

// GetLoadStatusOk returns a tuple with the LoadStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedNodeHealthResult) GetLoadStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LoadStatus) {
		return nil, false
	}
	return o.LoadStatus, true
}

// HasLoadStatus returns a boolean if a field has been set.
func (o *DetailedNodeHealthResult) HasLoadStatus() bool {
	if o != nil && !IsNil(o.LoadStatus) {
		return true
	}

	return false
}

// SetLoadStatus gets a reference to the given string and assigns it to the LoadStatus field.
func (o *DetailedNodeHealthResult) SetLoadStatus(v string) {
	o.LoadStatus = &v
}

// GetNodeHealth returns the NodeHealth field value if set, zero value otherwise.
func (o *DetailedNodeHealthResult) GetNodeHealth() string {
	if o == nil || IsNil(o.NodeHealth) {
		var ret string
		return ret
	}
	return *o.NodeHealth
}

// GetNodeHealthOk returns a tuple with the NodeHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedNodeHealthResult) GetNodeHealthOk() (*string, bool) {
	if o == nil || IsNil(o.NodeHealth) {
		return nil, false
	}
	return o.NodeHealth, true
}

// HasNodeHealth returns a boolean if a field has been set.
func (o *DetailedNodeHealthResult) HasNodeHealth() bool {
	if o != nil && !IsNil(o.NodeHealth) {
		return true
	}

	return false
}

// SetNodeHealth gets a reference to the given string and assigns it to the NodeHealth field.
func (o *DetailedNodeHealthResult) SetNodeHealth(v string) {
	o.NodeHealth = &v
}

// GetProcessHealth returns the ProcessHealth field value if set, zero value otherwise.
func (o *DetailedNodeHealthResult) GetProcessHealth() string {
	if o == nil || IsNil(o.ProcessHealth) {
		var ret string
		return ret
	}
	return *o.ProcessHealth
}

// GetProcessHealthOk returns a tuple with the ProcessHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedNodeHealthResult) GetProcessHealthOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessHealth) {
		return nil, false
	}
	return o.ProcessHealth, true
}

// HasProcessHealth returns a boolean if a field has been set.
func (o *DetailedNodeHealthResult) HasProcessHealth() bool {
	if o != nil && !IsNil(o.ProcessHealth) {
		return true
	}

	return false
}

// SetProcessHealth gets a reference to the given string and assigns it to the ProcessHealth field.
func (o *DetailedNodeHealthResult) SetProcessHealth(v string) {
	o.ProcessHealth = &v
}

// GetProcessLiveness returns the ProcessLiveness field value if set, zero value otherwise.
func (o *DetailedNodeHealthResult) GetProcessLiveness() string {
	if o == nil || IsNil(o.ProcessLiveness) {
		var ret string
		return ret
	}
	return *o.ProcessLiveness
}

// GetProcessLivenessOk returns a tuple with the ProcessLiveness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedNodeHealthResult) GetProcessLivenessOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessLiveness) {
		return nil, false
	}
	return o.ProcessLiveness, true
}

// HasProcessLiveness returns a boolean if a field has been set.
func (o *DetailedNodeHealthResult) HasProcessLiveness() bool {
	if o != nil && !IsNil(o.ProcessLiveness) {
		return true
	}

	return false
}

// SetProcessLiveness gets a reference to the given string and assigns it to the ProcessLiveness field.
func (o *DetailedNodeHealthResult) SetProcessLiveness(v string) {
	o.ProcessLiveness = &v
}

func (o DetailedNodeHealthResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetailedNodeHealthResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectivityStatus) {
		toSerialize["ConnectivityStatus"] = o.ConnectivityStatus
	}
	if !IsNil(o.DiskHealth) {
		toSerialize["DiskHealth"] = o.DiskHealth
	}
	if !IsNil(o.IntegrationsHealth) {
		toSerialize["IntegrationsHealth"] = o.IntegrationsHealth
	}
	if !IsNil(o.LoadHealth) {
		toSerialize["LoadHealth"] = o.LoadHealth
	}
	if !IsNil(o.LoadStatus) {
		toSerialize["LoadStatus"] = o.LoadStatus
	}
	if !IsNil(o.NodeHealth) {
		toSerialize["NodeHealth"] = o.NodeHealth
	}
	if !IsNil(o.ProcessHealth) {
		toSerialize["ProcessHealth"] = o.ProcessHealth
	}
	if !IsNil(o.ProcessLiveness) {
		toSerialize["ProcessLiveness"] = o.ProcessLiveness
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DetailedNodeHealthResult) UnmarshalJSON(data []byte) (err error) {
	varDetailedNodeHealthResult := _DetailedNodeHealthResult{}

	err = json.Unmarshal(data, &varDetailedNodeHealthResult)

	if err != nil {
		return err
	}

	*o = DetailedNodeHealthResult(varDetailedNodeHealthResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ConnectivityStatus")
		delete(additionalProperties, "DiskHealth")
		delete(additionalProperties, "IntegrationsHealth")
		delete(additionalProperties, "LoadHealth")
		delete(additionalProperties, "LoadStatus")
		delete(additionalProperties, "NodeHealth")
		delete(additionalProperties, "ProcessHealth")
		delete(additionalProperties, "ProcessLiveness")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDetailedNodeHealthResult struct {
	value *DetailedNodeHealthResult
	isSet bool
}

func (v NullableDetailedNodeHealthResult) Get() *DetailedNodeHealthResult {
	return v.value
}

func (v *NullableDetailedNodeHealthResult) Set(val *DetailedNodeHealthResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailedNodeHealthResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailedNodeHealthResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailedNodeHealthResult(val *DetailedNodeHealthResult) *NullableDetailedNodeHealthResult {
	return &NullableDetailedNodeHealthResult{value: val, isSet: true}
}

func (v NullableDetailedNodeHealthResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailedNodeHealthResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


