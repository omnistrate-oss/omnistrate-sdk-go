/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the EntityHealth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityHealth{}

// EntityHealth Health status of an entity
type EntityHealth struct {
	// Optional error message if the entity is not in sync
	Error *string `json:"error,omitempty"`
	// Unique identifier for the entity
	Identifier string `json:"identifier"`
	// Current synchronization status of the entity
	SyncStatus string `json:"syncStatus"`
	// Type of the entity (e.g., NAMESPACE, SERVICE, POD, etc.)
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _EntityHealth EntityHealth

// NewEntityHealth instantiates a new EntityHealth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityHealth(identifier string, syncStatus string, type_ string) *EntityHealth {
	this := EntityHealth{}
	this.Identifier = identifier
	this.SyncStatus = syncStatus
	this.Type = type_
	return &this
}

// NewEntityHealthWithDefaults instantiates a new EntityHealth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityHealthWithDefaults() *EntityHealth {
	this := EntityHealth{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *EntityHealth) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityHealth) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *EntityHealth) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *EntityHealth) SetError(v string) {
	o.Error = &v
}

// GetIdentifier returns the Identifier field value
func (o *EntityHealth) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *EntityHealth) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *EntityHealth) SetIdentifier(v string) {
	o.Identifier = v
}

// GetSyncStatus returns the SyncStatus field value
func (o *EntityHealth) GetSyncStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SyncStatus
}

// GetSyncStatusOk returns a tuple with the SyncStatus field value
// and a boolean to check if the value has been set.
func (o *EntityHealth) GetSyncStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SyncStatus, true
}

// SetSyncStatus sets field value
func (o *EntityHealth) SetSyncStatus(v string) {
	o.SyncStatus = v
}

// GetType returns the Type field value
func (o *EntityHealth) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EntityHealth) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EntityHealth) SetType(v string) {
	o.Type = v
}

func (o EntityHealth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityHealth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	toSerialize["identifier"] = o.Identifier
	toSerialize["syncStatus"] = o.SyncStatus
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntityHealth) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"syncStatus",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntityHealth := _EntityHealth{}

	err = json.Unmarshal(data, &varEntityHealth)

	if err != nil {
		return err
	}

	*o = EntityHealth(varEntityHealth)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "error")
		delete(additionalProperties, "identifier")
		delete(additionalProperties, "syncStatus")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntityHealth struct {
	value *EntityHealth
	isSet bool
}

func (v NullableEntityHealth) Get() *EntityHealth {
	return v.value
}

func (v *NullableEntityHealth) Set(val *EntityHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityHealth(val *EntityHealth) *NullableEntityHealth {
	return &NullableEntityHealth{value: val, isSet: true}
}

func (v NullableEntityHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


