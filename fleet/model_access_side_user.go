/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the AccessSideUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessSideUser{}

// AccessSideUser struct for AccessSideUser
type AccessSideUser struct {
	// The time the user was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The user email.
	Email *string `json:"email,omitempty"`
	// Is the user enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The number of active instances the user has.
	InstanceCount *int64 `json:"instanceCount,omitempty"`
	// The last modified time of the user.
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`
	// ID of a User
	LastModifiedByUserID *string `json:"lastModifiedByUserID,omitempty"`
	// The user name of the last modifier.
	LastModifiedByUserName *string `json:"lastModifiedByUserName,omitempty"`
	// ID of an Org
	OrgId *string `json:"orgId,omitempty"`
	// The organization name.
	OrgName *string `json:"orgName,omitempty"`
	// The organization URL.
	OrgUrl *string `json:"orgUrl,omitempty"`
	// The status of the user.
	Status *string `json:"status,omitempty"`
	// The number of subscriptions the user has.
	SubscriptionCount *int64 `json:"subscriptionCount,omitempty"`
	// Token to validate the user, if the user is not enabled.
	Token *string `json:"token,omitempty"`
	// ID of a User
	UserId *string `json:"userId,omitempty"`
	// The user name.
	UserName *string `json:"userName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccessSideUser AccessSideUser

// NewAccessSideUser instantiates a new AccessSideUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessSideUser() *AccessSideUser {
	this := AccessSideUser{}
	return &this
}

// NewAccessSideUserWithDefaults instantiates a new AccessSideUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessSideUserWithDefaults() *AccessSideUser {
	this := AccessSideUser{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AccessSideUser) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AccessSideUser) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *AccessSideUser) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AccessSideUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AccessSideUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AccessSideUser) SetEmail(v string) {
	o.Email = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AccessSideUser) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AccessSideUser) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AccessSideUser) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetInstanceCount returns the InstanceCount field value if set, zero value otherwise.
func (o *AccessSideUser) GetInstanceCount() int64 {
	if o == nil || IsNil(o.InstanceCount) {
		var ret int64
		return ret
	}
	return *o.InstanceCount
}

// GetInstanceCountOk returns a tuple with the InstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetInstanceCountOk() (*int64, bool) {
	if o == nil || IsNil(o.InstanceCount) {
		return nil, false
	}
	return o.InstanceCount, true
}

// HasInstanceCount returns a boolean if a field has been set.
func (o *AccessSideUser) HasInstanceCount() bool {
	if o != nil && !IsNil(o.InstanceCount) {
		return true
	}

	return false
}

// SetInstanceCount gets a reference to the given int64 and assigns it to the InstanceCount field.
func (o *AccessSideUser) SetInstanceCount(v int64) {
	o.InstanceCount = &v
}

// GetLastModifiedAt returns the LastModifiedAt field value if set, zero value otherwise.
func (o *AccessSideUser) GetLastModifiedAt() string {
	if o == nil || IsNil(o.LastModifiedAt) {
		var ret string
		return ret
	}
	return *o.LastModifiedAt
}

// GetLastModifiedAtOk returns a tuple with the LastModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetLastModifiedAtOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifiedAt) {
		return nil, false
	}
	return o.LastModifiedAt, true
}

// HasLastModifiedAt returns a boolean if a field has been set.
func (o *AccessSideUser) HasLastModifiedAt() bool {
	if o != nil && !IsNil(o.LastModifiedAt) {
		return true
	}

	return false
}

// SetLastModifiedAt gets a reference to the given string and assigns it to the LastModifiedAt field.
func (o *AccessSideUser) SetLastModifiedAt(v string) {
	o.LastModifiedAt = &v
}

// GetLastModifiedByUserID returns the LastModifiedByUserID field value if set, zero value otherwise.
func (o *AccessSideUser) GetLastModifiedByUserID() string {
	if o == nil || IsNil(o.LastModifiedByUserID) {
		var ret string
		return ret
	}
	return *o.LastModifiedByUserID
}

// GetLastModifiedByUserIDOk returns a tuple with the LastModifiedByUserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetLastModifiedByUserIDOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifiedByUserID) {
		return nil, false
	}
	return o.LastModifiedByUserID, true
}

// HasLastModifiedByUserID returns a boolean if a field has been set.
func (o *AccessSideUser) HasLastModifiedByUserID() bool {
	if o != nil && !IsNil(o.LastModifiedByUserID) {
		return true
	}

	return false
}

// SetLastModifiedByUserID gets a reference to the given string and assigns it to the LastModifiedByUserID field.
func (o *AccessSideUser) SetLastModifiedByUserID(v string) {
	o.LastModifiedByUserID = &v
}

// GetLastModifiedByUserName returns the LastModifiedByUserName field value if set, zero value otherwise.
func (o *AccessSideUser) GetLastModifiedByUserName() string {
	if o == nil || IsNil(o.LastModifiedByUserName) {
		var ret string
		return ret
	}
	return *o.LastModifiedByUserName
}

// GetLastModifiedByUserNameOk returns a tuple with the LastModifiedByUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetLastModifiedByUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifiedByUserName) {
		return nil, false
	}
	return o.LastModifiedByUserName, true
}

// HasLastModifiedByUserName returns a boolean if a field has been set.
func (o *AccessSideUser) HasLastModifiedByUserName() bool {
	if o != nil && !IsNil(o.LastModifiedByUserName) {
		return true
	}

	return false
}

// SetLastModifiedByUserName gets a reference to the given string and assigns it to the LastModifiedByUserName field.
func (o *AccessSideUser) SetLastModifiedByUserName(v string) {
	o.LastModifiedByUserName = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *AccessSideUser) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *AccessSideUser) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *AccessSideUser) SetOrgId(v string) {
	o.OrgId = &v
}

// GetOrgName returns the OrgName field value if set, zero value otherwise.
func (o *AccessSideUser) GetOrgName() string {
	if o == nil || IsNil(o.OrgName) {
		var ret string
		return ret
	}
	return *o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetOrgNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgName) {
		return nil, false
	}
	return o.OrgName, true
}

// HasOrgName returns a boolean if a field has been set.
func (o *AccessSideUser) HasOrgName() bool {
	if o != nil && !IsNil(o.OrgName) {
		return true
	}

	return false
}

// SetOrgName gets a reference to the given string and assigns it to the OrgName field.
func (o *AccessSideUser) SetOrgName(v string) {
	o.OrgName = &v
}

// GetOrgUrl returns the OrgUrl field value if set, zero value otherwise.
func (o *AccessSideUser) GetOrgUrl() string {
	if o == nil || IsNil(o.OrgUrl) {
		var ret string
		return ret
	}
	return *o.OrgUrl
}

// GetOrgUrlOk returns a tuple with the OrgUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetOrgUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OrgUrl) {
		return nil, false
	}
	return o.OrgUrl, true
}

// HasOrgUrl returns a boolean if a field has been set.
func (o *AccessSideUser) HasOrgUrl() bool {
	if o != nil && !IsNil(o.OrgUrl) {
		return true
	}

	return false
}

// SetOrgUrl gets a reference to the given string and assigns it to the OrgUrl field.
func (o *AccessSideUser) SetOrgUrl(v string) {
	o.OrgUrl = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AccessSideUser) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AccessSideUser) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AccessSideUser) SetStatus(v string) {
	o.Status = &v
}

// GetSubscriptionCount returns the SubscriptionCount field value if set, zero value otherwise.
func (o *AccessSideUser) GetSubscriptionCount() int64 {
	if o == nil || IsNil(o.SubscriptionCount) {
		var ret int64
		return ret
	}
	return *o.SubscriptionCount
}

// GetSubscriptionCountOk returns a tuple with the SubscriptionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetSubscriptionCountOk() (*int64, bool) {
	if o == nil || IsNil(o.SubscriptionCount) {
		return nil, false
	}
	return o.SubscriptionCount, true
}

// HasSubscriptionCount returns a boolean if a field has been set.
func (o *AccessSideUser) HasSubscriptionCount() bool {
	if o != nil && !IsNil(o.SubscriptionCount) {
		return true
	}

	return false
}

// SetSubscriptionCount gets a reference to the given int64 and assigns it to the SubscriptionCount field.
func (o *AccessSideUser) SetSubscriptionCount(v int64) {
	o.SubscriptionCount = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *AccessSideUser) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *AccessSideUser) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *AccessSideUser) SetToken(v string) {
	o.Token = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AccessSideUser) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AccessSideUser) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *AccessSideUser) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *AccessSideUser) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessSideUser) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *AccessSideUser) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *AccessSideUser) SetUserName(v string) {
	o.UserName = &v
}

func (o AccessSideUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessSideUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.InstanceCount) {
		toSerialize["instanceCount"] = o.InstanceCount
	}
	if !IsNil(o.LastModifiedAt) {
		toSerialize["lastModifiedAt"] = o.LastModifiedAt
	}
	if !IsNil(o.LastModifiedByUserID) {
		toSerialize["lastModifiedByUserID"] = o.LastModifiedByUserID
	}
	if !IsNil(o.LastModifiedByUserName) {
		toSerialize["lastModifiedByUserName"] = o.LastModifiedByUserName
	}
	if !IsNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	if !IsNil(o.OrgName) {
		toSerialize["orgName"] = o.OrgName
	}
	if !IsNil(o.OrgUrl) {
		toSerialize["orgUrl"] = o.OrgUrl
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SubscriptionCount) {
		toSerialize["subscriptionCount"] = o.SubscriptionCount
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessSideUser) UnmarshalJSON(data []byte) (err error) {
	varAccessSideUser := _AccessSideUser{}

	err = json.Unmarshal(data, &varAccessSideUser)

	if err != nil {
		return err
	}

	*o = AccessSideUser(varAccessSideUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "email")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "instanceCount")
		delete(additionalProperties, "lastModifiedAt")
		delete(additionalProperties, "lastModifiedByUserID")
		delete(additionalProperties, "lastModifiedByUserName")
		delete(additionalProperties, "orgId")
		delete(additionalProperties, "orgName")
		delete(additionalProperties, "orgUrl")
		delete(additionalProperties, "status")
		delete(additionalProperties, "subscriptionCount")
		delete(additionalProperties, "token")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "userName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessSideUser struct {
	value *AccessSideUser
	isSet bool
}

func (v NullableAccessSideUser) Get() *AccessSideUser {
	return v.value
}

func (v *NullableAccessSideUser) Set(val *AccessSideUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessSideUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessSideUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessSideUser(val *AccessSideUser) *NullableAccessSideUser {
	return &NullableAccessSideUser{value: val, isSet: true}
}

func (v NullableAccessSideUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessSideUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


