/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the ServicePlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicePlan{}

// ServicePlan struct for ServicePlan
type ServicePlan struct {
	// Description of the Product Tier
	Description string `json:"description"`
	// The model type encapsulating this service
	ModelType string `json:"modelType"`
	// Name of the Product Tier
	Name string `json:"name"`
	// ID of a Product Tier
	ProductTierID string `json:"productTierID"`
	// ProductTierType is the type of tier for a product
	TierType string `json:"tierType"`
	AdditionalProperties map[string]interface{}
}

type _ServicePlan ServicePlan

// NewServicePlan instantiates a new ServicePlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicePlan(description string, modelType string, name string, productTierID string, tierType string) *ServicePlan {
	this := ServicePlan{}
	this.Description = description
	this.ModelType = modelType
	this.Name = name
	this.ProductTierID = productTierID
	this.TierType = tierType
	return &this
}

// NewServicePlanWithDefaults instantiates a new ServicePlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicePlanWithDefaults() *ServicePlan {
	this := ServicePlan{}
	return &this
}

// GetDescription returns the Description field value
func (o *ServicePlan) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ServicePlan) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ServicePlan) SetDescription(v string) {
	o.Description = v
}

// GetModelType returns the ModelType field value
func (o *ServicePlan) GetModelType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value
// and a boolean to check if the value has been set.
func (o *ServicePlan) GetModelTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelType, true
}

// SetModelType sets field value
func (o *ServicePlan) SetModelType(v string) {
	o.ModelType = v
}

// GetName returns the Name field value
func (o *ServicePlan) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServicePlan) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServicePlan) SetName(v string) {
	o.Name = v
}

// GetProductTierID returns the ProductTierID field value
func (o *ServicePlan) GetProductTierID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTierID
}

// GetProductTierIDOk returns a tuple with the ProductTierID field value
// and a boolean to check if the value has been set.
func (o *ServicePlan) GetProductTierIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTierID, true
}

// SetProductTierID sets field value
func (o *ServicePlan) SetProductTierID(v string) {
	o.ProductTierID = v
}

// GetTierType returns the TierType field value
func (o *ServicePlan) GetTierType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TierType
}

// GetTierTypeOk returns a tuple with the TierType field value
// and a boolean to check if the value has been set.
func (o *ServicePlan) GetTierTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TierType, true
}

// SetTierType sets field value
func (o *ServicePlan) SetTierType(v string) {
	o.TierType = v
}

func (o ServicePlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicePlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["modelType"] = o.ModelType
	toSerialize["name"] = o.Name
	toSerialize["productTierID"] = o.ProductTierID
	toSerialize["tierType"] = o.TierType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServicePlan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"modelType",
		"name",
		"productTierID",
		"tierType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicePlan := _ServicePlan{}

	err = json.Unmarshal(data, &varServicePlan)

	if err != nil {
		return err
	}

	*o = ServicePlan(varServicePlan)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "modelType")
		delete(additionalProperties, "name")
		delete(additionalProperties, "productTierID")
		delete(additionalProperties, "tierType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicePlan struct {
	value *ServicePlan
	isSet bool
}

func (v NullableServicePlan) Get() *ServicePlan {
	return v.value
}

func (v *NullableServicePlan) Set(val *ServicePlan) {
	v.value = val
	v.isSet = true
}

func (v NullableServicePlan) IsSet() bool {
	return v.isSet
}

func (v *NullableServicePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicePlan(val *ServicePlan) *NullableServicePlan {
	return &NullableServicePlan{value: val, isSet: true}
}

func (v NullableServicePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


