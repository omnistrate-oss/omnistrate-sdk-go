/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NotificationSearchRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationSearchRecord{}

// NotificationSearchRecord struct for NotificationSearchRecord
type NotificationSearchRecord struct {
	// The notification description.
	Description string `json:"description"`
	// The Event ID of the notification.
	Id string `json:"id"`
	// The notification name.
	Name string `json:"name"`
	// The priority of the notification.
	Priority string `json:"priority"`
	// The resource name for the notification.
	ResourceName string `json:"resourceName"`
	// The service environment ID of the notification.
	ServiceEnvironmentID string `json:"serviceEnvironmentID"`
	// The service environment name of the notification.
	ServiceEnvironmentName string `json:"serviceEnvironmentName"`
	// The service environment type of the notification.
	ServiceEnvironmentType *string `json:"serviceEnvironmentType,omitempty"`
	// The service ID of the notification.
	ServiceID string `json:"serviceID"`
	// The service name of the notification.
	ServiceName string `json:"serviceName"`
	// The event time of the notification.
	Time string `json:"time"`
	// The notification type.
	Type string `json:"type"`
}

type _NotificationSearchRecord NotificationSearchRecord

// NewNotificationSearchRecord instantiates a new NotificationSearchRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSearchRecord(description string, id string, name string, priority string, resourceName string, serviceEnvironmentID string, serviceEnvironmentName string, serviceID string, serviceName string, time string, type_ string) *NotificationSearchRecord {
	this := NotificationSearchRecord{}
	this.Description = description
	this.Id = id
	this.Name = name
	this.Priority = priority
	this.ResourceName = resourceName
	this.ServiceEnvironmentID = serviceEnvironmentID
	this.ServiceEnvironmentName = serviceEnvironmentName
	this.ServiceID = serviceID
	this.ServiceName = serviceName
	this.Time = time
	this.Type = type_
	return &this
}

// NewNotificationSearchRecordWithDefaults instantiates a new NotificationSearchRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSearchRecordWithDefaults() *NotificationSearchRecord {
	this := NotificationSearchRecord{}
	return &this
}

// GetDescription returns the Description field value
func (o *NotificationSearchRecord) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *NotificationSearchRecord) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *NotificationSearchRecord) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *NotificationSearchRecord) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NotificationSearchRecord) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NotificationSearchRecord) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *NotificationSearchRecord) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NotificationSearchRecord) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NotificationSearchRecord) SetName(v string) {
	o.Name = v
}

// GetPriority returns the Priority field value
func (o *NotificationSearchRecord) GetPriority() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *NotificationSearchRecord) GetPriorityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *NotificationSearchRecord) SetPriority(v string) {
	o.Priority = v
}

// GetResourceName returns the ResourceName field value
func (o *NotificationSearchRecord) GetResourceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value
// and a boolean to check if the value has been set.
func (o *NotificationSearchRecord) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceName, true
}

// SetResourceName sets field value
func (o *NotificationSearchRecord) SetResourceName(v string) {
	o.ResourceName = v
}

// GetServiceEnvironmentID returns the ServiceEnvironmentID field value
func (o *NotificationSearchRecord) GetServiceEnvironmentID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceEnvironmentID
}

// GetServiceEnvironmentIDOk returns a tuple with the ServiceEnvironmentID field value
// and a boolean to check if the value has been set.
func (o *NotificationSearchRecord) GetServiceEnvironmentIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceEnvironmentID, true
}

// SetServiceEnvironmentID sets field value
func (o *NotificationSearchRecord) SetServiceEnvironmentID(v string) {
	o.ServiceEnvironmentID = v
}

// GetServiceEnvironmentName returns the ServiceEnvironmentName field value
func (o *NotificationSearchRecord) GetServiceEnvironmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceEnvironmentName
}

// GetServiceEnvironmentNameOk returns a tuple with the ServiceEnvironmentName field value
// and a boolean to check if the value has been set.
func (o *NotificationSearchRecord) GetServiceEnvironmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceEnvironmentName, true
}

// SetServiceEnvironmentName sets field value
func (o *NotificationSearchRecord) SetServiceEnvironmentName(v string) {
	o.ServiceEnvironmentName = v
}

// GetServiceEnvironmentType returns the ServiceEnvironmentType field value if set, zero value otherwise.
func (o *NotificationSearchRecord) GetServiceEnvironmentType() string {
	if o == nil || IsNil(o.ServiceEnvironmentType) {
		var ret string
		return ret
	}
	return *o.ServiceEnvironmentType
}

// GetServiceEnvironmentTypeOk returns a tuple with the ServiceEnvironmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSearchRecord) GetServiceEnvironmentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceEnvironmentType) {
		return nil, false
	}
	return o.ServiceEnvironmentType, true
}

// HasServiceEnvironmentType returns a boolean if a field has been set.
func (o *NotificationSearchRecord) HasServiceEnvironmentType() bool {
	if o != nil && !IsNil(o.ServiceEnvironmentType) {
		return true
	}

	return false
}

// SetServiceEnvironmentType gets a reference to the given string and assigns it to the ServiceEnvironmentType field.
func (o *NotificationSearchRecord) SetServiceEnvironmentType(v string) {
	o.ServiceEnvironmentType = &v
}

// GetServiceID returns the ServiceID field value
func (o *NotificationSearchRecord) GetServiceID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceID
}

// GetServiceIDOk returns a tuple with the ServiceID field value
// and a boolean to check if the value has been set.
func (o *NotificationSearchRecord) GetServiceIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceID, true
}

// SetServiceID sets field value
func (o *NotificationSearchRecord) SetServiceID(v string) {
	o.ServiceID = v
}

// GetServiceName returns the ServiceName field value
func (o *NotificationSearchRecord) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *NotificationSearchRecord) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *NotificationSearchRecord) SetServiceName(v string) {
	o.ServiceName = v
}

// GetTime returns the Time field value
func (o *NotificationSearchRecord) GetTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *NotificationSearchRecord) GetTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *NotificationSearchRecord) SetTime(v string) {
	o.Time = v
}

// GetType returns the Type field value
func (o *NotificationSearchRecord) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NotificationSearchRecord) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NotificationSearchRecord) SetType(v string) {
	o.Type = v
}

func (o NotificationSearchRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSearchRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["priority"] = o.Priority
	toSerialize["resourceName"] = o.ResourceName
	toSerialize["serviceEnvironmentID"] = o.ServiceEnvironmentID
	toSerialize["serviceEnvironmentName"] = o.ServiceEnvironmentName
	if !IsNil(o.ServiceEnvironmentType) {
		toSerialize["serviceEnvironmentType"] = o.ServiceEnvironmentType
	}
	toSerialize["serviceID"] = o.ServiceID
	toSerialize["serviceName"] = o.ServiceName
	toSerialize["time"] = o.Time
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *NotificationSearchRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"id",
		"name",
		"priority",
		"resourceName",
		"serviceEnvironmentID",
		"serviceEnvironmentName",
		"serviceID",
		"serviceName",
		"time",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationSearchRecord := _NotificationSearchRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationSearchRecord)

	if err != nil {
		return err
	}

	*o = NotificationSearchRecord(varNotificationSearchRecord)

	return err
}

type NullableNotificationSearchRecord struct {
	value *NotificationSearchRecord
	isSet bool
}

func (v NullableNotificationSearchRecord) Get() *NotificationSearchRecord {
	return v.value
}

func (v *NullableNotificationSearchRecord) Set(val *NotificationSearchRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSearchRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSearchRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSearchRecord(val *NotificationSearchRecord) *NullableNotificationSearchRecord {
	return &NullableNotificationSearchRecord{value: val, isSet: true}
}

func (v NullableNotificationSearchRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSearchRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


