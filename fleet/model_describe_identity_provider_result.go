/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the DescribeIdentityProviderResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeIdentityProviderResult{}

// DescribeIdentityProviderResult struct for DescribeIdentityProviderResult
type DescribeIdentityProviderResult struct {
	// The authorization endpoint of the Identity Provider
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty"`
	// The Client ID of the Identity Provider
	ClientId string `json:"clientId"`
	// The Client Secret of the Identity Provider
	ClientSecret *string `json:"clientSecret,omitempty"`
	// Whether the Identity Provider is disabled
	Disabled *bool `json:"disabled,omitempty"`
	// The email identifiers to use for the Identity Provider
	EmailIdentifiers *string `json:"emailIdentifiers,omitempty"`
	// The type of environment for the Identity Provider
	EnvironmentType *string `json:"environmentType,omitempty"`
	// ID of an Identity Provider
	Id string `json:"id"`
	// The name of the identity provider
	IdentityProviderName string `json:"identityProviderName"`
	// The URL of the icon to use for the login button
	LoginButtonIconUrl *string `json:"loginButtonIconUrl,omitempty"`
	// The text to use for the login button
	LoginButtonText *string `json:"loginButtonText,omitempty"`
	// The name of the Identity Provider
	Name *string `json:"name,omitempty"`
	// The scopes to request from the Identity Provider
	Scopes *string `json:"scopes,omitempty"`
	// The status of an operation
	Status string `json:"status"`
	// The token endpoint of the Identity Provider
	TokenEndpoint *string `json:"tokenEndpoint,omitempty"`
	// The user info endpoint of the Identity Provider
	UserInfoEndpoint *string `json:"userInfoEndpoint,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DescribeIdentityProviderResult DescribeIdentityProviderResult

// NewDescribeIdentityProviderResult instantiates a new DescribeIdentityProviderResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeIdentityProviderResult(clientId string, id string, identityProviderName string, status string) *DescribeIdentityProviderResult {
	this := DescribeIdentityProviderResult{}
	this.ClientId = clientId
	this.Id = id
	this.IdentityProviderName = identityProviderName
	this.Status = status
	return &this
}

// NewDescribeIdentityProviderResultWithDefaults instantiates a new DescribeIdentityProviderResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeIdentityProviderResultWithDefaults() *DescribeIdentityProviderResult {
	this := DescribeIdentityProviderResult{}
	return &this
}

// GetAuthorizationEndpoint returns the AuthorizationEndpoint field value if set, zero value otherwise.
func (o *DescribeIdentityProviderResult) GetAuthorizationEndpoint() string {
	if o == nil || IsNil(o.AuthorizationEndpoint) {
		var ret string
		return ret
	}
	return *o.AuthorizationEndpoint
}

// GetAuthorizationEndpointOk returns a tuple with the AuthorizationEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetAuthorizationEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizationEndpoint) {
		return nil, false
	}
	return o.AuthorizationEndpoint, true
}

// HasAuthorizationEndpoint returns a boolean if a field has been set.
func (o *DescribeIdentityProviderResult) HasAuthorizationEndpoint() bool {
	if o != nil && !IsNil(o.AuthorizationEndpoint) {
		return true
	}

	return false
}

// SetAuthorizationEndpoint gets a reference to the given string and assigns it to the AuthorizationEndpoint field.
func (o *DescribeIdentityProviderResult) SetAuthorizationEndpoint(v string) {
	o.AuthorizationEndpoint = &v
}

// GetClientId returns the ClientId field value
func (o *DescribeIdentityProviderResult) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *DescribeIdentityProviderResult) SetClientId(v string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *DescribeIdentityProviderResult) GetClientSecret() string {
	if o == nil || IsNil(o.ClientSecret) {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.ClientSecret) {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *DescribeIdentityProviderResult) HasClientSecret() bool {
	if o != nil && !IsNil(o.ClientSecret) {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *DescribeIdentityProviderResult) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *DescribeIdentityProviderResult) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *DescribeIdentityProviderResult) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *DescribeIdentityProviderResult) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetEmailIdentifiers returns the EmailIdentifiers field value if set, zero value otherwise.
func (o *DescribeIdentityProviderResult) GetEmailIdentifiers() string {
	if o == nil || IsNil(o.EmailIdentifiers) {
		var ret string
		return ret
	}
	return *o.EmailIdentifiers
}

// GetEmailIdentifiersOk returns a tuple with the EmailIdentifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetEmailIdentifiersOk() (*string, bool) {
	if o == nil || IsNil(o.EmailIdentifiers) {
		return nil, false
	}
	return o.EmailIdentifiers, true
}

// HasEmailIdentifiers returns a boolean if a field has been set.
func (o *DescribeIdentityProviderResult) HasEmailIdentifiers() bool {
	if o != nil && !IsNil(o.EmailIdentifiers) {
		return true
	}

	return false
}

// SetEmailIdentifiers gets a reference to the given string and assigns it to the EmailIdentifiers field.
func (o *DescribeIdentityProviderResult) SetEmailIdentifiers(v string) {
	o.EmailIdentifiers = &v
}

// GetEnvironmentType returns the EnvironmentType field value if set, zero value otherwise.
func (o *DescribeIdentityProviderResult) GetEnvironmentType() string {
	if o == nil || IsNil(o.EnvironmentType) {
		var ret string
		return ret
	}
	return *o.EnvironmentType
}

// GetEnvironmentTypeOk returns a tuple with the EnvironmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetEnvironmentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentType) {
		return nil, false
	}
	return o.EnvironmentType, true
}

// HasEnvironmentType returns a boolean if a field has been set.
func (o *DescribeIdentityProviderResult) HasEnvironmentType() bool {
	if o != nil && !IsNil(o.EnvironmentType) {
		return true
	}

	return false
}

// SetEnvironmentType gets a reference to the given string and assigns it to the EnvironmentType field.
func (o *DescribeIdentityProviderResult) SetEnvironmentType(v string) {
	o.EnvironmentType = &v
}

// GetId returns the Id field value
func (o *DescribeIdentityProviderResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DescribeIdentityProviderResult) SetId(v string) {
	o.Id = v
}

// GetIdentityProviderName returns the IdentityProviderName field value
func (o *DescribeIdentityProviderResult) GetIdentityProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentityProviderName
}

// GetIdentityProviderNameOk returns a tuple with the IdentityProviderName field value
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetIdentityProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentityProviderName, true
}

// SetIdentityProviderName sets field value
func (o *DescribeIdentityProviderResult) SetIdentityProviderName(v string) {
	o.IdentityProviderName = v
}

// GetLoginButtonIconUrl returns the LoginButtonIconUrl field value if set, zero value otherwise.
func (o *DescribeIdentityProviderResult) GetLoginButtonIconUrl() string {
	if o == nil || IsNil(o.LoginButtonIconUrl) {
		var ret string
		return ret
	}
	return *o.LoginButtonIconUrl
}

// GetLoginButtonIconUrlOk returns a tuple with the LoginButtonIconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetLoginButtonIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LoginButtonIconUrl) {
		return nil, false
	}
	return o.LoginButtonIconUrl, true
}

// HasLoginButtonIconUrl returns a boolean if a field has been set.
func (o *DescribeIdentityProviderResult) HasLoginButtonIconUrl() bool {
	if o != nil && !IsNil(o.LoginButtonIconUrl) {
		return true
	}

	return false
}

// SetLoginButtonIconUrl gets a reference to the given string and assigns it to the LoginButtonIconUrl field.
func (o *DescribeIdentityProviderResult) SetLoginButtonIconUrl(v string) {
	o.LoginButtonIconUrl = &v
}

// GetLoginButtonText returns the LoginButtonText field value if set, zero value otherwise.
func (o *DescribeIdentityProviderResult) GetLoginButtonText() string {
	if o == nil || IsNil(o.LoginButtonText) {
		var ret string
		return ret
	}
	return *o.LoginButtonText
}

// GetLoginButtonTextOk returns a tuple with the LoginButtonText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetLoginButtonTextOk() (*string, bool) {
	if o == nil || IsNil(o.LoginButtonText) {
		return nil, false
	}
	return o.LoginButtonText, true
}

// HasLoginButtonText returns a boolean if a field has been set.
func (o *DescribeIdentityProviderResult) HasLoginButtonText() bool {
	if o != nil && !IsNil(o.LoginButtonText) {
		return true
	}

	return false
}

// SetLoginButtonText gets a reference to the given string and assigns it to the LoginButtonText field.
func (o *DescribeIdentityProviderResult) SetLoginButtonText(v string) {
	o.LoginButtonText = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DescribeIdentityProviderResult) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DescribeIdentityProviderResult) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DescribeIdentityProviderResult) SetName(v string) {
	o.Name = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *DescribeIdentityProviderResult) GetScopes() string {
	if o == nil || IsNil(o.Scopes) {
		var ret string
		return ret
	}
	return *o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetScopesOk() (*string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *DescribeIdentityProviderResult) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given string and assigns it to the Scopes field.
func (o *DescribeIdentityProviderResult) SetScopes(v string) {
	o.Scopes = &v
}

// GetStatus returns the Status field value
func (o *DescribeIdentityProviderResult) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DescribeIdentityProviderResult) SetStatus(v string) {
	o.Status = v
}

// GetTokenEndpoint returns the TokenEndpoint field value if set, zero value otherwise.
func (o *DescribeIdentityProviderResult) GetTokenEndpoint() string {
	if o == nil || IsNil(o.TokenEndpoint) {
		var ret string
		return ret
	}
	return *o.TokenEndpoint
}

// GetTokenEndpointOk returns a tuple with the TokenEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetTokenEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.TokenEndpoint) {
		return nil, false
	}
	return o.TokenEndpoint, true
}

// HasTokenEndpoint returns a boolean if a field has been set.
func (o *DescribeIdentityProviderResult) HasTokenEndpoint() bool {
	if o != nil && !IsNil(o.TokenEndpoint) {
		return true
	}

	return false
}

// SetTokenEndpoint gets a reference to the given string and assigns it to the TokenEndpoint field.
func (o *DescribeIdentityProviderResult) SetTokenEndpoint(v string) {
	o.TokenEndpoint = &v
}

// GetUserInfoEndpoint returns the UserInfoEndpoint field value if set, zero value otherwise.
func (o *DescribeIdentityProviderResult) GetUserInfoEndpoint() string {
	if o == nil || IsNil(o.UserInfoEndpoint) {
		var ret string
		return ret
	}
	return *o.UserInfoEndpoint
}

// GetUserInfoEndpointOk returns a tuple with the UserInfoEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetUserInfoEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.UserInfoEndpoint) {
		return nil, false
	}
	return o.UserInfoEndpoint, true
}

// HasUserInfoEndpoint returns a boolean if a field has been set.
func (o *DescribeIdentityProviderResult) HasUserInfoEndpoint() bool {
	if o != nil && !IsNil(o.UserInfoEndpoint) {
		return true
	}

	return false
}

// SetUserInfoEndpoint gets a reference to the given string and assigns it to the UserInfoEndpoint field.
func (o *DescribeIdentityProviderResult) SetUserInfoEndpoint(v string) {
	o.UserInfoEndpoint = &v
}

func (o DescribeIdentityProviderResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeIdentityProviderResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorizationEndpoint) {
		toSerialize["authorizationEndpoint"] = o.AuthorizationEndpoint
	}
	toSerialize["clientId"] = o.ClientId
	if !IsNil(o.ClientSecret) {
		toSerialize["clientSecret"] = o.ClientSecret
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.EmailIdentifiers) {
		toSerialize["emailIdentifiers"] = o.EmailIdentifiers
	}
	if !IsNil(o.EnvironmentType) {
		toSerialize["environmentType"] = o.EnvironmentType
	}
	toSerialize["id"] = o.Id
	toSerialize["identityProviderName"] = o.IdentityProviderName
	if !IsNil(o.LoginButtonIconUrl) {
		toSerialize["loginButtonIconUrl"] = o.LoginButtonIconUrl
	}
	if !IsNil(o.LoginButtonText) {
		toSerialize["loginButtonText"] = o.LoginButtonText
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.TokenEndpoint) {
		toSerialize["tokenEndpoint"] = o.TokenEndpoint
	}
	if !IsNil(o.UserInfoEndpoint) {
		toSerialize["userInfoEndpoint"] = o.UserInfoEndpoint
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DescribeIdentityProviderResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clientId",
		"id",
		"identityProviderName",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeIdentityProviderResult := _DescribeIdentityProviderResult{}

	err = json.Unmarshal(data, &varDescribeIdentityProviderResult)

	if err != nil {
		return err
	}

	*o = DescribeIdentityProviderResult(varDescribeIdentityProviderResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authorizationEndpoint")
		delete(additionalProperties, "clientId")
		delete(additionalProperties, "clientSecret")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "emailIdentifiers")
		delete(additionalProperties, "environmentType")
		delete(additionalProperties, "id")
		delete(additionalProperties, "identityProviderName")
		delete(additionalProperties, "loginButtonIconUrl")
		delete(additionalProperties, "loginButtonText")
		delete(additionalProperties, "name")
		delete(additionalProperties, "scopes")
		delete(additionalProperties, "status")
		delete(additionalProperties, "tokenEndpoint")
		delete(additionalProperties, "userInfoEndpoint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDescribeIdentityProviderResult struct {
	value *DescribeIdentityProviderResult
	isSet bool
}

func (v NullableDescribeIdentityProviderResult) Get() *DescribeIdentityProviderResult {
	return v.value
}

func (v *NullableDescribeIdentityProviderResult) Set(val *DescribeIdentityProviderResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeIdentityProviderResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeIdentityProviderResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeIdentityProviderResult(val *DescribeIdentityProviderResult) *NullableDescribeIdentityProviderResult {
	return &NullableDescribeIdentityProviderResult{value: val, isSet: true}
}

func (v NullableDescribeIdentityProviderResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeIdentityProviderResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


