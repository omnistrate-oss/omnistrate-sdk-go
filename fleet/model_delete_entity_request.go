/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the DeleteEntityRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteEntityRequest{}

// DeleteEntityRequest struct for DeleteEntityRequest
type DeleteEntityRequest struct {
	// Unique identifier of the entity to delete
	EntityID string `json:"entityID"`
	// Type of the entity (e.g., NAMESPACE, SERVICE, POD, etc.)
	EntityType string `json:"entityType"`
	// ID of a Host Cluster
	HostClusterID string `json:"hostClusterID"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _DeleteEntityRequest DeleteEntityRequest

// NewDeleteEntityRequest instantiates a new DeleteEntityRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteEntityRequest(entityID string, entityType string, hostClusterID string, token string) *DeleteEntityRequest {
	this := DeleteEntityRequest{}
	this.EntityID = entityID
	this.EntityType = entityType
	this.HostClusterID = hostClusterID
	this.Token = token
	return &this
}

// NewDeleteEntityRequestWithDefaults instantiates a new DeleteEntityRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteEntityRequestWithDefaults() *DeleteEntityRequest {
	this := DeleteEntityRequest{}
	return &this
}

// GetEntityID returns the EntityID field value
func (o *DeleteEntityRequest) GetEntityID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityID
}

// GetEntityIDOk returns a tuple with the EntityID field value
// and a boolean to check if the value has been set.
func (o *DeleteEntityRequest) GetEntityIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityID, true
}

// SetEntityID sets field value
func (o *DeleteEntityRequest) SetEntityID(v string) {
	o.EntityID = v
}

// GetEntityType returns the EntityType field value
func (o *DeleteEntityRequest) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *DeleteEntityRequest) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *DeleteEntityRequest) SetEntityType(v string) {
	o.EntityType = v
}

// GetHostClusterID returns the HostClusterID field value
func (o *DeleteEntityRequest) GetHostClusterID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostClusterID
}

// GetHostClusterIDOk returns a tuple with the HostClusterID field value
// and a boolean to check if the value has been set.
func (o *DeleteEntityRequest) GetHostClusterIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostClusterID, true
}

// SetHostClusterID sets field value
func (o *DeleteEntityRequest) SetHostClusterID(v string) {
	o.HostClusterID = v
}

// GetToken returns the Token field value
func (o *DeleteEntityRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *DeleteEntityRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *DeleteEntityRequest) SetToken(v string) {
	o.Token = v
}

func (o DeleteEntityRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteEntityRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entityID"] = o.EntityID
	toSerialize["entityType"] = o.EntityType
	toSerialize["hostClusterID"] = o.HostClusterID
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeleteEntityRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entityID",
		"entityType",
		"hostClusterID",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteEntityRequest := _DeleteEntityRequest{}

	err = json.Unmarshal(data, &varDeleteEntityRequest)

	if err != nil {
		return err
	}

	*o = DeleteEntityRequest(varDeleteEntityRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entityID")
		delete(additionalProperties, "entityType")
		delete(additionalProperties, "hostClusterID")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeleteEntityRequest struct {
	value *DeleteEntityRequest
	isSet bool
}

func (v NullableDeleteEntityRequest) Get() *DeleteEntityRequest {
	return v.value
}

func (v *NullableDeleteEntityRequest) Set(val *DeleteEntityRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteEntityRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteEntityRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteEntityRequest(val *DeleteEntityRequest) *NullableDeleteEntityRequest {
	return &NullableDeleteEntityRequest{value: val, isSet: true}
}

func (v NullableDeleteEntityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteEntityRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


