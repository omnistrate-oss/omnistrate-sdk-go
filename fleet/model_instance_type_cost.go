/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceTypeCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceTypeCost{}

// InstanceTypeCost struct for InstanceTypeCost
type InstanceTypeCost struct {
	// The number of VMs of this type
	NumVMs int64 `json:"numVMs"`
	// The total cost across all VMs of this type
	TotalCost float64 `json:"totalCost"`
	// The total uptime hours across all VMs of this type
	TotalUptimeHours float64 `json:"totalUptimeHours"`
	AdditionalProperties map[string]interface{}
}

type _InstanceTypeCost InstanceTypeCost

// NewInstanceTypeCost instantiates a new InstanceTypeCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceTypeCost(numVMs int64, totalCost float64, totalUptimeHours float64) *InstanceTypeCost {
	this := InstanceTypeCost{}
	this.NumVMs = numVMs
	this.TotalCost = totalCost
	this.TotalUptimeHours = totalUptimeHours
	return &this
}

// NewInstanceTypeCostWithDefaults instantiates a new InstanceTypeCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceTypeCostWithDefaults() *InstanceTypeCost {
	this := InstanceTypeCost{}
	return &this
}

// GetNumVMs returns the NumVMs field value
func (o *InstanceTypeCost) GetNumVMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NumVMs
}

// GetNumVMsOk returns a tuple with the NumVMs field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeCost) GetNumVMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumVMs, true
}

// SetNumVMs sets field value
func (o *InstanceTypeCost) SetNumVMs(v int64) {
	o.NumVMs = v
}

// GetTotalCost returns the TotalCost field value
func (o *InstanceTypeCost) GetTotalCost() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeCost) GetTotalCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCost, true
}

// SetTotalCost sets field value
func (o *InstanceTypeCost) SetTotalCost(v float64) {
	o.TotalCost = v
}

// GetTotalUptimeHours returns the TotalUptimeHours field value
func (o *InstanceTypeCost) GetTotalUptimeHours() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalUptimeHours
}

// GetTotalUptimeHoursOk returns a tuple with the TotalUptimeHours field value
// and a boolean to check if the value has been set.
func (o *InstanceTypeCost) GetTotalUptimeHoursOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalUptimeHours, true
}

// SetTotalUptimeHours sets field value
func (o *InstanceTypeCost) SetTotalUptimeHours(v float64) {
	o.TotalUptimeHours = v
}

func (o InstanceTypeCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceTypeCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["numVMs"] = o.NumVMs
	toSerialize["totalCost"] = o.TotalCost
	toSerialize["totalUptimeHours"] = o.TotalUptimeHours

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceTypeCost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"numVMs",
		"totalCost",
		"totalUptimeHours",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceTypeCost := _InstanceTypeCost{}

	err = json.Unmarshal(data, &varInstanceTypeCost)

	if err != nil {
		return err
	}

	*o = InstanceTypeCost(varInstanceTypeCost)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "numVMs")
		delete(additionalProperties, "totalCost")
		delete(additionalProperties, "totalUptimeHours")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceTypeCost struct {
	value *InstanceTypeCost
	isSet bool
}

func (v NullableInstanceTypeCost) Get() *InstanceTypeCost {
	return v.value
}

func (v *NullableInstanceTypeCost) Set(val *InstanceTypeCost) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceTypeCost) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceTypeCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceTypeCost(val *InstanceTypeCost) *NullableInstanceTypeCost {
	return &NullableInstanceTypeCost{value: val, isSet: true}
}

func (v NullableInstanceTypeCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceTypeCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


