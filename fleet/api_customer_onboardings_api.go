/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type CustomerOnboardingsApiAPI interface {

	/*
	CustomerOnboardingsApiCreateCustomerOnboarding CreateCustomerOnboarding customer-onboardings-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCustomerOnboardingsApiCreateCustomerOnboardingRequest
	*/
	CustomerOnboardingsApiCreateCustomerOnboarding(ctx context.Context) ApiCustomerOnboardingsApiCreateCustomerOnboardingRequest

	// CustomerOnboardingsApiCreateCustomerOnboardingExecute executes the request
	//  @return string
	CustomerOnboardingsApiCreateCustomerOnboardingExecute(r ApiCustomerOnboardingsApiCreateCustomerOnboardingRequest) (string, *http.Response, error)

	/*
	CustomerOnboardingsApiDeleteCustomerOnboarding DeleteCustomerOnboarding customer-onboardings-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the onboarding.
	@return ApiCustomerOnboardingsApiDeleteCustomerOnboardingRequest
	*/
	CustomerOnboardingsApiDeleteCustomerOnboarding(ctx context.Context, id string) ApiCustomerOnboardingsApiDeleteCustomerOnboardingRequest

	// CustomerOnboardingsApiDeleteCustomerOnboardingExecute executes the request
	CustomerOnboardingsApiDeleteCustomerOnboardingExecute(r ApiCustomerOnboardingsApiDeleteCustomerOnboardingRequest) (*http.Response, error)

	/*
	CustomerOnboardingsApiDescribeCustomerOnboarding DescribeCustomerOnboarding customer-onboardings-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the onboarding.
	@return ApiCustomerOnboardingsApiDescribeCustomerOnboardingRequest
	*/
	CustomerOnboardingsApiDescribeCustomerOnboarding(ctx context.Context, id string) ApiCustomerOnboardingsApiDescribeCustomerOnboardingRequest

	// CustomerOnboardingsApiDescribeCustomerOnboardingExecute executes the request
	//  @return CustomerOnboarding
	CustomerOnboardingsApiDescribeCustomerOnboardingExecute(r ApiCustomerOnboardingsApiDescribeCustomerOnboardingRequest) (*CustomerOnboarding, *http.Response, error)

	/*
	CustomerOnboardingsApiListCustomerOnboardingStages ListCustomerOnboardingStages customer-onboardings-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCustomerOnboardingsApiListCustomerOnboardingStagesRequest
	*/
	CustomerOnboardingsApiListCustomerOnboardingStages(ctx context.Context) ApiCustomerOnboardingsApiListCustomerOnboardingStagesRequest

	// CustomerOnboardingsApiListCustomerOnboardingStagesExecute executes the request
	//  @return ListCustomerOnboardingStagesResult
	CustomerOnboardingsApiListCustomerOnboardingStagesExecute(r ApiCustomerOnboardingsApiListCustomerOnboardingStagesRequest) (*ListCustomerOnboardingStagesResult, *http.Response, error)

	/*
	CustomerOnboardingsApiListCustomerOnboardings ListCustomerOnboardings customer-onboardings-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCustomerOnboardingsApiListCustomerOnboardingsRequest
	*/
	CustomerOnboardingsApiListCustomerOnboardings(ctx context.Context) ApiCustomerOnboardingsApiListCustomerOnboardingsRequest

	// CustomerOnboardingsApiListCustomerOnboardingsExecute executes the request
	//  @return ListCustomerOnboardingResult
	CustomerOnboardingsApiListCustomerOnboardingsExecute(r ApiCustomerOnboardingsApiListCustomerOnboardingsRequest) (*ListCustomerOnboardingResult, *http.Response, error)

	/*
	CustomerOnboardingsApiUpdateCustomerOnboarding UpdateCustomerOnboarding customer-onboardings-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the onboarding.
	@return ApiCustomerOnboardingsApiUpdateCustomerOnboardingRequest
	*/
	CustomerOnboardingsApiUpdateCustomerOnboarding(ctx context.Context, id string) ApiCustomerOnboardingsApiUpdateCustomerOnboardingRequest

	// CustomerOnboardingsApiUpdateCustomerOnboardingExecute executes the request
	CustomerOnboardingsApiUpdateCustomerOnboardingExecute(r ApiCustomerOnboardingsApiUpdateCustomerOnboardingRequest) (*http.Response, error)
}

// CustomerOnboardingsApiAPIService CustomerOnboardingsApiAPI service
type CustomerOnboardingsApiAPIService service

type ApiCustomerOnboardingsApiCreateCustomerOnboardingRequest struct {
	ctx context.Context
	ApiService CustomerOnboardingsApiAPI
	createCustomerOnboardingRequest2 *CreateCustomerOnboardingRequest2
}

func (r ApiCustomerOnboardingsApiCreateCustomerOnboardingRequest) CreateCustomerOnboardingRequest2(createCustomerOnboardingRequest2 CreateCustomerOnboardingRequest2) ApiCustomerOnboardingsApiCreateCustomerOnboardingRequest {
	r.createCustomerOnboardingRequest2 = &createCustomerOnboardingRequest2
	return r
}

func (r ApiCustomerOnboardingsApiCreateCustomerOnboardingRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CustomerOnboardingsApiCreateCustomerOnboardingExecute(r)
}

/*
CustomerOnboardingsApiCreateCustomerOnboarding CreateCustomerOnboarding customer-onboardings-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCustomerOnboardingsApiCreateCustomerOnboardingRequest
*/
func (a *CustomerOnboardingsApiAPIService) CustomerOnboardingsApiCreateCustomerOnboarding(ctx context.Context) ApiCustomerOnboardingsApiCreateCustomerOnboardingRequest {
	return ApiCustomerOnboardingsApiCreateCustomerOnboardingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *CustomerOnboardingsApiAPIService) CustomerOnboardingsApiCreateCustomerOnboardingExecute(r ApiCustomerOnboardingsApiCreateCustomerOnboardingRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomerOnboardingsApiAPIService.CustomerOnboardingsApiCreateCustomerOnboarding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/customer-onboarding"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createCustomerOnboardingRequest2 == nil {
		return localVarReturnValue, nil, reportError("createCustomerOnboardingRequest2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createCustomerOnboardingRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerOnboardingsApiDeleteCustomerOnboardingRequest struct {
	ctx context.Context
	ApiService CustomerOnboardingsApiAPI
	id string
}

func (r ApiCustomerOnboardingsApiDeleteCustomerOnboardingRequest) Execute() (*http.Response, error) {
	return r.ApiService.CustomerOnboardingsApiDeleteCustomerOnboardingExecute(r)
}

/*
CustomerOnboardingsApiDeleteCustomerOnboarding DeleteCustomerOnboarding customer-onboardings-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the onboarding.
 @return ApiCustomerOnboardingsApiDeleteCustomerOnboardingRequest
*/
func (a *CustomerOnboardingsApiAPIService) CustomerOnboardingsApiDeleteCustomerOnboarding(ctx context.Context, id string) ApiCustomerOnboardingsApiDeleteCustomerOnboardingRequest {
	return ApiCustomerOnboardingsApiDeleteCustomerOnboardingRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CustomerOnboardingsApiAPIService) CustomerOnboardingsApiDeleteCustomerOnboardingExecute(r ApiCustomerOnboardingsApiDeleteCustomerOnboardingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomerOnboardingsApiAPIService.CustomerOnboardingsApiDeleteCustomerOnboarding")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/customer-onboarding/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCustomerOnboardingsApiDescribeCustomerOnboardingRequest struct {
	ctx context.Context
	ApiService CustomerOnboardingsApiAPI
	id string
}

func (r ApiCustomerOnboardingsApiDescribeCustomerOnboardingRequest) Execute() (*CustomerOnboarding, *http.Response, error) {
	return r.ApiService.CustomerOnboardingsApiDescribeCustomerOnboardingExecute(r)
}

/*
CustomerOnboardingsApiDescribeCustomerOnboarding DescribeCustomerOnboarding customer-onboardings-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the onboarding.
 @return ApiCustomerOnboardingsApiDescribeCustomerOnboardingRequest
*/
func (a *CustomerOnboardingsApiAPIService) CustomerOnboardingsApiDescribeCustomerOnboarding(ctx context.Context, id string) ApiCustomerOnboardingsApiDescribeCustomerOnboardingRequest {
	return ApiCustomerOnboardingsApiDescribeCustomerOnboardingRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomerOnboarding
func (a *CustomerOnboardingsApiAPIService) CustomerOnboardingsApiDescribeCustomerOnboardingExecute(r ApiCustomerOnboardingsApiDescribeCustomerOnboardingRequest) (*CustomerOnboarding, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomerOnboarding
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomerOnboardingsApiAPIService.CustomerOnboardingsApiDescribeCustomerOnboarding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/customer-onboarding/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerOnboardingsApiListCustomerOnboardingStagesRequest struct {
	ctx context.Context
	ApiService CustomerOnboardingsApiAPI
}

func (r ApiCustomerOnboardingsApiListCustomerOnboardingStagesRequest) Execute() (*ListCustomerOnboardingStagesResult, *http.Response, error) {
	return r.ApiService.CustomerOnboardingsApiListCustomerOnboardingStagesExecute(r)
}

/*
CustomerOnboardingsApiListCustomerOnboardingStages ListCustomerOnboardingStages customer-onboardings-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCustomerOnboardingsApiListCustomerOnboardingStagesRequest
*/
func (a *CustomerOnboardingsApiAPIService) CustomerOnboardingsApiListCustomerOnboardingStages(ctx context.Context) ApiCustomerOnboardingsApiListCustomerOnboardingStagesRequest {
	return ApiCustomerOnboardingsApiListCustomerOnboardingStagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListCustomerOnboardingStagesResult
func (a *CustomerOnboardingsApiAPIService) CustomerOnboardingsApiListCustomerOnboardingStagesExecute(r ApiCustomerOnboardingsApiListCustomerOnboardingStagesRequest) (*ListCustomerOnboardingStagesResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListCustomerOnboardingStagesResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomerOnboardingsApiAPIService.CustomerOnboardingsApiListCustomerOnboardingStages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/customer-onboarding-stages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerOnboardingsApiListCustomerOnboardingsRequest struct {
	ctx context.Context
	ApiService CustomerOnboardingsApiAPI
	pendingOnly *bool
}

// Whether to return only pending onboardings.
func (r ApiCustomerOnboardingsApiListCustomerOnboardingsRequest) PendingOnly(pendingOnly bool) ApiCustomerOnboardingsApiListCustomerOnboardingsRequest {
	r.pendingOnly = &pendingOnly
	return r
}

func (r ApiCustomerOnboardingsApiListCustomerOnboardingsRequest) Execute() (*ListCustomerOnboardingResult, *http.Response, error) {
	return r.ApiService.CustomerOnboardingsApiListCustomerOnboardingsExecute(r)
}

/*
CustomerOnboardingsApiListCustomerOnboardings ListCustomerOnboardings customer-onboardings-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCustomerOnboardingsApiListCustomerOnboardingsRequest
*/
func (a *CustomerOnboardingsApiAPIService) CustomerOnboardingsApiListCustomerOnboardings(ctx context.Context) ApiCustomerOnboardingsApiListCustomerOnboardingsRequest {
	return ApiCustomerOnboardingsApiListCustomerOnboardingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListCustomerOnboardingResult
func (a *CustomerOnboardingsApiAPIService) CustomerOnboardingsApiListCustomerOnboardingsExecute(r ApiCustomerOnboardingsApiListCustomerOnboardingsRequest) (*ListCustomerOnboardingResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListCustomerOnboardingResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomerOnboardingsApiAPIService.CustomerOnboardingsApiListCustomerOnboardings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/customer-onboarding"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pendingOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pendingOnly", r.pendingOnly, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerOnboardingsApiUpdateCustomerOnboardingRequest struct {
	ctx context.Context
	ApiService CustomerOnboardingsApiAPI
	id string
	updateCustomerOnboardingRequest2 *UpdateCustomerOnboardingRequest2
}

func (r ApiCustomerOnboardingsApiUpdateCustomerOnboardingRequest) UpdateCustomerOnboardingRequest2(updateCustomerOnboardingRequest2 UpdateCustomerOnboardingRequest2) ApiCustomerOnboardingsApiUpdateCustomerOnboardingRequest {
	r.updateCustomerOnboardingRequest2 = &updateCustomerOnboardingRequest2
	return r
}

func (r ApiCustomerOnboardingsApiUpdateCustomerOnboardingRequest) Execute() (*http.Response, error) {
	return r.ApiService.CustomerOnboardingsApiUpdateCustomerOnboardingExecute(r)
}

/*
CustomerOnboardingsApiUpdateCustomerOnboarding UpdateCustomerOnboarding customer-onboardings-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the onboarding.
 @return ApiCustomerOnboardingsApiUpdateCustomerOnboardingRequest
*/
func (a *CustomerOnboardingsApiAPIService) CustomerOnboardingsApiUpdateCustomerOnboarding(ctx context.Context, id string) ApiCustomerOnboardingsApiUpdateCustomerOnboardingRequest {
	return ApiCustomerOnboardingsApiUpdateCustomerOnboardingRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CustomerOnboardingsApiAPIService) CustomerOnboardingsApiUpdateCustomerOnboardingExecute(r ApiCustomerOnboardingsApiUpdateCustomerOnboardingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomerOnboardingsApiAPIService.CustomerOnboardingsApiUpdateCustomerOnboarding")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/customer-onboarding/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateCustomerOnboardingRequest2 == nil {
		return nil, reportError("updateCustomerOnboardingRequest2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateCustomerOnboardingRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
