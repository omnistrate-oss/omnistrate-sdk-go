/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the DescribeRegionCostResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeRegionCostResult{}

// DescribeRegionCostResult struct for DescribeRegionCostResult
type DescribeRegionCostResult struct {
	// The cost data for each region
	RegionCosts *map[string]PerRegionCost `json:"regionCosts,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DescribeRegionCostResult DescribeRegionCostResult

// NewDescribeRegionCostResult instantiates a new DescribeRegionCostResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeRegionCostResult() *DescribeRegionCostResult {
	this := DescribeRegionCostResult{}
	return &this
}

// NewDescribeRegionCostResultWithDefaults instantiates a new DescribeRegionCostResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeRegionCostResultWithDefaults() *DescribeRegionCostResult {
	this := DescribeRegionCostResult{}
	return &this
}

// GetRegionCosts returns the RegionCosts field value if set, zero value otherwise.
func (o *DescribeRegionCostResult) GetRegionCosts() map[string]PerRegionCost {
	if o == nil || IsNil(o.RegionCosts) {
		var ret map[string]PerRegionCost
		return ret
	}
	return *o.RegionCosts
}

// GetRegionCostsOk returns a tuple with the RegionCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeRegionCostResult) GetRegionCostsOk() (*map[string]PerRegionCost, bool) {
	if o == nil || IsNil(o.RegionCosts) {
		return nil, false
	}
	return o.RegionCosts, true
}

// HasRegionCosts returns a boolean if a field has been set.
func (o *DescribeRegionCostResult) HasRegionCosts() bool {
	if o != nil && !IsNil(o.RegionCosts) {
		return true
	}

	return false
}

// SetRegionCosts gets a reference to the given map[string]PerRegionCost and assigns it to the RegionCosts field.
func (o *DescribeRegionCostResult) SetRegionCosts(v map[string]PerRegionCost) {
	o.RegionCosts = &v
}

func (o DescribeRegionCostResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeRegionCostResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RegionCosts) {
		toSerialize["regionCosts"] = o.RegionCosts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DescribeRegionCostResult) UnmarshalJSON(data []byte) (err error) {
	varDescribeRegionCostResult := _DescribeRegionCostResult{}

	err = json.Unmarshal(data, &varDescribeRegionCostResult)

	if err != nil {
		return err
	}

	*o = DescribeRegionCostResult(varDescribeRegionCostResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "regionCosts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDescribeRegionCostResult struct {
	value *DescribeRegionCostResult
	isSet bool
}

func (v NullableDescribeRegionCostResult) Get() *DescribeRegionCostResult {
	return v.value
}

func (v *NullableDescribeRegionCostResult) Set(val *DescribeRegionCostResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeRegionCostResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeRegionCostResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeRegionCostResult(val *DescribeRegionCostResult) *NullableDescribeRegionCostResult {
	return &NullableDescribeRegionCostResult{value: val, isSet: true}
}

func (v NullableDescribeRegionCostResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeRegionCostResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


