/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailConfiguration{}

// EmailConfiguration struct for EmailConfiguration
type EmailConfiguration struct {
	// Email address to send notifications to
	To string `json:"to"`
}

type _EmailConfiguration EmailConfiguration

// NewEmailConfiguration instantiates a new EmailConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailConfiguration(to string) *EmailConfiguration {
	this := EmailConfiguration{}
	this.To = to
	return &this
}

// NewEmailConfigurationWithDefaults instantiates a new EmailConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailConfigurationWithDefaults() *EmailConfiguration {
	this := EmailConfiguration{}
	return &this
}

// GetTo returns the To field value
func (o *EmailConfiguration) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *EmailConfiguration) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *EmailConfiguration) SetTo(v string) {
	o.To = v
}

func (o EmailConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["to"] = o.To
	return toSerialize, nil
}

func (o *EmailConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailConfiguration := _EmailConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailConfiguration)

	if err != nil {
		return err
	}

	*o = EmailConfiguration(varEmailConfiguration)

	return err
}

type NullableEmailConfiguration struct {
	value *EmailConfiguration
	isSet bool
}

func (v NullableEmailConfiguration) Get() *EmailConfiguration {
	return v.value
}

func (v *NullableEmailConfiguration) Set(val *EmailConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailConfiguration(val *EmailConfiguration) *NullableEmailConfiguration {
	return &NullableEmailConfiguration{value: val, isSet: true}
}

func (v NullableEmailConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


