/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type FleetCustomNetworkApiAPI interface {

	/*
	FleetCustomNetworkApiCreateCustomNetwork CreateCustomNetwork fleet-custom-network-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFleetCustomNetworkApiCreateCustomNetworkRequest
	*/
	FleetCustomNetworkApiCreateCustomNetwork(ctx context.Context) ApiFleetCustomNetworkApiCreateCustomNetworkRequest

	// FleetCustomNetworkApiCreateCustomNetworkExecute executes the request
	//  @return FleetCustomNetwork
	FleetCustomNetworkApiCreateCustomNetworkExecute(r ApiFleetCustomNetworkApiCreateCustomNetworkRequest) (*FleetCustomNetwork, *http.Response, error)

	/*
	FleetCustomNetworkApiDeleteCustomNetwork DeleteCustomNetwork fleet-custom-network-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of a custom network
	@return ApiFleetCustomNetworkApiDeleteCustomNetworkRequest
	*/
	FleetCustomNetworkApiDeleteCustomNetwork(ctx context.Context, id string) ApiFleetCustomNetworkApiDeleteCustomNetworkRequest

	// FleetCustomNetworkApiDeleteCustomNetworkExecute executes the request
	FleetCustomNetworkApiDeleteCustomNetworkExecute(r ApiFleetCustomNetworkApiDeleteCustomNetworkRequest) (*http.Response, error)

	/*
	FleetCustomNetworkApiDescribeCustomNetwork DescribeCustomNetwork fleet-custom-network-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of a custom network
	@return ApiFleetCustomNetworkApiDescribeCustomNetworkRequest
	*/
	FleetCustomNetworkApiDescribeCustomNetwork(ctx context.Context, id string) ApiFleetCustomNetworkApiDescribeCustomNetworkRequest

	// FleetCustomNetworkApiDescribeCustomNetworkExecute executes the request
	//  @return FleetCustomNetwork
	FleetCustomNetworkApiDescribeCustomNetworkExecute(r ApiFleetCustomNetworkApiDescribeCustomNetworkRequest) (*FleetCustomNetwork, *http.Response, error)

	/*
	FleetCustomNetworkApiListCustomNetworks ListCustomNetworks fleet-custom-network-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFleetCustomNetworkApiListCustomNetworksRequest
	*/
	FleetCustomNetworkApiListCustomNetworks(ctx context.Context) ApiFleetCustomNetworkApiListCustomNetworksRequest

	// FleetCustomNetworkApiListCustomNetworksExecute executes the request
	//  @return FleetListCustomNetworksResult
	FleetCustomNetworkApiListCustomNetworksExecute(r ApiFleetCustomNetworkApiListCustomNetworksRequest) (*FleetListCustomNetworksResult, *http.Response, error)

	/*
	FleetCustomNetworkApiUpdateCustomNetwork UpdateCustomNetwork fleet-custom-network-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ID of a custom network
	@return ApiFleetCustomNetworkApiUpdateCustomNetworkRequest
	*/
	FleetCustomNetworkApiUpdateCustomNetwork(ctx context.Context, id string) ApiFleetCustomNetworkApiUpdateCustomNetworkRequest

	// FleetCustomNetworkApiUpdateCustomNetworkExecute executes the request
	//  @return FleetCustomNetwork
	FleetCustomNetworkApiUpdateCustomNetworkExecute(r ApiFleetCustomNetworkApiUpdateCustomNetworkRequest) (*FleetCustomNetwork, *http.Response, error)
}

// FleetCustomNetworkApiAPIService FleetCustomNetworkApiAPI service
type FleetCustomNetworkApiAPIService service

type ApiFleetCustomNetworkApiCreateCustomNetworkRequest struct {
	ctx context.Context
	ApiService FleetCustomNetworkApiAPI
	fleetCreateCustomNetworkRequest2 *FleetCreateCustomNetworkRequest2
}

func (r ApiFleetCustomNetworkApiCreateCustomNetworkRequest) FleetCreateCustomNetworkRequest2(fleetCreateCustomNetworkRequest2 FleetCreateCustomNetworkRequest2) ApiFleetCustomNetworkApiCreateCustomNetworkRequest {
	r.fleetCreateCustomNetworkRequest2 = &fleetCreateCustomNetworkRequest2
	return r
}

func (r ApiFleetCustomNetworkApiCreateCustomNetworkRequest) Execute() (*FleetCustomNetwork, *http.Response, error) {
	return r.ApiService.FleetCustomNetworkApiCreateCustomNetworkExecute(r)
}

/*
FleetCustomNetworkApiCreateCustomNetwork CreateCustomNetwork fleet-custom-network-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFleetCustomNetworkApiCreateCustomNetworkRequest
*/
func (a *FleetCustomNetworkApiAPIService) FleetCustomNetworkApiCreateCustomNetwork(ctx context.Context) ApiFleetCustomNetworkApiCreateCustomNetworkRequest {
	return ApiFleetCustomNetworkApiCreateCustomNetworkRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FleetCustomNetwork
func (a *FleetCustomNetworkApiAPIService) FleetCustomNetworkApiCreateCustomNetworkExecute(r ApiFleetCustomNetworkApiCreateCustomNetworkRequest) (*FleetCustomNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FleetCustomNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FleetCustomNetworkApiAPIService.FleetCustomNetworkApiCreateCustomNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/custom-network"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fleetCreateCustomNetworkRequest2 == nil {
		return localVarReturnValue, nil, reportError("fleetCreateCustomNetworkRequest2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fleetCreateCustomNetworkRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFleetCustomNetworkApiDeleteCustomNetworkRequest struct {
	ctx context.Context
	ApiService FleetCustomNetworkApiAPI
	id string
}

func (r ApiFleetCustomNetworkApiDeleteCustomNetworkRequest) Execute() (*http.Response, error) {
	return r.ApiService.FleetCustomNetworkApiDeleteCustomNetworkExecute(r)
}

/*
FleetCustomNetworkApiDeleteCustomNetwork DeleteCustomNetwork fleet-custom-network-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of a custom network
 @return ApiFleetCustomNetworkApiDeleteCustomNetworkRequest
*/
func (a *FleetCustomNetworkApiAPIService) FleetCustomNetworkApiDeleteCustomNetwork(ctx context.Context, id string) ApiFleetCustomNetworkApiDeleteCustomNetworkRequest {
	return ApiFleetCustomNetworkApiDeleteCustomNetworkRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *FleetCustomNetworkApiAPIService) FleetCustomNetworkApiDeleteCustomNetworkExecute(r ApiFleetCustomNetworkApiDeleteCustomNetworkRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FleetCustomNetworkApiAPIService.FleetCustomNetworkApiDeleteCustomNetwork")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/custom-network/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFleetCustomNetworkApiDescribeCustomNetworkRequest struct {
	ctx context.Context
	ApiService FleetCustomNetworkApiAPI
	id string
}

func (r ApiFleetCustomNetworkApiDescribeCustomNetworkRequest) Execute() (*FleetCustomNetwork, *http.Response, error) {
	return r.ApiService.FleetCustomNetworkApiDescribeCustomNetworkExecute(r)
}

/*
FleetCustomNetworkApiDescribeCustomNetwork DescribeCustomNetwork fleet-custom-network-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of a custom network
 @return ApiFleetCustomNetworkApiDescribeCustomNetworkRequest
*/
func (a *FleetCustomNetworkApiAPIService) FleetCustomNetworkApiDescribeCustomNetwork(ctx context.Context, id string) ApiFleetCustomNetworkApiDescribeCustomNetworkRequest {
	return ApiFleetCustomNetworkApiDescribeCustomNetworkRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FleetCustomNetwork
func (a *FleetCustomNetworkApiAPIService) FleetCustomNetworkApiDescribeCustomNetworkExecute(r ApiFleetCustomNetworkApiDescribeCustomNetworkRequest) (*FleetCustomNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FleetCustomNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FleetCustomNetworkApiAPIService.FleetCustomNetworkApiDescribeCustomNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/custom-network/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFleetCustomNetworkApiListCustomNetworksRequest struct {
	ctx context.Context
	ApiService FleetCustomNetworkApiAPI
	cloudProviderName *string
	cloudProviderRegion *string
	customNetworksOnly *bool
}

// The name of the cloud provider that custom network should be created in
func (r ApiFleetCustomNetworkApiListCustomNetworksRequest) CloudProviderName(cloudProviderName string) ApiFleetCustomNetworkApiListCustomNetworksRequest {
	r.cloudProviderName = &cloudProviderName
	return r
}

// The region of the cloud provider that the network should be created in
func (r ApiFleetCustomNetworkApiListCustomNetworksRequest) CloudProviderRegion(cloudProviderRegion string) ApiFleetCustomNetworkApiListCustomNetworksRequest {
	r.cloudProviderRegion = &cloudProviderRegion
	return r
}

// Flag indicating whether to return only custom networks, or to include default and imported networks as well
func (r ApiFleetCustomNetworkApiListCustomNetworksRequest) CustomNetworksOnly(customNetworksOnly bool) ApiFleetCustomNetworkApiListCustomNetworksRequest {
	r.customNetworksOnly = &customNetworksOnly
	return r
}

func (r ApiFleetCustomNetworkApiListCustomNetworksRequest) Execute() (*FleetListCustomNetworksResult, *http.Response, error) {
	return r.ApiService.FleetCustomNetworkApiListCustomNetworksExecute(r)
}

/*
FleetCustomNetworkApiListCustomNetworks ListCustomNetworks fleet-custom-network-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFleetCustomNetworkApiListCustomNetworksRequest
*/
func (a *FleetCustomNetworkApiAPIService) FleetCustomNetworkApiListCustomNetworks(ctx context.Context) ApiFleetCustomNetworkApiListCustomNetworksRequest {
	return ApiFleetCustomNetworkApiListCustomNetworksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FleetListCustomNetworksResult
func (a *FleetCustomNetworkApiAPIService) FleetCustomNetworkApiListCustomNetworksExecute(r ApiFleetCustomNetworkApiListCustomNetworksRequest) (*FleetListCustomNetworksResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FleetListCustomNetworksResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FleetCustomNetworkApiAPIService.FleetCustomNetworkApiListCustomNetworks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/custom-network"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cloudProviderName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloudProviderName", r.cloudProviderName, "form", "")
	}
	if r.cloudProviderRegion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloudProviderRegion", r.cloudProviderRegion, "form", "")
	}
	if r.customNetworksOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customNetworksOnly", r.customNetworksOnly, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFleetCustomNetworkApiUpdateCustomNetworkRequest struct {
	ctx context.Context
	ApiService FleetCustomNetworkApiAPI
	id string
	fleetUpdateCustomNetworkRequest2 *FleetUpdateCustomNetworkRequest2
}

func (r ApiFleetCustomNetworkApiUpdateCustomNetworkRequest) FleetUpdateCustomNetworkRequest2(fleetUpdateCustomNetworkRequest2 FleetUpdateCustomNetworkRequest2) ApiFleetCustomNetworkApiUpdateCustomNetworkRequest {
	r.fleetUpdateCustomNetworkRequest2 = &fleetUpdateCustomNetworkRequest2
	return r
}

func (r ApiFleetCustomNetworkApiUpdateCustomNetworkRequest) Execute() (*FleetCustomNetwork, *http.Response, error) {
	return r.ApiService.FleetCustomNetworkApiUpdateCustomNetworkExecute(r)
}

/*
FleetCustomNetworkApiUpdateCustomNetwork UpdateCustomNetwork fleet-custom-network-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ID of a custom network
 @return ApiFleetCustomNetworkApiUpdateCustomNetworkRequest
*/
func (a *FleetCustomNetworkApiAPIService) FleetCustomNetworkApiUpdateCustomNetwork(ctx context.Context, id string) ApiFleetCustomNetworkApiUpdateCustomNetworkRequest {
	return ApiFleetCustomNetworkApiUpdateCustomNetworkRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FleetCustomNetwork
func (a *FleetCustomNetworkApiAPIService) FleetCustomNetworkApiUpdateCustomNetworkExecute(r ApiFleetCustomNetworkApiUpdateCustomNetworkRequest) (*FleetCustomNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FleetCustomNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FleetCustomNetworkApiAPIService.FleetCustomNetworkApiUpdateCustomNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/custom-network/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fleetUpdateCustomNetworkRequest2 == nil {
		return localVarReturnValue, nil, reportError("fleetUpdateCustomNetworkRequest2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fleetUpdateCustomNetworkRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
