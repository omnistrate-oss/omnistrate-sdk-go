/*
Omnistrate Fleet API

Testing FleetWorkflowsApiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_FleetWorkflowsApiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FleetWorkflowsApiAPIService FleetWorkflowsApiDescribeServiceWorkflow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var environmentId string
		var id string

		resp, httpRes, err := apiClient.FleetWorkflowsApiAPI.FleetWorkflowsApiDescribeServiceWorkflow(context.Background(), serviceId, environmentId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetWorkflowsApiAPIService FleetWorkflowsApiDescribeServiceWorkflowSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var environmentId string

		resp, httpRes, err := apiClient.FleetWorkflowsApiAPI.FleetWorkflowsApiDescribeServiceWorkflowSummary(context.Background(), serviceId, environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetWorkflowsApiAPIService FleetWorkflowsApiGetWorkflowEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var environmentId string
		var id string

		resp, httpRes, err := apiClient.FleetWorkflowsApiAPI.FleetWorkflowsApiGetWorkflowEvents(context.Background(), serviceId, environmentId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetWorkflowsApiAPIService FleetWorkflowsApiListServiceWorkflows", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var environmentId string

		resp, httpRes, err := apiClient.FleetWorkflowsApiAPI.FleetWorkflowsApiListServiceWorkflows(context.Background(), serviceId, environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetWorkflowsApiAPIService FleetWorkflowsApiTerminateServiceWorkflow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var environmentId string
		var id string

		resp, httpRes, err := apiClient.FleetWorkflowsApiAPI.FleetWorkflowsApiTerminateServiceWorkflow(context.Background(), serviceId, environmentId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FleetWorkflowsApiAPIService FleetWorkflowsApiUpdateServiceWorkflow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var environmentId string
		var id string

		resp, httpRes, err := apiClient.FleetWorkflowsApiAPI.FleetWorkflowsApiUpdateServiceWorkflow(context.Background(), serviceId, environmentId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
