/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the DescribeUserCostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeUserCostRequest{}

// DescribeUserCostRequest struct for DescribeUserCostRequest
type DescribeUserCostRequest struct {
	// End time of the window in RFC 3339 format. If omitted, the filter is open-ended at the start.
	EndDate time.Time `json:"endDate"`
	// The type of service environment
	EnvironmentType string `json:"environmentType"`
	// The user IDs to exclude from the cost data
	ExcludeUserIDs *string `json:"excludeUserIDs,omitempty"`
	// The user IDs to include in the cost data
	IncludeUserIDs *string `json:"includeUserIDs,omitempty"`
	// Start time of the window in RFC 3339 format. If omitted, the filter is open-ended at the start.
	StartDate time.Time `json:"startDate"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	// The number of top instances to return
	TopNInstances *int64 `json:"topNInstances,omitempty"`
	// The number of top users to return
	TopNUsers *int64 `json:"topNUsers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DescribeUserCostRequest DescribeUserCostRequest

// NewDescribeUserCostRequest instantiates a new DescribeUserCostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeUserCostRequest(endDate time.Time, environmentType string, startDate time.Time, token string) *DescribeUserCostRequest {
	this := DescribeUserCostRequest{}
	this.EndDate = endDate
	this.EnvironmentType = environmentType
	this.StartDate = startDate
	this.Token = token
	return &this
}

// NewDescribeUserCostRequestWithDefaults instantiates a new DescribeUserCostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeUserCostRequestWithDefaults() *DescribeUserCostRequest {
	this := DescribeUserCostRequest{}
	return &this
}

// GetEndDate returns the EndDate field value
func (o *DescribeUserCostRequest) GetEndDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *DescribeUserCostRequest) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *DescribeUserCostRequest) SetEndDate(v time.Time) {
	o.EndDate = v
}

// GetEnvironmentType returns the EnvironmentType field value
func (o *DescribeUserCostRequest) GetEnvironmentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentType
}

// GetEnvironmentTypeOk returns a tuple with the EnvironmentType field value
// and a boolean to check if the value has been set.
func (o *DescribeUserCostRequest) GetEnvironmentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentType, true
}

// SetEnvironmentType sets field value
func (o *DescribeUserCostRequest) SetEnvironmentType(v string) {
	o.EnvironmentType = v
}

// GetExcludeUserIDs returns the ExcludeUserIDs field value if set, zero value otherwise.
func (o *DescribeUserCostRequest) GetExcludeUserIDs() string {
	if o == nil || IsNil(o.ExcludeUserIDs) {
		var ret string
		return ret
	}
	return *o.ExcludeUserIDs
}

// GetExcludeUserIDsOk returns a tuple with the ExcludeUserIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserCostRequest) GetExcludeUserIDsOk() (*string, bool) {
	if o == nil || IsNil(o.ExcludeUserIDs) {
		return nil, false
	}
	return o.ExcludeUserIDs, true
}

// HasExcludeUserIDs returns a boolean if a field has been set.
func (o *DescribeUserCostRequest) HasExcludeUserIDs() bool {
	if o != nil && !IsNil(o.ExcludeUserIDs) {
		return true
	}

	return false
}

// SetExcludeUserIDs gets a reference to the given string and assigns it to the ExcludeUserIDs field.
func (o *DescribeUserCostRequest) SetExcludeUserIDs(v string) {
	o.ExcludeUserIDs = &v
}

// GetIncludeUserIDs returns the IncludeUserIDs field value if set, zero value otherwise.
func (o *DescribeUserCostRequest) GetIncludeUserIDs() string {
	if o == nil || IsNil(o.IncludeUserIDs) {
		var ret string
		return ret
	}
	return *o.IncludeUserIDs
}

// GetIncludeUserIDsOk returns a tuple with the IncludeUserIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserCostRequest) GetIncludeUserIDsOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeUserIDs) {
		return nil, false
	}
	return o.IncludeUserIDs, true
}

// HasIncludeUserIDs returns a boolean if a field has been set.
func (o *DescribeUserCostRequest) HasIncludeUserIDs() bool {
	if o != nil && !IsNil(o.IncludeUserIDs) {
		return true
	}

	return false
}

// SetIncludeUserIDs gets a reference to the given string and assigns it to the IncludeUserIDs field.
func (o *DescribeUserCostRequest) SetIncludeUserIDs(v string) {
	o.IncludeUserIDs = &v
}

// GetStartDate returns the StartDate field value
func (o *DescribeUserCostRequest) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *DescribeUserCostRequest) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *DescribeUserCostRequest) SetStartDate(v time.Time) {
	o.StartDate = v
}

// GetToken returns the Token field value
func (o *DescribeUserCostRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *DescribeUserCostRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *DescribeUserCostRequest) SetToken(v string) {
	o.Token = v
}

// GetTopNInstances returns the TopNInstances field value if set, zero value otherwise.
func (o *DescribeUserCostRequest) GetTopNInstances() int64 {
	if o == nil || IsNil(o.TopNInstances) {
		var ret int64
		return ret
	}
	return *o.TopNInstances
}

// GetTopNInstancesOk returns a tuple with the TopNInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserCostRequest) GetTopNInstancesOk() (*int64, bool) {
	if o == nil || IsNil(o.TopNInstances) {
		return nil, false
	}
	return o.TopNInstances, true
}

// HasTopNInstances returns a boolean if a field has been set.
func (o *DescribeUserCostRequest) HasTopNInstances() bool {
	if o != nil && !IsNil(o.TopNInstances) {
		return true
	}

	return false
}

// SetTopNInstances gets a reference to the given int64 and assigns it to the TopNInstances field.
func (o *DescribeUserCostRequest) SetTopNInstances(v int64) {
	o.TopNInstances = &v
}

// GetTopNUsers returns the TopNUsers field value if set, zero value otherwise.
func (o *DescribeUserCostRequest) GetTopNUsers() int64 {
	if o == nil || IsNil(o.TopNUsers) {
		var ret int64
		return ret
	}
	return *o.TopNUsers
}

// GetTopNUsersOk returns a tuple with the TopNUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserCostRequest) GetTopNUsersOk() (*int64, bool) {
	if o == nil || IsNil(o.TopNUsers) {
		return nil, false
	}
	return o.TopNUsers, true
}

// HasTopNUsers returns a boolean if a field has been set.
func (o *DescribeUserCostRequest) HasTopNUsers() bool {
	if o != nil && !IsNil(o.TopNUsers) {
		return true
	}

	return false
}

// SetTopNUsers gets a reference to the given int64 and assigns it to the TopNUsers field.
func (o *DescribeUserCostRequest) SetTopNUsers(v int64) {
	o.TopNUsers = &v
}

func (o DescribeUserCostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeUserCostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endDate"] = o.EndDate
	toSerialize["environmentType"] = o.EnvironmentType
	if !IsNil(o.ExcludeUserIDs) {
		toSerialize["excludeUserIDs"] = o.ExcludeUserIDs
	}
	if !IsNil(o.IncludeUserIDs) {
		toSerialize["includeUserIDs"] = o.IncludeUserIDs
	}
	toSerialize["startDate"] = o.StartDate
	toSerialize["token"] = o.Token
	if !IsNil(o.TopNInstances) {
		toSerialize["topNInstances"] = o.TopNInstances
	}
	if !IsNil(o.TopNUsers) {
		toSerialize["topNUsers"] = o.TopNUsers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DescribeUserCostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endDate",
		"environmentType",
		"startDate",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeUserCostRequest := _DescribeUserCostRequest{}

	err = json.Unmarshal(data, &varDescribeUserCostRequest)

	if err != nil {
		return err
	}

	*o = DescribeUserCostRequest(varDescribeUserCostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "endDate")
		delete(additionalProperties, "environmentType")
		delete(additionalProperties, "excludeUserIDs")
		delete(additionalProperties, "includeUserIDs")
		delete(additionalProperties, "startDate")
		delete(additionalProperties, "token")
		delete(additionalProperties, "topNInstances")
		delete(additionalProperties, "topNUsers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDescribeUserCostRequest struct {
	value *DescribeUserCostRequest
	isSet bool
}

func (v NullableDescribeUserCostRequest) Get() *DescribeUserCostRequest {
	return v.value
}

func (v *NullableDescribeUserCostRequest) Set(val *DescribeUserCostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeUserCostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeUserCostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeUserCostRequest(val *DescribeUserCostRequest) *NullableDescribeUserCostRequest {
	return &NullableDescribeUserCostRequest{value: val, isSet: true}
}

func (v NullableDescribeUserCostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeUserCostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


