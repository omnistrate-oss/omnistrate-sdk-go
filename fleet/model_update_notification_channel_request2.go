/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the UpdateNotificationChannelRequest2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNotificationChannelRequest2{}

// UpdateNotificationChannelRequest2 struct for UpdateNotificationChannelRequest2
type UpdateNotificationChannelRequest2 struct {
	Email *EmailConfiguration `json:"email,omitempty"`
	// Name of the channel
	Name *string `json:"name,omitempty"`
	PagerDuty *PagerDutyConfiguration `json:"pagerDuty,omitempty"`
	Slack *SlackConfiguration `json:"slack,omitempty"`
	Subscription *ChannelSubscription `json:"subscription,omitempty"`
	Webhook *WebhookConfiguration `json:"webhook,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateNotificationChannelRequest2 UpdateNotificationChannelRequest2

// NewUpdateNotificationChannelRequest2 instantiates a new UpdateNotificationChannelRequest2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNotificationChannelRequest2() *UpdateNotificationChannelRequest2 {
	this := UpdateNotificationChannelRequest2{}
	return &this
}

// NewUpdateNotificationChannelRequest2WithDefaults instantiates a new UpdateNotificationChannelRequest2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNotificationChannelRequest2WithDefaults() *UpdateNotificationChannelRequest2 {
	this := UpdateNotificationChannelRequest2{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateNotificationChannelRequest2) GetEmail() EmailConfiguration {
	if o == nil || IsNil(o.Email) {
		var ret EmailConfiguration
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNotificationChannelRequest2) GetEmailOk() (*EmailConfiguration, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateNotificationChannelRequest2) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given EmailConfiguration and assigns it to the Email field.
func (o *UpdateNotificationChannelRequest2) SetEmail(v EmailConfiguration) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateNotificationChannelRequest2) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNotificationChannelRequest2) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateNotificationChannelRequest2) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateNotificationChannelRequest2) SetName(v string) {
	o.Name = &v
}

// GetPagerDuty returns the PagerDuty field value if set, zero value otherwise.
func (o *UpdateNotificationChannelRequest2) GetPagerDuty() PagerDutyConfiguration {
	if o == nil || IsNil(o.PagerDuty) {
		var ret PagerDutyConfiguration
		return ret
	}
	return *o.PagerDuty
}

// GetPagerDutyOk returns a tuple with the PagerDuty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNotificationChannelRequest2) GetPagerDutyOk() (*PagerDutyConfiguration, bool) {
	if o == nil || IsNil(o.PagerDuty) {
		return nil, false
	}
	return o.PagerDuty, true
}

// HasPagerDuty returns a boolean if a field has been set.
func (o *UpdateNotificationChannelRequest2) HasPagerDuty() bool {
	if o != nil && !IsNil(o.PagerDuty) {
		return true
	}

	return false
}

// SetPagerDuty gets a reference to the given PagerDutyConfiguration and assigns it to the PagerDuty field.
func (o *UpdateNotificationChannelRequest2) SetPagerDuty(v PagerDutyConfiguration) {
	o.PagerDuty = &v
}

// GetSlack returns the Slack field value if set, zero value otherwise.
func (o *UpdateNotificationChannelRequest2) GetSlack() SlackConfiguration {
	if o == nil || IsNil(o.Slack) {
		var ret SlackConfiguration
		return ret
	}
	return *o.Slack
}

// GetSlackOk returns a tuple with the Slack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNotificationChannelRequest2) GetSlackOk() (*SlackConfiguration, bool) {
	if o == nil || IsNil(o.Slack) {
		return nil, false
	}
	return o.Slack, true
}

// HasSlack returns a boolean if a field has been set.
func (o *UpdateNotificationChannelRequest2) HasSlack() bool {
	if o != nil && !IsNil(o.Slack) {
		return true
	}

	return false
}

// SetSlack gets a reference to the given SlackConfiguration and assigns it to the Slack field.
func (o *UpdateNotificationChannelRequest2) SetSlack(v SlackConfiguration) {
	o.Slack = &v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *UpdateNotificationChannelRequest2) GetSubscription() ChannelSubscription {
	if o == nil || IsNil(o.Subscription) {
		var ret ChannelSubscription
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNotificationChannelRequest2) GetSubscriptionOk() (*ChannelSubscription, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *UpdateNotificationChannelRequest2) HasSubscription() bool {
	if o != nil && !IsNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given ChannelSubscription and assigns it to the Subscription field.
func (o *UpdateNotificationChannelRequest2) SetSubscription(v ChannelSubscription) {
	o.Subscription = &v
}

// GetWebhook returns the Webhook field value if set, zero value otherwise.
func (o *UpdateNotificationChannelRequest2) GetWebhook() WebhookConfiguration {
	if o == nil || IsNil(o.Webhook) {
		var ret WebhookConfiguration
		return ret
	}
	return *o.Webhook
}

// GetWebhookOk returns a tuple with the Webhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNotificationChannelRequest2) GetWebhookOk() (*WebhookConfiguration, bool) {
	if o == nil || IsNil(o.Webhook) {
		return nil, false
	}
	return o.Webhook, true
}

// HasWebhook returns a boolean if a field has been set.
func (o *UpdateNotificationChannelRequest2) HasWebhook() bool {
	if o != nil && !IsNil(o.Webhook) {
		return true
	}

	return false
}

// SetWebhook gets a reference to the given WebhookConfiguration and assigns it to the Webhook field.
func (o *UpdateNotificationChannelRequest2) SetWebhook(v WebhookConfiguration) {
	o.Webhook = &v
}

func (o UpdateNotificationChannelRequest2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNotificationChannelRequest2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PagerDuty) {
		toSerialize["pagerDuty"] = o.PagerDuty
	}
	if !IsNil(o.Slack) {
		toSerialize["slack"] = o.Slack
	}
	if !IsNil(o.Subscription) {
		toSerialize["subscription"] = o.Subscription
	}
	if !IsNil(o.Webhook) {
		toSerialize["webhook"] = o.Webhook
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateNotificationChannelRequest2) UnmarshalJSON(data []byte) (err error) {
	varUpdateNotificationChannelRequest2 := _UpdateNotificationChannelRequest2{}

	err = json.Unmarshal(data, &varUpdateNotificationChannelRequest2)

	if err != nil {
		return err
	}

	*o = UpdateNotificationChannelRequest2(varUpdateNotificationChannelRequest2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		delete(additionalProperties, "name")
		delete(additionalProperties, "pagerDuty")
		delete(additionalProperties, "slack")
		delete(additionalProperties, "subscription")
		delete(additionalProperties, "webhook")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateNotificationChannelRequest2 struct {
	value *UpdateNotificationChannelRequest2
	isSet bool
}

func (v NullableUpdateNotificationChannelRequest2) Get() *UpdateNotificationChannelRequest2 {
	return v.value
}

func (v *NullableUpdateNotificationChannelRequest2) Set(val *UpdateNotificationChannelRequest2) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNotificationChannelRequest2) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNotificationChannelRequest2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNotificationChannelRequest2(val *UpdateNotificationChannelRequest2) *NullableUpdateNotificationChannelRequest2 {
	return &NullableUpdateNotificationChannelRequest2{value: val, isSet: true}
}

func (v NullableUpdateNotificationChannelRequest2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNotificationChannelRequest2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


