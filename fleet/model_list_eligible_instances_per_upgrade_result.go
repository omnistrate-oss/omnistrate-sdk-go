/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListEligibleInstancesPerUpgradeResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListEligibleInstancesPerUpgradeResult{}

// ListEligibleInstancesPerUpgradeResult struct for ListEligibleInstancesPerUpgradeResult
type ListEligibleInstancesPerUpgradeResult struct {
	// The list of instances that are in the upgrade path
	Instances []InstanceUpgrade `json:"instances"`
	// The product tier ID that this upgrade path belongs to
	ProductTierId string `json:"productTierId"`
	// The service ID this workflow belongs to.
	ServiceId string `json:"serviceId"`
	// The upgrade path ID
	UpgradePathId string `json:"upgradePathId"`
}

type _ListEligibleInstancesPerUpgradeResult ListEligibleInstancesPerUpgradeResult

// NewListEligibleInstancesPerUpgradeResult instantiates a new ListEligibleInstancesPerUpgradeResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListEligibleInstancesPerUpgradeResult(instances []InstanceUpgrade, productTierId string, serviceId string, upgradePathId string) *ListEligibleInstancesPerUpgradeResult {
	this := ListEligibleInstancesPerUpgradeResult{}
	this.Instances = instances
	this.ProductTierId = productTierId
	this.ServiceId = serviceId
	this.UpgradePathId = upgradePathId
	return &this
}

// NewListEligibleInstancesPerUpgradeResultWithDefaults instantiates a new ListEligibleInstancesPerUpgradeResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListEligibleInstancesPerUpgradeResultWithDefaults() *ListEligibleInstancesPerUpgradeResult {
	this := ListEligibleInstancesPerUpgradeResult{}
	return &this
}

// GetInstances returns the Instances field value
func (o *ListEligibleInstancesPerUpgradeResult) GetInstances() []InstanceUpgrade {
	if o == nil {
		var ret []InstanceUpgrade
		return ret
	}

	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value
// and a boolean to check if the value has been set.
func (o *ListEligibleInstancesPerUpgradeResult) GetInstancesOk() ([]InstanceUpgrade, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instances, true
}

// SetInstances sets field value
func (o *ListEligibleInstancesPerUpgradeResult) SetInstances(v []InstanceUpgrade) {
	o.Instances = v
}

// GetProductTierId returns the ProductTierId field value
func (o *ListEligibleInstancesPerUpgradeResult) GetProductTierId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value
// and a boolean to check if the value has been set.
func (o *ListEligibleInstancesPerUpgradeResult) GetProductTierIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTierId, true
}

// SetProductTierId sets field value
func (o *ListEligibleInstancesPerUpgradeResult) SetProductTierId(v string) {
	o.ProductTierId = v
}

// GetServiceId returns the ServiceId field value
func (o *ListEligibleInstancesPerUpgradeResult) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *ListEligibleInstancesPerUpgradeResult) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *ListEligibleInstancesPerUpgradeResult) SetServiceId(v string) {
	o.ServiceId = v
}

// GetUpgradePathId returns the UpgradePathId field value
func (o *ListEligibleInstancesPerUpgradeResult) GetUpgradePathId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpgradePathId
}

// GetUpgradePathIdOk returns a tuple with the UpgradePathId field value
// and a boolean to check if the value has been set.
func (o *ListEligibleInstancesPerUpgradeResult) GetUpgradePathIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpgradePathId, true
}

// SetUpgradePathId sets field value
func (o *ListEligibleInstancesPerUpgradeResult) SetUpgradePathId(v string) {
	o.UpgradePathId = v
}

func (o ListEligibleInstancesPerUpgradeResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListEligibleInstancesPerUpgradeResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instances"] = o.Instances
	toSerialize["productTierId"] = o.ProductTierId
	toSerialize["serviceId"] = o.ServiceId
	toSerialize["upgradePathId"] = o.UpgradePathId
	return toSerialize, nil
}

func (o *ListEligibleInstancesPerUpgradeResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instances",
		"productTierId",
		"serviceId",
		"upgradePathId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListEligibleInstancesPerUpgradeResult := _ListEligibleInstancesPerUpgradeResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListEligibleInstancesPerUpgradeResult)

	if err != nil {
		return err
	}

	*o = ListEligibleInstancesPerUpgradeResult(varListEligibleInstancesPerUpgradeResult)

	return err
}

type NullableListEligibleInstancesPerUpgradeResult struct {
	value *ListEligibleInstancesPerUpgradeResult
	isSet bool
}

func (v NullableListEligibleInstancesPerUpgradeResult) Get() *ListEligibleInstancesPerUpgradeResult {
	return v.value
}

func (v *NullableListEligibleInstancesPerUpgradeResult) Set(val *ListEligibleInstancesPerUpgradeResult) {
	v.value = val
	v.isSet = true
}

func (v NullableListEligibleInstancesPerUpgradeResult) IsSet() bool {
	return v.isSet
}

func (v *NullableListEligibleInstancesPerUpgradeResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListEligibleInstancesPerUpgradeResult(val *ListEligibleInstancesPerUpgradeResult) *NullableListEligibleInstancesPerUpgradeResult {
	return &NullableListEligibleInstancesPerUpgradeResult{value: val, isSet: true}
}

func (v NullableListEligibleInstancesPerUpgradeResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListEligibleInstancesPerUpgradeResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


