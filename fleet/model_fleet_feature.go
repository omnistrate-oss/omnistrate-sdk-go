/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FleetFeature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FleetFeature{}

// FleetFeature struct for FleetFeature
type FleetFeature struct {
	// The feature to enable.
	Feature string `json:"feature"`
	// The configuration for the feature.
	FeatureConfig *map[string]string `json:"featureConfig,omitempty"`
	// The status of the feature.
	Status string `json:"status"`
}

type _FleetFeature FleetFeature

// NewFleetFeature instantiates a new FleetFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFleetFeature(feature string, status string) *FleetFeature {
	this := FleetFeature{}
	this.Feature = feature
	this.Status = status
	return &this
}

// NewFleetFeatureWithDefaults instantiates a new FleetFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFleetFeatureWithDefaults() *FleetFeature {
	this := FleetFeature{}
	return &this
}

// GetFeature returns the Feature field value
func (o *FleetFeature) GetFeature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value
// and a boolean to check if the value has been set.
func (o *FleetFeature) GetFeatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Feature, true
}

// SetFeature sets field value
func (o *FleetFeature) SetFeature(v string) {
	o.Feature = v
}

// GetFeatureConfig returns the FeatureConfig field value if set, zero value otherwise.
func (o *FleetFeature) GetFeatureConfig() map[string]string {
	if o == nil || IsNil(o.FeatureConfig) {
		var ret map[string]string
		return ret
	}
	return *o.FeatureConfig
}

// GetFeatureConfigOk returns a tuple with the FeatureConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetFeature) GetFeatureConfigOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.FeatureConfig) {
		return nil, false
	}
	return o.FeatureConfig, true
}

// HasFeatureConfig returns a boolean if a field has been set.
func (o *FleetFeature) HasFeatureConfig() bool {
	if o != nil && !IsNil(o.FeatureConfig) {
		return true
	}

	return false
}

// SetFeatureConfig gets a reference to the given map[string]string and assigns it to the FeatureConfig field.
func (o *FleetFeature) SetFeatureConfig(v map[string]string) {
	o.FeatureConfig = &v
}

// GetStatus returns the Status field value
func (o *FleetFeature) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *FleetFeature) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *FleetFeature) SetStatus(v string) {
	o.Status = v
}

func (o FleetFeature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FleetFeature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["feature"] = o.Feature
	if !IsNil(o.FeatureConfig) {
		toSerialize["featureConfig"] = o.FeatureConfig
	}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *FleetFeature) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"feature",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFleetFeature := _FleetFeature{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFleetFeature)

	if err != nil {
		return err
	}

	*o = FleetFeature(varFleetFeature)

	return err
}

type NullableFleetFeature struct {
	value *FleetFeature
	isSet bool
}

func (v NullableFleetFeature) Get() *FleetFeature {
	return v.value
}

func (v *NullableFleetFeature) Set(val *FleetFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableFleetFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableFleetFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFleetFeature(val *FleetFeature) *NullableFleetFeature {
	return &NullableFleetFeature{value: val, isSet: true}
}

func (v NullableFleetFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFleetFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


