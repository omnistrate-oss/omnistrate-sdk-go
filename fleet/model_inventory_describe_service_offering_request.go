/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the InventoryDescribeServiceOfferingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryDescribeServiceOfferingRequest{}

// InventoryDescribeServiceOfferingRequest struct for InventoryDescribeServiceOfferingRequest
type InventoryDescribeServiceOfferingRequest struct {
	// ID of a Product Tier
	ProductTierId *string `json:"productTierId,omitempty"`
	// The product tier version
	ProductTierVersion *string `json:"productTierVersion,omitempty"`
	// ID of a Service
	ServiceId string `json:"serviceId"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	// This parameter is used to configure the visibility of the service control-plane APIs
	Visibility *string `json:"visibility,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InventoryDescribeServiceOfferingRequest InventoryDescribeServiceOfferingRequest

// NewInventoryDescribeServiceOfferingRequest instantiates a new InventoryDescribeServiceOfferingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryDescribeServiceOfferingRequest(serviceId string, token string) *InventoryDescribeServiceOfferingRequest {
	this := InventoryDescribeServiceOfferingRequest{}
	this.ServiceId = serviceId
	this.Token = token
	return &this
}

// NewInventoryDescribeServiceOfferingRequestWithDefaults instantiates a new InventoryDescribeServiceOfferingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryDescribeServiceOfferingRequestWithDefaults() *InventoryDescribeServiceOfferingRequest {
	this := InventoryDescribeServiceOfferingRequest{}
	return &this
}

// GetProductTierId returns the ProductTierId field value if set, zero value otherwise.
func (o *InventoryDescribeServiceOfferingRequest) GetProductTierId() string {
	if o == nil || IsNil(o.ProductTierId) {
		var ret string
		return ret
	}
	return *o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDescribeServiceOfferingRequest) GetProductTierIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTierId) {
		return nil, false
	}
	return o.ProductTierId, true
}

// HasProductTierId returns a boolean if a field has been set.
func (o *InventoryDescribeServiceOfferingRequest) HasProductTierId() bool {
	if o != nil && !IsNil(o.ProductTierId) {
		return true
	}

	return false
}

// SetProductTierId gets a reference to the given string and assigns it to the ProductTierId field.
func (o *InventoryDescribeServiceOfferingRequest) SetProductTierId(v string) {
	o.ProductTierId = &v
}

// GetProductTierVersion returns the ProductTierVersion field value if set, zero value otherwise.
func (o *InventoryDescribeServiceOfferingRequest) GetProductTierVersion() string {
	if o == nil || IsNil(o.ProductTierVersion) {
		var ret string
		return ret
	}
	return *o.ProductTierVersion
}

// GetProductTierVersionOk returns a tuple with the ProductTierVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDescribeServiceOfferingRequest) GetProductTierVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTierVersion) {
		return nil, false
	}
	return o.ProductTierVersion, true
}

// HasProductTierVersion returns a boolean if a field has been set.
func (o *InventoryDescribeServiceOfferingRequest) HasProductTierVersion() bool {
	if o != nil && !IsNil(o.ProductTierVersion) {
		return true
	}

	return false
}

// SetProductTierVersion gets a reference to the given string and assigns it to the ProductTierVersion field.
func (o *InventoryDescribeServiceOfferingRequest) SetProductTierVersion(v string) {
	o.ProductTierVersion = &v
}

// GetServiceId returns the ServiceId field value
func (o *InventoryDescribeServiceOfferingRequest) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *InventoryDescribeServiceOfferingRequest) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *InventoryDescribeServiceOfferingRequest) SetServiceId(v string) {
	o.ServiceId = v
}

// GetToken returns the Token field value
func (o *InventoryDescribeServiceOfferingRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *InventoryDescribeServiceOfferingRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *InventoryDescribeServiceOfferingRequest) SetToken(v string) {
	o.Token = v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *InventoryDescribeServiceOfferingRequest) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryDescribeServiceOfferingRequest) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *InventoryDescribeServiceOfferingRequest) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *InventoryDescribeServiceOfferingRequest) SetVisibility(v string) {
	o.Visibility = &v
}

func (o InventoryDescribeServiceOfferingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryDescribeServiceOfferingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductTierId) {
		toSerialize["productTierId"] = o.ProductTierId
	}
	if !IsNil(o.ProductTierVersion) {
		toSerialize["productTierVersion"] = o.ProductTierVersion
	}
	toSerialize["serviceId"] = o.ServiceId
	toSerialize["token"] = o.Token
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InventoryDescribeServiceOfferingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serviceId",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInventoryDescribeServiceOfferingRequest := _InventoryDescribeServiceOfferingRequest{}

	err = json.Unmarshal(data, &varInventoryDescribeServiceOfferingRequest)

	if err != nil {
		return err
	}

	*o = InventoryDescribeServiceOfferingRequest(varInventoryDescribeServiceOfferingRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "productTierId")
		delete(additionalProperties, "productTierVersion")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "token")
		delete(additionalProperties, "visibility")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInventoryDescribeServiceOfferingRequest struct {
	value *InventoryDescribeServiceOfferingRequest
	isSet bool
}

func (v NullableInventoryDescribeServiceOfferingRequest) Get() *InventoryDescribeServiceOfferingRequest {
	return v.value
}

func (v *NullableInventoryDescribeServiceOfferingRequest) Set(val *InventoryDescribeServiceOfferingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryDescribeServiceOfferingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryDescribeServiceOfferingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryDescribeServiceOfferingRequest(val *InventoryDescribeServiceOfferingRequest) *NullableInventoryDescribeServiceOfferingRequest {
	return &NullableInventoryDescribeServiceOfferingRequest{value: val, isSet: true}
}

func (v NullableInventoryDescribeServiceOfferingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryDescribeServiceOfferingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


