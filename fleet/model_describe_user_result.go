/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the DescribeUserResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeUserResult{}

// DescribeUserResult struct for DescribeUserResult
type DescribeUserResult struct {
	Address *Address `json:"address,omitempty"`
	// The user creation time
	CreatedAt *string `json:"createdAt,omitempty"`
	// The email of the user
	Email *string `json:"email,omitempty"`
	// Is the user enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The User ID
	Id string `json:"id"`
	// The user update time
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`
	// The name of the user
	Name *string `json:"name,omitempty"`
	// The cookie policy for the org that this user owns
	OrgCookiePolicy *string `json:"orgCookiePolicy,omitempty"`
	// The description of the org that this user owns
	OrgDescription *string `json:"orgDescription,omitempty"`
	// The favicon of the org that this user owns
	OrgFavIconURL *string `json:"orgFavIconURL,omitempty"`
	// The ID of the org that this user owns
	OrgId *string `json:"orgId,omitempty"`
	// The logo of the org that this user owns
	OrgLogoURL *string `json:"orgLogoURL,omitempty"`
	// The org name that this user owns
	OrgName *string `json:"orgName,omitempty"`
	// The privacy policy for the org that this user owns
	OrgPrivacyPolicy *string `json:"orgPrivacyPolicy,omitempty"`
	// The support email of the org that this user owns
	OrgSupportEmail *string `json:"orgSupportEmail,omitempty"`
	// The terms of use for the org that this user owns
	OrgTermsOfUse *string `json:"orgTermsOfUse,omitempty"`
	// The url of the org that this user owns
	OrgURL *string `json:"orgURL,omitempty"`
	// This parameter is used to select the appropriate Product Plan
	PlanName *string `json:"planName,omitempty"`
	// Type of the role
	RoleType *string `json:"roleType,omitempty"`
	// The status of the user.
	Status *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DescribeUserResult DescribeUserResult

// NewDescribeUserResult instantiates a new DescribeUserResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeUserResult(id string) *DescribeUserResult {
	this := DescribeUserResult{}
	this.Id = id
	return &this
}

// NewDescribeUserResultWithDefaults instantiates a new DescribeUserResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeUserResultWithDefaults() *DescribeUserResult {
	this := DescribeUserResult{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *DescribeUserResult) GetAddress() Address {
	if o == nil || IsNil(o.Address) {
		var ret Address
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *DescribeUserResult) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given Address and assigns it to the Address field.
func (o *DescribeUserResult) SetAddress(v Address) {
	o.Address = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DescribeUserResult) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DescribeUserResult) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *DescribeUserResult) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *DescribeUserResult) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *DescribeUserResult) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *DescribeUserResult) SetEmail(v string) {
	o.Email = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DescribeUserResult) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DescribeUserResult) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DescribeUserResult) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value
func (o *DescribeUserResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DescribeUserResult) SetId(v string) {
	o.Id = v
}

// GetLastModifiedAt returns the LastModifiedAt field value if set, zero value otherwise.
func (o *DescribeUserResult) GetLastModifiedAt() string {
	if o == nil || IsNil(o.LastModifiedAt) {
		var ret string
		return ret
	}
	return *o.LastModifiedAt
}

// GetLastModifiedAtOk returns a tuple with the LastModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetLastModifiedAtOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifiedAt) {
		return nil, false
	}
	return o.LastModifiedAt, true
}

// HasLastModifiedAt returns a boolean if a field has been set.
func (o *DescribeUserResult) HasLastModifiedAt() bool {
	if o != nil && !IsNil(o.LastModifiedAt) {
		return true
	}

	return false
}

// SetLastModifiedAt gets a reference to the given string and assigns it to the LastModifiedAt field.
func (o *DescribeUserResult) SetLastModifiedAt(v string) {
	o.LastModifiedAt = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DescribeUserResult) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DescribeUserResult) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DescribeUserResult) SetName(v string) {
	o.Name = &v
}

// GetOrgCookiePolicy returns the OrgCookiePolicy field value if set, zero value otherwise.
func (o *DescribeUserResult) GetOrgCookiePolicy() string {
	if o == nil || IsNil(o.OrgCookiePolicy) {
		var ret string
		return ret
	}
	return *o.OrgCookiePolicy
}

// GetOrgCookiePolicyOk returns a tuple with the OrgCookiePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetOrgCookiePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.OrgCookiePolicy) {
		return nil, false
	}
	return o.OrgCookiePolicy, true
}

// HasOrgCookiePolicy returns a boolean if a field has been set.
func (o *DescribeUserResult) HasOrgCookiePolicy() bool {
	if o != nil && !IsNil(o.OrgCookiePolicy) {
		return true
	}

	return false
}

// SetOrgCookiePolicy gets a reference to the given string and assigns it to the OrgCookiePolicy field.
func (o *DescribeUserResult) SetOrgCookiePolicy(v string) {
	o.OrgCookiePolicy = &v
}

// GetOrgDescription returns the OrgDescription field value if set, zero value otherwise.
func (o *DescribeUserResult) GetOrgDescription() string {
	if o == nil || IsNil(o.OrgDescription) {
		var ret string
		return ret
	}
	return *o.OrgDescription
}

// GetOrgDescriptionOk returns a tuple with the OrgDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetOrgDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.OrgDescription) {
		return nil, false
	}
	return o.OrgDescription, true
}

// HasOrgDescription returns a boolean if a field has been set.
func (o *DescribeUserResult) HasOrgDescription() bool {
	if o != nil && !IsNil(o.OrgDescription) {
		return true
	}

	return false
}

// SetOrgDescription gets a reference to the given string and assigns it to the OrgDescription field.
func (o *DescribeUserResult) SetOrgDescription(v string) {
	o.OrgDescription = &v
}

// GetOrgFavIconURL returns the OrgFavIconURL field value if set, zero value otherwise.
func (o *DescribeUserResult) GetOrgFavIconURL() string {
	if o == nil || IsNil(o.OrgFavIconURL) {
		var ret string
		return ret
	}
	return *o.OrgFavIconURL
}

// GetOrgFavIconURLOk returns a tuple with the OrgFavIconURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetOrgFavIconURLOk() (*string, bool) {
	if o == nil || IsNil(o.OrgFavIconURL) {
		return nil, false
	}
	return o.OrgFavIconURL, true
}

// HasOrgFavIconURL returns a boolean if a field has been set.
func (o *DescribeUserResult) HasOrgFavIconURL() bool {
	if o != nil && !IsNil(o.OrgFavIconURL) {
		return true
	}

	return false
}

// SetOrgFavIconURL gets a reference to the given string and assigns it to the OrgFavIconURL field.
func (o *DescribeUserResult) SetOrgFavIconURL(v string) {
	o.OrgFavIconURL = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *DescribeUserResult) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *DescribeUserResult) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *DescribeUserResult) SetOrgId(v string) {
	o.OrgId = &v
}

// GetOrgLogoURL returns the OrgLogoURL field value if set, zero value otherwise.
func (o *DescribeUserResult) GetOrgLogoURL() string {
	if o == nil || IsNil(o.OrgLogoURL) {
		var ret string
		return ret
	}
	return *o.OrgLogoURL
}

// GetOrgLogoURLOk returns a tuple with the OrgLogoURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetOrgLogoURLOk() (*string, bool) {
	if o == nil || IsNil(o.OrgLogoURL) {
		return nil, false
	}
	return o.OrgLogoURL, true
}

// HasOrgLogoURL returns a boolean if a field has been set.
func (o *DescribeUserResult) HasOrgLogoURL() bool {
	if o != nil && !IsNil(o.OrgLogoURL) {
		return true
	}

	return false
}

// SetOrgLogoURL gets a reference to the given string and assigns it to the OrgLogoURL field.
func (o *DescribeUserResult) SetOrgLogoURL(v string) {
	o.OrgLogoURL = &v
}

// GetOrgName returns the OrgName field value if set, zero value otherwise.
func (o *DescribeUserResult) GetOrgName() string {
	if o == nil || IsNil(o.OrgName) {
		var ret string
		return ret
	}
	return *o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetOrgNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgName) {
		return nil, false
	}
	return o.OrgName, true
}

// HasOrgName returns a boolean if a field has been set.
func (o *DescribeUserResult) HasOrgName() bool {
	if o != nil && !IsNil(o.OrgName) {
		return true
	}

	return false
}

// SetOrgName gets a reference to the given string and assigns it to the OrgName field.
func (o *DescribeUserResult) SetOrgName(v string) {
	o.OrgName = &v
}

// GetOrgPrivacyPolicy returns the OrgPrivacyPolicy field value if set, zero value otherwise.
func (o *DescribeUserResult) GetOrgPrivacyPolicy() string {
	if o == nil || IsNil(o.OrgPrivacyPolicy) {
		var ret string
		return ret
	}
	return *o.OrgPrivacyPolicy
}

// GetOrgPrivacyPolicyOk returns a tuple with the OrgPrivacyPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetOrgPrivacyPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.OrgPrivacyPolicy) {
		return nil, false
	}
	return o.OrgPrivacyPolicy, true
}

// HasOrgPrivacyPolicy returns a boolean if a field has been set.
func (o *DescribeUserResult) HasOrgPrivacyPolicy() bool {
	if o != nil && !IsNil(o.OrgPrivacyPolicy) {
		return true
	}

	return false
}

// SetOrgPrivacyPolicy gets a reference to the given string and assigns it to the OrgPrivacyPolicy field.
func (o *DescribeUserResult) SetOrgPrivacyPolicy(v string) {
	o.OrgPrivacyPolicy = &v
}

// GetOrgSupportEmail returns the OrgSupportEmail field value if set, zero value otherwise.
func (o *DescribeUserResult) GetOrgSupportEmail() string {
	if o == nil || IsNil(o.OrgSupportEmail) {
		var ret string
		return ret
	}
	return *o.OrgSupportEmail
}

// GetOrgSupportEmailOk returns a tuple with the OrgSupportEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetOrgSupportEmailOk() (*string, bool) {
	if o == nil || IsNil(o.OrgSupportEmail) {
		return nil, false
	}
	return o.OrgSupportEmail, true
}

// HasOrgSupportEmail returns a boolean if a field has been set.
func (o *DescribeUserResult) HasOrgSupportEmail() bool {
	if o != nil && !IsNil(o.OrgSupportEmail) {
		return true
	}

	return false
}

// SetOrgSupportEmail gets a reference to the given string and assigns it to the OrgSupportEmail field.
func (o *DescribeUserResult) SetOrgSupportEmail(v string) {
	o.OrgSupportEmail = &v
}

// GetOrgTermsOfUse returns the OrgTermsOfUse field value if set, zero value otherwise.
func (o *DescribeUserResult) GetOrgTermsOfUse() string {
	if o == nil || IsNil(o.OrgTermsOfUse) {
		var ret string
		return ret
	}
	return *o.OrgTermsOfUse
}

// GetOrgTermsOfUseOk returns a tuple with the OrgTermsOfUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetOrgTermsOfUseOk() (*string, bool) {
	if o == nil || IsNil(o.OrgTermsOfUse) {
		return nil, false
	}
	return o.OrgTermsOfUse, true
}

// HasOrgTermsOfUse returns a boolean if a field has been set.
func (o *DescribeUserResult) HasOrgTermsOfUse() bool {
	if o != nil && !IsNil(o.OrgTermsOfUse) {
		return true
	}

	return false
}

// SetOrgTermsOfUse gets a reference to the given string and assigns it to the OrgTermsOfUse field.
func (o *DescribeUserResult) SetOrgTermsOfUse(v string) {
	o.OrgTermsOfUse = &v
}

// GetOrgURL returns the OrgURL field value if set, zero value otherwise.
func (o *DescribeUserResult) GetOrgURL() string {
	if o == nil || IsNil(o.OrgURL) {
		var ret string
		return ret
	}
	return *o.OrgURL
}

// GetOrgURLOk returns a tuple with the OrgURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetOrgURLOk() (*string, bool) {
	if o == nil || IsNil(o.OrgURL) {
		return nil, false
	}
	return o.OrgURL, true
}

// HasOrgURL returns a boolean if a field has been set.
func (o *DescribeUserResult) HasOrgURL() bool {
	if o != nil && !IsNil(o.OrgURL) {
		return true
	}

	return false
}

// SetOrgURL gets a reference to the given string and assigns it to the OrgURL field.
func (o *DescribeUserResult) SetOrgURL(v string) {
	o.OrgURL = &v
}

// GetPlanName returns the PlanName field value if set, zero value otherwise.
func (o *DescribeUserResult) GetPlanName() string {
	if o == nil || IsNil(o.PlanName) {
		var ret string
		return ret
	}
	return *o.PlanName
}

// GetPlanNameOk returns a tuple with the PlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetPlanNameOk() (*string, bool) {
	if o == nil || IsNil(o.PlanName) {
		return nil, false
	}
	return o.PlanName, true
}

// HasPlanName returns a boolean if a field has been set.
func (o *DescribeUserResult) HasPlanName() bool {
	if o != nil && !IsNil(o.PlanName) {
		return true
	}

	return false
}

// SetPlanName gets a reference to the given string and assigns it to the PlanName field.
func (o *DescribeUserResult) SetPlanName(v string) {
	o.PlanName = &v
}

// GetRoleType returns the RoleType field value if set, zero value otherwise.
func (o *DescribeUserResult) GetRoleType() string {
	if o == nil || IsNil(o.RoleType) {
		var ret string
		return ret
	}
	return *o.RoleType
}

// GetRoleTypeOk returns a tuple with the RoleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetRoleTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoleType) {
		return nil, false
	}
	return o.RoleType, true
}

// HasRoleType returns a boolean if a field has been set.
func (o *DescribeUserResult) HasRoleType() bool {
	if o != nil && !IsNil(o.RoleType) {
		return true
	}

	return false
}

// SetRoleType gets a reference to the given string and assigns it to the RoleType field.
func (o *DescribeUserResult) SetRoleType(v string) {
	o.RoleType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DescribeUserResult) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserResult) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DescribeUserResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DescribeUserResult) SetStatus(v string) {
	o.Status = &v
}

func (o DescribeUserResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeUserResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.LastModifiedAt) {
		toSerialize["lastModifiedAt"] = o.LastModifiedAt
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrgCookiePolicy) {
		toSerialize["orgCookiePolicy"] = o.OrgCookiePolicy
	}
	if !IsNil(o.OrgDescription) {
		toSerialize["orgDescription"] = o.OrgDescription
	}
	if !IsNil(o.OrgFavIconURL) {
		toSerialize["orgFavIconURL"] = o.OrgFavIconURL
	}
	if !IsNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	if !IsNil(o.OrgLogoURL) {
		toSerialize["orgLogoURL"] = o.OrgLogoURL
	}
	if !IsNil(o.OrgName) {
		toSerialize["orgName"] = o.OrgName
	}
	if !IsNil(o.OrgPrivacyPolicy) {
		toSerialize["orgPrivacyPolicy"] = o.OrgPrivacyPolicy
	}
	if !IsNil(o.OrgSupportEmail) {
		toSerialize["orgSupportEmail"] = o.OrgSupportEmail
	}
	if !IsNil(o.OrgTermsOfUse) {
		toSerialize["orgTermsOfUse"] = o.OrgTermsOfUse
	}
	if !IsNil(o.OrgURL) {
		toSerialize["orgURL"] = o.OrgURL
	}
	if !IsNil(o.PlanName) {
		toSerialize["planName"] = o.PlanName
	}
	if !IsNil(o.RoleType) {
		toSerialize["roleType"] = o.RoleType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DescribeUserResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeUserResult := _DescribeUserResult{}

	err = json.Unmarshal(data, &varDescribeUserResult)

	if err != nil {
		return err
	}

	*o = DescribeUserResult(varDescribeUserResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "email")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "id")
		delete(additionalProperties, "lastModifiedAt")
		delete(additionalProperties, "name")
		delete(additionalProperties, "orgCookiePolicy")
		delete(additionalProperties, "orgDescription")
		delete(additionalProperties, "orgFavIconURL")
		delete(additionalProperties, "orgId")
		delete(additionalProperties, "orgLogoURL")
		delete(additionalProperties, "orgName")
		delete(additionalProperties, "orgPrivacyPolicy")
		delete(additionalProperties, "orgSupportEmail")
		delete(additionalProperties, "orgTermsOfUse")
		delete(additionalProperties, "orgURL")
		delete(additionalProperties, "planName")
		delete(additionalProperties, "roleType")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDescribeUserResult struct {
	value *DescribeUserResult
	isSet bool
}

func (v NullableDescribeUserResult) Get() *DescribeUserResult {
	return v.value
}

func (v *NullableDescribeUserResult) Set(val *DescribeUserResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeUserResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeUserResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeUserResult(val *DescribeUserResult) *NullableDescribeUserResult {
	return &NullableDescribeUserResult{value: val, isSet: true}
}

func (v NullableDescribeUserResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeUserResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


