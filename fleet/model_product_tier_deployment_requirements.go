/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the ProductTierDeploymentRequirements type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductTierDeploymentRequirements{}

// ProductTierDeploymentRequirements struct for ProductTierDeploymentRequirements
type ProductTierDeploymentRequirements struct {
	// Minimum Kubernetes version for OnPrem deployment
	MinimumK8sVersion *string `json:"minimumK8sVersion,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProductTierDeploymentRequirements ProductTierDeploymentRequirements

// NewProductTierDeploymentRequirements instantiates a new ProductTierDeploymentRequirements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductTierDeploymentRequirements() *ProductTierDeploymentRequirements {
	this := ProductTierDeploymentRequirements{}
	return &this
}

// NewProductTierDeploymentRequirementsWithDefaults instantiates a new ProductTierDeploymentRequirements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductTierDeploymentRequirementsWithDefaults() *ProductTierDeploymentRequirements {
	this := ProductTierDeploymentRequirements{}
	return &this
}

// GetMinimumK8sVersion returns the MinimumK8sVersion field value if set, zero value otherwise.
func (o *ProductTierDeploymentRequirements) GetMinimumK8sVersion() string {
	if o == nil || IsNil(o.MinimumK8sVersion) {
		var ret string
		return ret
	}
	return *o.MinimumK8sVersion
}

// GetMinimumK8sVersionOk returns a tuple with the MinimumK8sVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductTierDeploymentRequirements) GetMinimumK8sVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumK8sVersion) {
		return nil, false
	}
	return o.MinimumK8sVersion, true
}

// HasMinimumK8sVersion returns a boolean if a field has been set.
func (o *ProductTierDeploymentRequirements) HasMinimumK8sVersion() bool {
	if o != nil && !IsNil(o.MinimumK8sVersion) {
		return true
	}

	return false
}

// SetMinimumK8sVersion gets a reference to the given string and assigns it to the MinimumK8sVersion field.
func (o *ProductTierDeploymentRequirements) SetMinimumK8sVersion(v string) {
	o.MinimumK8sVersion = &v
}

func (o ProductTierDeploymentRequirements) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductTierDeploymentRequirements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinimumK8sVersion) {
		toSerialize["minimumK8sVersion"] = o.MinimumK8sVersion
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProductTierDeploymentRequirements) UnmarshalJSON(data []byte) (err error) {
	varProductTierDeploymentRequirements := _ProductTierDeploymentRequirements{}

	err = json.Unmarshal(data, &varProductTierDeploymentRequirements)

	if err != nil {
		return err
	}

	*o = ProductTierDeploymentRequirements(varProductTierDeploymentRequirements)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "minimumK8sVersion")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProductTierDeploymentRequirements struct {
	value *ProductTierDeploymentRequirements
	isSet bool
}

func (v NullableProductTierDeploymentRequirements) Get() *ProductTierDeploymentRequirements {
	return v.value
}

func (v *NullableProductTierDeploymentRequirements) Set(val *ProductTierDeploymentRequirements) {
	v.value = val
	v.isSet = true
}

func (v NullableProductTierDeploymentRequirements) IsSet() bool {
	return v.isSet
}

func (v *NullableProductTierDeploymentRequirements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductTierDeploymentRequirements(val *ProductTierDeploymentRequirements) *NullableProductTierDeploymentRequirements {
	return &NullableProductTierDeploymentRequirements{value: val, isSet: true}
}

func (v NullableProductTierDeploymentRequirements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductTierDeploymentRequirements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


