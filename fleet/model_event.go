/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Event type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Event{}

// Event struct for Event
type Event struct {
	// Body of the event, including payload
	Body interface{} `json:"body,omitempty"`
	// Response from the notification channel, if applicable
	ChannelResponse interface{} `json:"channelResponse,omitempty"`
	// ID of a Event
	Id string `json:"id"`
	// Status of the event publication
	PublicationStatus string `json:"publicationStatus"`
	// Timestamp when the event occurred
	Timestamp time.Time `json:"timestamp"`
	AdditionalProperties map[string]interface{}
}

type _Event Event

// NewEvent instantiates a new Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvent(id string, publicationStatus string, timestamp time.Time) *Event {
	this := Event{}
	this.Id = id
	this.PublicationStatus = publicationStatus
	this.Timestamp = timestamp
	return &this
}

// NewEventWithDefaults instantiates a new Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWithDefaults() *Event {
	this := Event{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Event) GetBody() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetBodyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return &o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *Event) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given interface{} and assigns it to the Body field.
func (o *Event) SetBody(v interface{}) {
	o.Body = v
}

// GetChannelResponse returns the ChannelResponse field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Event) GetChannelResponse() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ChannelResponse
}

// GetChannelResponseOk returns a tuple with the ChannelResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetChannelResponseOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ChannelResponse) {
		return nil, false
	}
	return &o.ChannelResponse, true
}

// HasChannelResponse returns a boolean if a field has been set.
func (o *Event) HasChannelResponse() bool {
	if o != nil && !IsNil(o.ChannelResponse) {
		return true
	}

	return false
}

// SetChannelResponse gets a reference to the given interface{} and assigns it to the ChannelResponse field.
func (o *Event) SetChannelResponse(v interface{}) {
	o.ChannelResponse = v
}

// GetId returns the Id field value
func (o *Event) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Event) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Event) SetId(v string) {
	o.Id = v
}

// GetPublicationStatus returns the PublicationStatus field value
func (o *Event) GetPublicationStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicationStatus
}

// GetPublicationStatusOk returns a tuple with the PublicationStatus field value
// and a boolean to check if the value has been set.
func (o *Event) GetPublicationStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicationStatus, true
}

// SetPublicationStatus sets field value
func (o *Event) SetPublicationStatus(v string) {
	o.PublicationStatus = v
}

// GetTimestamp returns the Timestamp field value
func (o *Event) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Event) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Event) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o Event) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Event) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.ChannelResponse != nil {
		toSerialize["channelResponse"] = o.ChannelResponse
	}
	toSerialize["id"] = o.Id
	toSerialize["publicationStatus"] = o.PublicationStatus
	toSerialize["timestamp"] = o.Timestamp

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Event) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"publicationStatus",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvent := _Event{}

	err = json.Unmarshal(data, &varEvent)

	if err != nil {
		return err
	}

	*o = Event(varEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "body")
		delete(additionalProperties, "channelResponse")
		delete(additionalProperties, "id")
		delete(additionalProperties, "publicationStatus")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


