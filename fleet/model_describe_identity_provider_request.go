/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the DescribeIdentityProviderRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeIdentityProviderRequest{}

// DescribeIdentityProviderRequest struct for DescribeIdentityProviderRequest
type DescribeIdentityProviderRequest struct {
	// ID of an Identity Provider
	Id string `json:"id"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _DescribeIdentityProviderRequest DescribeIdentityProviderRequest

// NewDescribeIdentityProviderRequest instantiates a new DescribeIdentityProviderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeIdentityProviderRequest(id string, token string) *DescribeIdentityProviderRequest {
	this := DescribeIdentityProviderRequest{}
	this.Id = id
	this.Token = token
	return &this
}

// NewDescribeIdentityProviderRequestWithDefaults instantiates a new DescribeIdentityProviderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeIdentityProviderRequestWithDefaults() *DescribeIdentityProviderRequest {
	this := DescribeIdentityProviderRequest{}
	return &this
}

// GetId returns the Id field value
func (o *DescribeIdentityProviderRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DescribeIdentityProviderRequest) SetId(v string) {
	o.Id = v
}

// GetToken returns the Token field value
func (o *DescribeIdentityProviderRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *DescribeIdentityProviderRequest) SetToken(v string) {
	o.Token = v
}

func (o DescribeIdentityProviderRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeIdentityProviderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DescribeIdentityProviderRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeIdentityProviderRequest := _DescribeIdentityProviderRequest{}

	err = json.Unmarshal(data, &varDescribeIdentityProviderRequest)

	if err != nil {
		return err
	}

	*o = DescribeIdentityProviderRequest(varDescribeIdentityProviderRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDescribeIdentityProviderRequest struct {
	value *DescribeIdentityProviderRequest
	isSet bool
}

func (v NullableDescribeIdentityProviderRequest) Get() *DescribeIdentityProviderRequest {
	return v.value
}

func (v *NullableDescribeIdentityProviderRequest) Set(val *DescribeIdentityProviderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeIdentityProviderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeIdentityProviderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeIdentityProviderRequest(val *DescribeIdentityProviderRequest) *NullableDescribeIdentityProviderRequest {
	return &NullableDescribeIdentityProviderRequest{value: val, isSet: true}
}

func (v NullableDescribeIdentityProviderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeIdentityProviderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


