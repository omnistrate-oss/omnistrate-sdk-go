/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateProductTierRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProductTierRequest{}

// UpdateProductTierRequest struct for UpdateProductTierRequest
type UpdateProductTierRequest struct {
	// Allow creates when payment not configured
	AllowCreatesWhenPaymentNotConfigured *bool `json:"allowCreatesWhenPaymentNotConfigured,omitempty"`
	// Auto approve subscription or not
	AutoApproveSubscription *bool `json:"autoApproveSubscription,omitempty"`
	// The AWS regions that this product tier is available on
	AwsRegions []string `json:"awsRegions,omitempty"`
	// The Azure regions that this product tier is available on
	AzureRegions []string `json:"azureRegions,omitempty"`
	// A brief description of the product tier
	Description *string `json:"description,omitempty"`
	// Documentation
	Documentation *string `json:"documentation,omitempty"`
	// Export usage metering data
	ExportUsageMetering *bool `json:"exportUsageMetering,omitempty"`
	// Export usage metering data configuration
	ExportUsageMeteringConfig map[string]interface{} `json:"exportUsageMeteringConfig,omitempty"`
	// The GCP regions that this product tier is available on
	GcpRegions []string `json:"gcpRegions,omitempty"`
	// ID of a Product Tier
	Id string `json:"id"`
	// Update the product tier's state as enabled/disabled. Enabling the product tier will let end-customers subscribe and use the service plan.
	IsDisabled *bool `json:"isDisabled,omitempty"`
	// Maximum number of instances
	MaxNumberOfInstances *int64 `json:"maxNumberOfInstances,omitempty"`
	// Name of the product tier
	Name *string `json:"name,omitempty"`
	// A brief description for the end user of the product tier
	PlanDescription *string `json:"planDescription,omitempty"`
	// Price per unit.
	PricePerUnit map[string]interface{} `json:"pricePerUnit,omitempty"`
	// Pricing
	Pricing interface{} `json:"pricing,omitempty"`
	// ID of a Service
	ServiceId string `json:"serviceId"`
	// Support
	Support *string `json:"support,omitempty"`
	// ProductTierType is the type of tier for a product
	TierType *string `json:"tierType,omitempty"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _UpdateProductTierRequest UpdateProductTierRequest

// NewUpdateProductTierRequest instantiates a new UpdateProductTierRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProductTierRequest(id string, serviceId string, token string) *UpdateProductTierRequest {
	this := UpdateProductTierRequest{}
	this.Id = id
	this.ServiceId = serviceId
	this.Token = token
	return &this
}

// NewUpdateProductTierRequestWithDefaults instantiates a new UpdateProductTierRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProductTierRequestWithDefaults() *UpdateProductTierRequest {
	this := UpdateProductTierRequest{}
	return &this
}

// GetAllowCreatesWhenPaymentNotConfigured returns the AllowCreatesWhenPaymentNotConfigured field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetAllowCreatesWhenPaymentNotConfigured() bool {
	if o == nil || IsNil(o.AllowCreatesWhenPaymentNotConfigured) {
		var ret bool
		return ret
	}
	return *o.AllowCreatesWhenPaymentNotConfigured
}

// GetAllowCreatesWhenPaymentNotConfiguredOk returns a tuple with the AllowCreatesWhenPaymentNotConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetAllowCreatesWhenPaymentNotConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowCreatesWhenPaymentNotConfigured) {
		return nil, false
	}
	return o.AllowCreatesWhenPaymentNotConfigured, true
}

// HasAllowCreatesWhenPaymentNotConfigured returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasAllowCreatesWhenPaymentNotConfigured() bool {
	if o != nil && !IsNil(o.AllowCreatesWhenPaymentNotConfigured) {
		return true
	}

	return false
}

// SetAllowCreatesWhenPaymentNotConfigured gets a reference to the given bool and assigns it to the AllowCreatesWhenPaymentNotConfigured field.
func (o *UpdateProductTierRequest) SetAllowCreatesWhenPaymentNotConfigured(v bool) {
	o.AllowCreatesWhenPaymentNotConfigured = &v
}

// GetAutoApproveSubscription returns the AutoApproveSubscription field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetAutoApproveSubscription() bool {
	if o == nil || IsNil(o.AutoApproveSubscription) {
		var ret bool
		return ret
	}
	return *o.AutoApproveSubscription
}

// GetAutoApproveSubscriptionOk returns a tuple with the AutoApproveSubscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetAutoApproveSubscriptionOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoApproveSubscription) {
		return nil, false
	}
	return o.AutoApproveSubscription, true
}

// HasAutoApproveSubscription returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasAutoApproveSubscription() bool {
	if o != nil && !IsNil(o.AutoApproveSubscription) {
		return true
	}

	return false
}

// SetAutoApproveSubscription gets a reference to the given bool and assigns it to the AutoApproveSubscription field.
func (o *UpdateProductTierRequest) SetAutoApproveSubscription(v bool) {
	o.AutoApproveSubscription = &v
}

// GetAwsRegions returns the AwsRegions field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetAwsRegions() []string {
	if o == nil || IsNil(o.AwsRegions) {
		var ret []string
		return ret
	}
	return o.AwsRegions
}

// GetAwsRegionsOk returns a tuple with the AwsRegions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetAwsRegionsOk() ([]string, bool) {
	if o == nil || IsNil(o.AwsRegions) {
		return nil, false
	}
	return o.AwsRegions, true
}

// HasAwsRegions returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasAwsRegions() bool {
	if o != nil && !IsNil(o.AwsRegions) {
		return true
	}

	return false
}

// SetAwsRegions gets a reference to the given []string and assigns it to the AwsRegions field.
func (o *UpdateProductTierRequest) SetAwsRegions(v []string) {
	o.AwsRegions = v
}

// GetAzureRegions returns the AzureRegions field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetAzureRegions() []string {
	if o == nil || IsNil(o.AzureRegions) {
		var ret []string
		return ret
	}
	return o.AzureRegions
}

// GetAzureRegionsOk returns a tuple with the AzureRegions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetAzureRegionsOk() ([]string, bool) {
	if o == nil || IsNil(o.AzureRegions) {
		return nil, false
	}
	return o.AzureRegions, true
}

// HasAzureRegions returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasAzureRegions() bool {
	if o != nil && !IsNil(o.AzureRegions) {
		return true
	}

	return false
}

// SetAzureRegions gets a reference to the given []string and assigns it to the AzureRegions field.
func (o *UpdateProductTierRequest) SetAzureRegions(v []string) {
	o.AzureRegions = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateProductTierRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetDocumentation() string {
	if o == nil || IsNil(o.Documentation) {
		var ret string
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetDocumentationOk() (*string, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given string and assigns it to the Documentation field.
func (o *UpdateProductTierRequest) SetDocumentation(v string) {
	o.Documentation = &v
}

// GetExportUsageMetering returns the ExportUsageMetering field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetExportUsageMetering() bool {
	if o == nil || IsNil(o.ExportUsageMetering) {
		var ret bool
		return ret
	}
	return *o.ExportUsageMetering
}

// GetExportUsageMeteringOk returns a tuple with the ExportUsageMetering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetExportUsageMeteringOk() (*bool, bool) {
	if o == nil || IsNil(o.ExportUsageMetering) {
		return nil, false
	}
	return o.ExportUsageMetering, true
}

// HasExportUsageMetering returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasExportUsageMetering() bool {
	if o != nil && !IsNil(o.ExportUsageMetering) {
		return true
	}

	return false
}

// SetExportUsageMetering gets a reference to the given bool and assigns it to the ExportUsageMetering field.
func (o *UpdateProductTierRequest) SetExportUsageMetering(v bool) {
	o.ExportUsageMetering = &v
}

// GetExportUsageMeteringConfig returns the ExportUsageMeteringConfig field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetExportUsageMeteringConfig() map[string]interface{} {
	if o == nil || IsNil(o.ExportUsageMeteringConfig) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExportUsageMeteringConfig
}

// GetExportUsageMeteringConfigOk returns a tuple with the ExportUsageMeteringConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetExportUsageMeteringConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExportUsageMeteringConfig) {
		return map[string]interface{}{}, false
	}
	return o.ExportUsageMeteringConfig, true
}

// HasExportUsageMeteringConfig returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasExportUsageMeteringConfig() bool {
	if o != nil && !IsNil(o.ExportUsageMeteringConfig) {
		return true
	}

	return false
}

// SetExportUsageMeteringConfig gets a reference to the given map[string]interface{} and assigns it to the ExportUsageMeteringConfig field.
func (o *UpdateProductTierRequest) SetExportUsageMeteringConfig(v map[string]interface{}) {
	o.ExportUsageMeteringConfig = v
}

// GetGcpRegions returns the GcpRegions field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetGcpRegions() []string {
	if o == nil || IsNil(o.GcpRegions) {
		var ret []string
		return ret
	}
	return o.GcpRegions
}

// GetGcpRegionsOk returns a tuple with the GcpRegions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetGcpRegionsOk() ([]string, bool) {
	if o == nil || IsNil(o.GcpRegions) {
		return nil, false
	}
	return o.GcpRegions, true
}

// HasGcpRegions returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasGcpRegions() bool {
	if o != nil && !IsNil(o.GcpRegions) {
		return true
	}

	return false
}

// SetGcpRegions gets a reference to the given []string and assigns it to the GcpRegions field.
func (o *UpdateProductTierRequest) SetGcpRegions(v []string) {
	o.GcpRegions = v
}

// GetId returns the Id field value
func (o *UpdateProductTierRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateProductTierRequest) SetId(v string) {
	o.Id = v
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetIsDisabled() bool {
	if o == nil || IsNil(o.IsDisabled) {
		var ret bool
		return ret
	}
	return *o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetIsDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDisabled) {
		return nil, false
	}
	return o.IsDisabled, true
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasIsDisabled() bool {
	if o != nil && !IsNil(o.IsDisabled) {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given bool and assigns it to the IsDisabled field.
func (o *UpdateProductTierRequest) SetIsDisabled(v bool) {
	o.IsDisabled = &v
}

// GetMaxNumberOfInstances returns the MaxNumberOfInstances field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetMaxNumberOfInstances() int64 {
	if o == nil || IsNil(o.MaxNumberOfInstances) {
		var ret int64
		return ret
	}
	return *o.MaxNumberOfInstances
}

// GetMaxNumberOfInstancesOk returns a tuple with the MaxNumberOfInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetMaxNumberOfInstancesOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxNumberOfInstances) {
		return nil, false
	}
	return o.MaxNumberOfInstances, true
}

// HasMaxNumberOfInstances returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasMaxNumberOfInstances() bool {
	if o != nil && !IsNil(o.MaxNumberOfInstances) {
		return true
	}

	return false
}

// SetMaxNumberOfInstances gets a reference to the given int64 and assigns it to the MaxNumberOfInstances field.
func (o *UpdateProductTierRequest) SetMaxNumberOfInstances(v int64) {
	o.MaxNumberOfInstances = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateProductTierRequest) SetName(v string) {
	o.Name = &v
}

// GetPlanDescription returns the PlanDescription field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetPlanDescription() string {
	if o == nil || IsNil(o.PlanDescription) {
		var ret string
		return ret
	}
	return *o.PlanDescription
}

// GetPlanDescriptionOk returns a tuple with the PlanDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetPlanDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PlanDescription) {
		return nil, false
	}
	return o.PlanDescription, true
}

// HasPlanDescription returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasPlanDescription() bool {
	if o != nil && !IsNil(o.PlanDescription) {
		return true
	}

	return false
}

// SetPlanDescription gets a reference to the given string and assigns it to the PlanDescription field.
func (o *UpdateProductTierRequest) SetPlanDescription(v string) {
	o.PlanDescription = &v
}

// GetPricePerUnit returns the PricePerUnit field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetPricePerUnit() map[string]interface{} {
	if o == nil || IsNil(o.PricePerUnit) {
		var ret map[string]interface{}
		return ret
	}
	return o.PricePerUnit
}

// GetPricePerUnitOk returns a tuple with the PricePerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetPricePerUnitOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PricePerUnit) {
		return map[string]interface{}{}, false
	}
	return o.PricePerUnit, true
}

// HasPricePerUnit returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasPricePerUnit() bool {
	if o != nil && !IsNil(o.PricePerUnit) {
		return true
	}

	return false
}

// SetPricePerUnit gets a reference to the given map[string]interface{} and assigns it to the PricePerUnit field.
func (o *UpdateProductTierRequest) SetPricePerUnit(v map[string]interface{}) {
	o.PricePerUnit = v
}

// GetPricing returns the Pricing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateProductTierRequest) GetPricing() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Pricing
}

// GetPricingOk returns a tuple with the Pricing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateProductTierRequest) GetPricingOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Pricing) {
		return nil, false
	}
	return &o.Pricing, true
}

// HasPricing returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasPricing() bool {
	if o != nil && !IsNil(o.Pricing) {
		return true
	}

	return false
}

// SetPricing gets a reference to the given interface{} and assigns it to the Pricing field.
func (o *UpdateProductTierRequest) SetPricing(v interface{}) {
	o.Pricing = v
}

// GetServiceId returns the ServiceId field value
func (o *UpdateProductTierRequest) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *UpdateProductTierRequest) SetServiceId(v string) {
	o.ServiceId = v
}

// GetSupport returns the Support field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetSupport() string {
	if o == nil || IsNil(o.Support) {
		var ret string
		return ret
	}
	return *o.Support
}

// GetSupportOk returns a tuple with the Support field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetSupportOk() (*string, bool) {
	if o == nil || IsNil(o.Support) {
		return nil, false
	}
	return o.Support, true
}

// HasSupport returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasSupport() bool {
	if o != nil && !IsNil(o.Support) {
		return true
	}

	return false
}

// SetSupport gets a reference to the given string and assigns it to the Support field.
func (o *UpdateProductTierRequest) SetSupport(v string) {
	o.Support = &v
}

// GetTierType returns the TierType field value if set, zero value otherwise.
func (o *UpdateProductTierRequest) GetTierType() string {
	if o == nil || IsNil(o.TierType) {
		var ret string
		return ret
	}
	return *o.TierType
}

// GetTierTypeOk returns a tuple with the TierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetTierTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TierType) {
		return nil, false
	}
	return o.TierType, true
}

// HasTierType returns a boolean if a field has been set.
func (o *UpdateProductTierRequest) HasTierType() bool {
	if o != nil && !IsNil(o.TierType) {
		return true
	}

	return false
}

// SetTierType gets a reference to the given string and assigns it to the TierType field.
func (o *UpdateProductTierRequest) SetTierType(v string) {
	o.TierType = &v
}

// GetToken returns the Token field value
func (o *UpdateProductTierRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *UpdateProductTierRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *UpdateProductTierRequest) SetToken(v string) {
	o.Token = v
}

func (o UpdateProductTierRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProductTierRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowCreatesWhenPaymentNotConfigured) {
		toSerialize["allowCreatesWhenPaymentNotConfigured"] = o.AllowCreatesWhenPaymentNotConfigured
	}
	if !IsNil(o.AutoApproveSubscription) {
		toSerialize["autoApproveSubscription"] = o.AutoApproveSubscription
	}
	if !IsNil(o.AwsRegions) {
		toSerialize["awsRegions"] = o.AwsRegions
	}
	if !IsNil(o.AzureRegions) {
		toSerialize["azureRegions"] = o.AzureRegions
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	if !IsNil(o.ExportUsageMetering) {
		toSerialize["exportUsageMetering"] = o.ExportUsageMetering
	}
	if !IsNil(o.ExportUsageMeteringConfig) {
		toSerialize["exportUsageMeteringConfig"] = o.ExportUsageMeteringConfig
	}
	if !IsNil(o.GcpRegions) {
		toSerialize["gcpRegions"] = o.GcpRegions
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.IsDisabled) {
		toSerialize["isDisabled"] = o.IsDisabled
	}
	if !IsNil(o.MaxNumberOfInstances) {
		toSerialize["maxNumberOfInstances"] = o.MaxNumberOfInstances
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PlanDescription) {
		toSerialize["planDescription"] = o.PlanDescription
	}
	if !IsNil(o.PricePerUnit) {
		toSerialize["pricePerUnit"] = o.PricePerUnit
	}
	if o.Pricing != nil {
		toSerialize["pricing"] = o.Pricing
	}
	toSerialize["serviceId"] = o.ServiceId
	if !IsNil(o.Support) {
		toSerialize["support"] = o.Support
	}
	if !IsNil(o.TierType) {
		toSerialize["tierType"] = o.TierType
	}
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateProductTierRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"serviceId",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateProductTierRequest := _UpdateProductTierRequest{}

	err = json.Unmarshal(data, &varUpdateProductTierRequest)

	if err != nil {
		return err
	}

	*o = UpdateProductTierRequest(varUpdateProductTierRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowCreatesWhenPaymentNotConfigured")
		delete(additionalProperties, "autoApproveSubscription")
		delete(additionalProperties, "awsRegions")
		delete(additionalProperties, "azureRegions")
		delete(additionalProperties, "description")
		delete(additionalProperties, "documentation")
		delete(additionalProperties, "exportUsageMetering")
		delete(additionalProperties, "exportUsageMeteringConfig")
		delete(additionalProperties, "gcpRegions")
		delete(additionalProperties, "id")
		delete(additionalProperties, "isDisabled")
		delete(additionalProperties, "maxNumberOfInstances")
		delete(additionalProperties, "name")
		delete(additionalProperties, "planDescription")
		delete(additionalProperties, "pricePerUnit")
		delete(additionalProperties, "pricing")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "support")
		delete(additionalProperties, "tierType")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateProductTierRequest struct {
	value *UpdateProductTierRequest
	isSet bool
}

func (v NullableUpdateProductTierRequest) Get() *UpdateProductTierRequest {
	return v.value
}

func (v *NullableUpdateProductTierRequest) Set(val *UpdateProductTierRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProductTierRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProductTierRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProductTierRequest(val *UpdateProductTierRequest) *NullableUpdateProductTierRequest {
	return &NullableUpdateProductTierRequest{value: val, isSet: true}
}

func (v NullableUpdateProductTierRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProductTierRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


