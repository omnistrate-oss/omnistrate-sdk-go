/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateUpgradePathRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUpgradePathRequest{}

// CreateUpgradePathRequest struct for CreateUpgradePathRequest
type CreateUpgradePathRequest struct {
	// Whether to notify the end customer about the upgrade progress.
	NotifyCustomer *bool `json:"notifyCustomer,omitempty"`
	// ID of a Product Tier
	ProductTierId string `json:"productTierId"`
	// The future date when the upgrade is planned to be executed. Empty for immediate upgrade.
	ScheduledDate *string `json:"scheduledDate,omitempty"`
	// ID of a Service
	ServiceId string `json:"serviceId"`
	// The source version of the upgrade path.
	SourceVersion string `json:"sourceVersion"`
	// The target version of the upgrade path.
	TargetVersion string `json:"targetVersion"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	// The filter to use to choose the instances to upgrade.
	UpgradeFilters map[string]interface{} `json:"upgradeFilters"`
	AdditionalProperties map[string]interface{}
}

type _CreateUpgradePathRequest CreateUpgradePathRequest

// NewCreateUpgradePathRequest instantiates a new CreateUpgradePathRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUpgradePathRequest(productTierId string, serviceId string, sourceVersion string, targetVersion string, token string, upgradeFilters map[string]interface{}) *CreateUpgradePathRequest {
	this := CreateUpgradePathRequest{}
	this.ProductTierId = productTierId
	this.ServiceId = serviceId
	this.SourceVersion = sourceVersion
	this.TargetVersion = targetVersion
	this.Token = token
	this.UpgradeFilters = upgradeFilters
	return &this
}

// NewCreateUpgradePathRequestWithDefaults instantiates a new CreateUpgradePathRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUpgradePathRequestWithDefaults() *CreateUpgradePathRequest {
	this := CreateUpgradePathRequest{}
	return &this
}

// GetNotifyCustomer returns the NotifyCustomer field value if set, zero value otherwise.
func (o *CreateUpgradePathRequest) GetNotifyCustomer() bool {
	if o == nil || IsNil(o.NotifyCustomer) {
		var ret bool
		return ret
	}
	return *o.NotifyCustomer
}

// GetNotifyCustomerOk returns a tuple with the NotifyCustomer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpgradePathRequest) GetNotifyCustomerOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyCustomer) {
		return nil, false
	}
	return o.NotifyCustomer, true
}

// HasNotifyCustomer returns a boolean if a field has been set.
func (o *CreateUpgradePathRequest) HasNotifyCustomer() bool {
	if o != nil && !IsNil(o.NotifyCustomer) {
		return true
	}

	return false
}

// SetNotifyCustomer gets a reference to the given bool and assigns it to the NotifyCustomer field.
func (o *CreateUpgradePathRequest) SetNotifyCustomer(v bool) {
	o.NotifyCustomer = &v
}

// GetProductTierId returns the ProductTierId field value
func (o *CreateUpgradePathRequest) GetProductTierId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value
// and a boolean to check if the value has been set.
func (o *CreateUpgradePathRequest) GetProductTierIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTierId, true
}

// SetProductTierId sets field value
func (o *CreateUpgradePathRequest) SetProductTierId(v string) {
	o.ProductTierId = v
}

// GetScheduledDate returns the ScheduledDate field value if set, zero value otherwise.
func (o *CreateUpgradePathRequest) GetScheduledDate() string {
	if o == nil || IsNil(o.ScheduledDate) {
		var ret string
		return ret
	}
	return *o.ScheduledDate
}

// GetScheduledDateOk returns a tuple with the ScheduledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpgradePathRequest) GetScheduledDateOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledDate) {
		return nil, false
	}
	return o.ScheduledDate, true
}

// HasScheduledDate returns a boolean if a field has been set.
func (o *CreateUpgradePathRequest) HasScheduledDate() bool {
	if o != nil && !IsNil(o.ScheduledDate) {
		return true
	}

	return false
}

// SetScheduledDate gets a reference to the given string and assigns it to the ScheduledDate field.
func (o *CreateUpgradePathRequest) SetScheduledDate(v string) {
	o.ScheduledDate = &v
}

// GetServiceId returns the ServiceId field value
func (o *CreateUpgradePathRequest) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *CreateUpgradePathRequest) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *CreateUpgradePathRequest) SetServiceId(v string) {
	o.ServiceId = v
}

// GetSourceVersion returns the SourceVersion field value
func (o *CreateUpgradePathRequest) GetSourceVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceVersion
}

// GetSourceVersionOk returns a tuple with the SourceVersion field value
// and a boolean to check if the value has been set.
func (o *CreateUpgradePathRequest) GetSourceVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceVersion, true
}

// SetSourceVersion sets field value
func (o *CreateUpgradePathRequest) SetSourceVersion(v string) {
	o.SourceVersion = v
}

// GetTargetVersion returns the TargetVersion field value
func (o *CreateUpgradePathRequest) GetTargetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetVersion
}

// GetTargetVersionOk returns a tuple with the TargetVersion field value
// and a boolean to check if the value has been set.
func (o *CreateUpgradePathRequest) GetTargetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetVersion, true
}

// SetTargetVersion sets field value
func (o *CreateUpgradePathRequest) SetTargetVersion(v string) {
	o.TargetVersion = v
}

// GetToken returns the Token field value
func (o *CreateUpgradePathRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *CreateUpgradePathRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *CreateUpgradePathRequest) SetToken(v string) {
	o.Token = v
}

// GetUpgradeFilters returns the UpgradeFilters field value
func (o *CreateUpgradePathRequest) GetUpgradeFilters() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.UpgradeFilters
}

// GetUpgradeFiltersOk returns a tuple with the UpgradeFilters field value
// and a boolean to check if the value has been set.
func (o *CreateUpgradePathRequest) GetUpgradeFiltersOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.UpgradeFilters, true
}

// SetUpgradeFilters sets field value
func (o *CreateUpgradePathRequest) SetUpgradeFilters(v map[string]interface{}) {
	o.UpgradeFilters = v
}

func (o CreateUpgradePathRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUpgradePathRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotifyCustomer) {
		toSerialize["notifyCustomer"] = o.NotifyCustomer
	}
	toSerialize["productTierId"] = o.ProductTierId
	if !IsNil(o.ScheduledDate) {
		toSerialize["scheduledDate"] = o.ScheduledDate
	}
	toSerialize["serviceId"] = o.ServiceId
	toSerialize["sourceVersion"] = o.SourceVersion
	toSerialize["targetVersion"] = o.TargetVersion
	toSerialize["token"] = o.Token
	toSerialize["upgradeFilters"] = o.UpgradeFilters

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateUpgradePathRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"productTierId",
		"serviceId",
		"sourceVersion",
		"targetVersion",
		"token",
		"upgradeFilters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUpgradePathRequest := _CreateUpgradePathRequest{}

	err = json.Unmarshal(data, &varCreateUpgradePathRequest)

	if err != nil {
		return err
	}

	*o = CreateUpgradePathRequest(varCreateUpgradePathRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "notifyCustomer")
		delete(additionalProperties, "productTierId")
		delete(additionalProperties, "scheduledDate")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "sourceVersion")
		delete(additionalProperties, "targetVersion")
		delete(additionalProperties, "token")
		delete(additionalProperties, "upgradeFilters")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateUpgradePathRequest struct {
	value *CreateUpgradePathRequest
	isSet bool
}

func (v NullableCreateUpgradePathRequest) Get() *CreateUpgradePathRequest {
	return v.value
}

func (v *NullableCreateUpgradePathRequest) Set(val *CreateUpgradePathRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUpgradePathRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUpgradePathRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUpgradePathRequest(val *CreateUpgradePathRequest) *NullableCreateUpgradePathRequest {
	return &NullableCreateUpgradePathRequest{value: val, isSet: true}
}

func (v NullableCreateUpgradePathRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUpgradePathRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


