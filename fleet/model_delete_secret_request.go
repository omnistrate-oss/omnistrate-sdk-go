/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the DeleteSecretRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteSecretRequest{}

// DeleteSecretRequest struct for DeleteSecretRequest
type DeleteSecretRequest struct {
	// The type of service environment
	EnvironmentType string `json:"environmentType"`
	// Name of the secret
	Name string `json:"name"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _DeleteSecretRequest DeleteSecretRequest

// NewDeleteSecretRequest instantiates a new DeleteSecretRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteSecretRequest(environmentType string, name string, token string) *DeleteSecretRequest {
	this := DeleteSecretRequest{}
	this.EnvironmentType = environmentType
	this.Name = name
	this.Token = token
	return &this
}

// NewDeleteSecretRequestWithDefaults instantiates a new DeleteSecretRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteSecretRequestWithDefaults() *DeleteSecretRequest {
	this := DeleteSecretRequest{}
	return &this
}

// GetEnvironmentType returns the EnvironmentType field value
func (o *DeleteSecretRequest) GetEnvironmentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentType
}

// GetEnvironmentTypeOk returns a tuple with the EnvironmentType field value
// and a boolean to check if the value has been set.
func (o *DeleteSecretRequest) GetEnvironmentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentType, true
}

// SetEnvironmentType sets field value
func (o *DeleteSecretRequest) SetEnvironmentType(v string) {
	o.EnvironmentType = v
}

// GetName returns the Name field value
func (o *DeleteSecretRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeleteSecretRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeleteSecretRequest) SetName(v string) {
	o.Name = v
}

// GetToken returns the Token field value
func (o *DeleteSecretRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *DeleteSecretRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *DeleteSecretRequest) SetToken(v string) {
	o.Token = v
}

func (o DeleteSecretRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteSecretRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["environmentType"] = o.EnvironmentType
	toSerialize["name"] = o.Name
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeleteSecretRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environmentType",
		"name",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteSecretRequest := _DeleteSecretRequest{}

	err = json.Unmarshal(data, &varDeleteSecretRequest)

	if err != nil {
		return err
	}

	*o = DeleteSecretRequest(varDeleteSecretRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "environmentType")
		delete(additionalProperties, "name")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeleteSecretRequest struct {
	value *DeleteSecretRequest
	isSet bool
}

func (v NullableDeleteSecretRequest) Get() *DeleteSecretRequest {
	return v.value
}

func (v *NullableDeleteSecretRequest) Set(val *DeleteSecretRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteSecretRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteSecretRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteSecretRequest(val *DeleteSecretRequest) *NullableDeleteSecretRequest {
	return &NullableDeleteSecretRequest{value: val, isSet: true}
}

func (v NullableDeleteSecretRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteSecretRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


