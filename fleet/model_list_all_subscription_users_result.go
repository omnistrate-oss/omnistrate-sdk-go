/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the ListAllSubscriptionUsersResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListAllSubscriptionUsersResult{}

// ListAllSubscriptionUsersResult struct for ListAllSubscriptionUsersResult
type ListAllSubscriptionUsersResult struct {
	// The users associated with the corresponding subscription
	SubscriptionUsers []SubscriptionUsers `json:"subscriptionUsers"`
	AdditionalProperties map[string]interface{}
}

type _ListAllSubscriptionUsersResult ListAllSubscriptionUsersResult

// NewListAllSubscriptionUsersResult instantiates a new ListAllSubscriptionUsersResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListAllSubscriptionUsersResult(subscriptionUsers []SubscriptionUsers) *ListAllSubscriptionUsersResult {
	this := ListAllSubscriptionUsersResult{}
	this.SubscriptionUsers = subscriptionUsers
	return &this
}

// NewListAllSubscriptionUsersResultWithDefaults instantiates a new ListAllSubscriptionUsersResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListAllSubscriptionUsersResultWithDefaults() *ListAllSubscriptionUsersResult {
	this := ListAllSubscriptionUsersResult{}
	return &this
}

// GetSubscriptionUsers returns the SubscriptionUsers field value
func (o *ListAllSubscriptionUsersResult) GetSubscriptionUsers() []SubscriptionUsers {
	if o == nil {
		var ret []SubscriptionUsers
		return ret
	}

	return o.SubscriptionUsers
}

// GetSubscriptionUsersOk returns a tuple with the SubscriptionUsers field value
// and a boolean to check if the value has been set.
func (o *ListAllSubscriptionUsersResult) GetSubscriptionUsersOk() ([]SubscriptionUsers, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubscriptionUsers, true
}

// SetSubscriptionUsers sets field value
func (o *ListAllSubscriptionUsersResult) SetSubscriptionUsers(v []SubscriptionUsers) {
	o.SubscriptionUsers = v
}

func (o ListAllSubscriptionUsersResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListAllSubscriptionUsersResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriptionUsers"] = o.SubscriptionUsers

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListAllSubscriptionUsersResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscriptionUsers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListAllSubscriptionUsersResult := _ListAllSubscriptionUsersResult{}

	err = json.Unmarshal(data, &varListAllSubscriptionUsersResult)

	if err != nil {
		return err
	}

	*o = ListAllSubscriptionUsersResult(varListAllSubscriptionUsersResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subscriptionUsers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListAllSubscriptionUsersResult struct {
	value *ListAllSubscriptionUsersResult
	isSet bool
}

func (v NullableListAllSubscriptionUsersResult) Get() *ListAllSubscriptionUsersResult {
	return v.value
}

func (v *NullableListAllSubscriptionUsersResult) Set(val *ListAllSubscriptionUsersResult) {
	v.value = val
	v.isSet = true
}

func (v NullableListAllSubscriptionUsersResult) IsSet() bool {
	return v.isSet
}

func (v *NullableListAllSubscriptionUsersResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAllSubscriptionUsersResult(val *ListAllSubscriptionUsersResult) *NullableListAllSubscriptionUsersResult {
	return &NullableListAllSubscriptionUsersResult{value: val, isSet: true}
}

func (v NullableListAllSubscriptionUsersResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAllSubscriptionUsersResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


