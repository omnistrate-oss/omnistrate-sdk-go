/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the DeploymentCellHealthDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentCellHealthDetail{}

// DeploymentCellHealthDetail struct for DeploymentCellHealthDetail
type DeploymentCellHealthDetail struct {
	// The cloud provider of the host cluster
	CloudProvider string `json:"cloudProvider"`
	// The ID of the host cluster
	HostClusterID string `json:"hostClusterID"`
	// The health summary of the instances by instance ID
	InstanceHealth map[string]InstanceHealthSummary `json:"instanceHealth"`
	// The region code of the host cluster
	RegionCode string `json:"regionCode"`
	// The name of the service environment
	ServiceEnvironmentName string `json:"serviceEnvironmentName"`
	// The name of the service
	ServiceName string `json:"serviceName"`
	AdditionalProperties map[string]interface{}
}

type _DeploymentCellHealthDetail DeploymentCellHealthDetail

// NewDeploymentCellHealthDetail instantiates a new DeploymentCellHealthDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentCellHealthDetail(cloudProvider string, hostClusterID string, instanceHealth map[string]InstanceHealthSummary, regionCode string, serviceEnvironmentName string, serviceName string) *DeploymentCellHealthDetail {
	this := DeploymentCellHealthDetail{}
	this.CloudProvider = cloudProvider
	this.HostClusterID = hostClusterID
	this.InstanceHealth = instanceHealth
	this.RegionCode = regionCode
	this.ServiceEnvironmentName = serviceEnvironmentName
	this.ServiceName = serviceName
	return &this
}

// NewDeploymentCellHealthDetailWithDefaults instantiates a new DeploymentCellHealthDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentCellHealthDetailWithDefaults() *DeploymentCellHealthDetail {
	this := DeploymentCellHealthDetail{}
	return &this
}

// GetCloudProvider returns the CloudProvider field value
func (o *DeploymentCellHealthDetail) GetCloudProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value
// and a boolean to check if the value has been set.
func (o *DeploymentCellHealthDetail) GetCloudProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProvider, true
}

// SetCloudProvider sets field value
func (o *DeploymentCellHealthDetail) SetCloudProvider(v string) {
	o.CloudProvider = v
}

// GetHostClusterID returns the HostClusterID field value
func (o *DeploymentCellHealthDetail) GetHostClusterID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostClusterID
}

// GetHostClusterIDOk returns a tuple with the HostClusterID field value
// and a boolean to check if the value has been set.
func (o *DeploymentCellHealthDetail) GetHostClusterIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostClusterID, true
}

// SetHostClusterID sets field value
func (o *DeploymentCellHealthDetail) SetHostClusterID(v string) {
	o.HostClusterID = v
}

// GetInstanceHealth returns the InstanceHealth field value
func (o *DeploymentCellHealthDetail) GetInstanceHealth() map[string]InstanceHealthSummary {
	if o == nil {
		var ret map[string]InstanceHealthSummary
		return ret
	}

	return o.InstanceHealth
}

// GetInstanceHealthOk returns a tuple with the InstanceHealth field value
// and a boolean to check if the value has been set.
func (o *DeploymentCellHealthDetail) GetInstanceHealthOk() (*map[string]InstanceHealthSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceHealth, true
}

// SetInstanceHealth sets field value
func (o *DeploymentCellHealthDetail) SetInstanceHealth(v map[string]InstanceHealthSummary) {
	o.InstanceHealth = v
}

// GetRegionCode returns the RegionCode field value
func (o *DeploymentCellHealthDetail) GetRegionCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value
// and a boolean to check if the value has been set.
func (o *DeploymentCellHealthDetail) GetRegionCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionCode, true
}

// SetRegionCode sets field value
func (o *DeploymentCellHealthDetail) SetRegionCode(v string) {
	o.RegionCode = v
}

// GetServiceEnvironmentName returns the ServiceEnvironmentName field value
func (o *DeploymentCellHealthDetail) GetServiceEnvironmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceEnvironmentName
}

// GetServiceEnvironmentNameOk returns a tuple with the ServiceEnvironmentName field value
// and a boolean to check if the value has been set.
func (o *DeploymentCellHealthDetail) GetServiceEnvironmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceEnvironmentName, true
}

// SetServiceEnvironmentName sets field value
func (o *DeploymentCellHealthDetail) SetServiceEnvironmentName(v string) {
	o.ServiceEnvironmentName = v
}

// GetServiceName returns the ServiceName field value
func (o *DeploymentCellHealthDetail) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *DeploymentCellHealthDetail) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *DeploymentCellHealthDetail) SetServiceName(v string) {
	o.ServiceName = v
}

func (o DeploymentCellHealthDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentCellHealthDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloudProvider"] = o.CloudProvider
	toSerialize["hostClusterID"] = o.HostClusterID
	toSerialize["instanceHealth"] = o.InstanceHealth
	toSerialize["regionCode"] = o.RegionCode
	toSerialize["serviceEnvironmentName"] = o.ServiceEnvironmentName
	toSerialize["serviceName"] = o.ServiceName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeploymentCellHealthDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloudProvider",
		"hostClusterID",
		"instanceHealth",
		"regionCode",
		"serviceEnvironmentName",
		"serviceName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentCellHealthDetail := _DeploymentCellHealthDetail{}

	err = json.Unmarshal(data, &varDeploymentCellHealthDetail)

	if err != nil {
		return err
	}

	*o = DeploymentCellHealthDetail(varDeploymentCellHealthDetail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cloudProvider")
		delete(additionalProperties, "hostClusterID")
		delete(additionalProperties, "instanceHealth")
		delete(additionalProperties, "regionCode")
		delete(additionalProperties, "serviceEnvironmentName")
		delete(additionalProperties, "serviceName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploymentCellHealthDetail struct {
	value *DeploymentCellHealthDetail
	isSet bool
}

func (v NullableDeploymentCellHealthDetail) Get() *DeploymentCellHealthDetail {
	return v.value
}

func (v *NullableDeploymentCellHealthDetail) Set(val *DeploymentCellHealthDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentCellHealthDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentCellHealthDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentCellHealthDetail(val *DeploymentCellHealthDetail) *NullableDeploymentCellHealthDetail {
	return &NullableDeploymentCellHealthDetail{value: val, isSet: true}
}

func (v NullableDeploymentCellHealthDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentCellHealthDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


