/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the FleetGetUsageResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FleetGetUsageResult{}

// FleetGetUsageResult struct for FleetGetUsageResult
type FleetGetUsageResult struct {
	Usage *UsagePerSubscription `json:"usage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FleetGetUsageResult FleetGetUsageResult

// NewFleetGetUsageResult instantiates a new FleetGetUsageResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFleetGetUsageResult() *FleetGetUsageResult {
	this := FleetGetUsageResult{}
	return &this
}

// NewFleetGetUsageResultWithDefaults instantiates a new FleetGetUsageResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFleetGetUsageResultWithDefaults() *FleetGetUsageResult {
	this := FleetGetUsageResult{}
	return &this
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *FleetGetUsageResult) GetUsage() UsagePerSubscription {
	if o == nil || IsNil(o.Usage) {
		var ret UsagePerSubscription
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetGetUsageResult) GetUsageOk() (*UsagePerSubscription, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *FleetGetUsageResult) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given UsagePerSubscription and assigns it to the Usage field.
func (o *FleetGetUsageResult) SetUsage(v UsagePerSubscription) {
	o.Usage = &v
}

func (o FleetGetUsageResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FleetGetUsageResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FleetGetUsageResult) UnmarshalJSON(data []byte) (err error) {
	varFleetGetUsageResult := _FleetGetUsageResult{}

	err = json.Unmarshal(data, &varFleetGetUsageResult)

	if err != nil {
		return err
	}

	*o = FleetGetUsageResult(varFleetGetUsageResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "usage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFleetGetUsageResult struct {
	value *FleetGetUsageResult
	isSet bool
}

func (v NullableFleetGetUsageResult) Get() *FleetGetUsageResult {
	return v.value
}

func (v *NullableFleetGetUsageResult) Set(val *FleetGetUsageResult) {
	v.value = val
	v.isSet = true
}

func (v NullableFleetGetUsageResult) IsSet() bool {
	return v.isSet
}

func (v *NullableFleetGetUsageResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFleetGetUsageResult(val *FleetGetUsageResult) *NullableFleetGetUsageResult {
	return &NullableFleetGetUsageResult{value: val, isSet: true}
}

func (v NullableFleetGetUsageResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFleetGetUsageResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


