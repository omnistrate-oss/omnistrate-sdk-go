/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchRecord{}

// SearchRecord struct for SearchRecord
type SearchRecord struct {
	// The cloud provider of the record, if it's a deployment cell.
	CloudProvider *string `json:"cloudProvider,omitempty"`
	// The description of the record.
	Description *string `json:"description,omitempty"`
	// The service environment ID of this record.
	EnvironmentId *string `json:"environmentId,omitempty"`
	// The environment key of the record.
	EnvironmentKey *string `json:"environmentKey,omitempty"`
	// The ID of the record.
	Id string `json:"id"`
	// The name of the record.
	Name *string `json:"name,omitempty"`
	// The organization ID of the record, if it's a subscription.
	OrgId *string `json:"orgId,omitempty"`
	// The Organization Name of the record, if it's a user.
	OrgName *string `json:"orgName,omitempty"`
	// The region code of the record, if it's a deployment cell.
	RegionCode *string `json:"regionCode,omitempty"`
	// The resource ID of the record, if it's an instance.
	ResourceId *string `json:"resourceId,omitempty"`
	// The resource name for this record, if it's a workflow.
	ResourceName *string `json:"resourceName,omitempty"`
	// The service environment name of this record.
	ServiceEnvironmentName *string `json:"serviceEnvironmentName,omitempty"`
	// The service ID of the record.
	ServiceId *string `json:"serviceId,omitempty"`
	// The service name of this record.
	ServiceName *string `json:"serviceName,omitempty"`
	// The service plan name of this record, if it's a subscription.
	ServicePlanName *string `json:"servicePlanName,omitempty"`
	// The status of the record.
	Status *string `json:"status,omitempty"`
	// The status description of the record.
	StatusDescription *string `json:"statusDescription,omitempty"`
	// The Target Resource Name of the record, if it's a proxy instance.
	TargetResourceName *string `json:"targetResourceName,omitempty"`
	// The user email of this record, if it's a subscription.
	UserEmail *string `json:"userEmail,omitempty"`
	// The User ID of the record, if it's a subscription.
	UserID *string `json:"userID,omitempty"`
	// The version of this record.
	Version *string `json:"version,omitempty"`
}

type _SearchRecord SearchRecord

// NewSearchRecord instantiates a new SearchRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRecord(id string) *SearchRecord {
	this := SearchRecord{}
	this.Id = id
	return &this
}

// NewSearchRecordWithDefaults instantiates a new SearchRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRecordWithDefaults() *SearchRecord {
	this := SearchRecord{}
	return &this
}

// GetCloudProvider returns the CloudProvider field value if set, zero value otherwise.
func (o *SearchRecord) GetCloudProvider() string {
	if o == nil || IsNil(o.CloudProvider) {
		var ret string
		return ret
	}
	return *o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetCloudProviderOk() (*string, bool) {
	if o == nil || IsNil(o.CloudProvider) {
		return nil, false
	}
	return o.CloudProvider, true
}

// HasCloudProvider returns a boolean if a field has been set.
func (o *SearchRecord) HasCloudProvider() bool {
	if o != nil && !IsNil(o.CloudProvider) {
		return true
	}

	return false
}

// SetCloudProvider gets a reference to the given string and assigns it to the CloudProvider field.
func (o *SearchRecord) SetCloudProvider(v string) {
	o.CloudProvider = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SearchRecord) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SearchRecord) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SearchRecord) SetDescription(v string) {
	o.Description = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *SearchRecord) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *SearchRecord) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *SearchRecord) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetEnvironmentKey returns the EnvironmentKey field value if set, zero value otherwise.
func (o *SearchRecord) GetEnvironmentKey() string {
	if o == nil || IsNil(o.EnvironmentKey) {
		var ret string
		return ret
	}
	return *o.EnvironmentKey
}

// GetEnvironmentKeyOk returns a tuple with the EnvironmentKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetEnvironmentKeyOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentKey) {
		return nil, false
	}
	return o.EnvironmentKey, true
}

// HasEnvironmentKey returns a boolean if a field has been set.
func (o *SearchRecord) HasEnvironmentKey() bool {
	if o != nil && !IsNil(o.EnvironmentKey) {
		return true
	}

	return false
}

// SetEnvironmentKey gets a reference to the given string and assigns it to the EnvironmentKey field.
func (o *SearchRecord) SetEnvironmentKey(v string) {
	o.EnvironmentKey = &v
}

// GetId returns the Id field value
func (o *SearchRecord) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SearchRecord) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SearchRecord) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SearchRecord) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SearchRecord) SetName(v string) {
	o.Name = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *SearchRecord) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *SearchRecord) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *SearchRecord) SetOrgId(v string) {
	o.OrgId = &v
}

// GetOrgName returns the OrgName field value if set, zero value otherwise.
func (o *SearchRecord) GetOrgName() string {
	if o == nil || IsNil(o.OrgName) {
		var ret string
		return ret
	}
	return *o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetOrgNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgName) {
		return nil, false
	}
	return o.OrgName, true
}

// HasOrgName returns a boolean if a field has been set.
func (o *SearchRecord) HasOrgName() bool {
	if o != nil && !IsNil(o.OrgName) {
		return true
	}

	return false
}

// SetOrgName gets a reference to the given string and assigns it to the OrgName field.
func (o *SearchRecord) SetOrgName(v string) {
	o.OrgName = &v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *SearchRecord) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *SearchRecord) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *SearchRecord) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *SearchRecord) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *SearchRecord) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *SearchRecord) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *SearchRecord) GetResourceName() string {
	if o == nil || IsNil(o.ResourceName) {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetResourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceName) {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *SearchRecord) HasResourceName() bool {
	if o != nil && !IsNil(o.ResourceName) {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *SearchRecord) SetResourceName(v string) {
	o.ResourceName = &v
}

// GetServiceEnvironmentName returns the ServiceEnvironmentName field value if set, zero value otherwise.
func (o *SearchRecord) GetServiceEnvironmentName() string {
	if o == nil || IsNil(o.ServiceEnvironmentName) {
		var ret string
		return ret
	}
	return *o.ServiceEnvironmentName
}

// GetServiceEnvironmentNameOk returns a tuple with the ServiceEnvironmentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetServiceEnvironmentNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceEnvironmentName) {
		return nil, false
	}
	return o.ServiceEnvironmentName, true
}

// HasServiceEnvironmentName returns a boolean if a field has been set.
func (o *SearchRecord) HasServiceEnvironmentName() bool {
	if o != nil && !IsNil(o.ServiceEnvironmentName) {
		return true
	}

	return false
}

// SetServiceEnvironmentName gets a reference to the given string and assigns it to the ServiceEnvironmentName field.
func (o *SearchRecord) SetServiceEnvironmentName(v string) {
	o.ServiceEnvironmentName = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *SearchRecord) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *SearchRecord) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *SearchRecord) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *SearchRecord) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *SearchRecord) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *SearchRecord) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetServicePlanName returns the ServicePlanName field value if set, zero value otherwise.
func (o *SearchRecord) GetServicePlanName() string {
	if o == nil || IsNil(o.ServicePlanName) {
		var ret string
		return ret
	}
	return *o.ServicePlanName
}

// GetServicePlanNameOk returns a tuple with the ServicePlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetServicePlanNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServicePlanName) {
		return nil, false
	}
	return o.ServicePlanName, true
}

// HasServicePlanName returns a boolean if a field has been set.
func (o *SearchRecord) HasServicePlanName() bool {
	if o != nil && !IsNil(o.ServicePlanName) {
		return true
	}

	return false
}

// SetServicePlanName gets a reference to the given string and assigns it to the ServicePlanName field.
func (o *SearchRecord) SetServicePlanName(v string) {
	o.ServicePlanName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SearchRecord) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SearchRecord) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SearchRecord) SetStatus(v string) {
	o.Status = &v
}

// GetStatusDescription returns the StatusDescription field value if set, zero value otherwise.
func (o *SearchRecord) GetStatusDescription() string {
	if o == nil || IsNil(o.StatusDescription) {
		var ret string
		return ret
	}
	return *o.StatusDescription
}

// GetStatusDescriptionOk returns a tuple with the StatusDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetStatusDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.StatusDescription) {
		return nil, false
	}
	return o.StatusDescription, true
}

// HasStatusDescription returns a boolean if a field has been set.
func (o *SearchRecord) HasStatusDescription() bool {
	if o != nil && !IsNil(o.StatusDescription) {
		return true
	}

	return false
}

// SetStatusDescription gets a reference to the given string and assigns it to the StatusDescription field.
func (o *SearchRecord) SetStatusDescription(v string) {
	o.StatusDescription = &v
}

// GetTargetResourceName returns the TargetResourceName field value if set, zero value otherwise.
func (o *SearchRecord) GetTargetResourceName() string {
	if o == nil || IsNil(o.TargetResourceName) {
		var ret string
		return ret
	}
	return *o.TargetResourceName
}

// GetTargetResourceNameOk returns a tuple with the TargetResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetTargetResourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetResourceName) {
		return nil, false
	}
	return o.TargetResourceName, true
}

// HasTargetResourceName returns a boolean if a field has been set.
func (o *SearchRecord) HasTargetResourceName() bool {
	if o != nil && !IsNil(o.TargetResourceName) {
		return true
	}

	return false
}

// SetTargetResourceName gets a reference to the given string and assigns it to the TargetResourceName field.
func (o *SearchRecord) SetTargetResourceName(v string) {
	o.TargetResourceName = &v
}

// GetUserEmail returns the UserEmail field value if set, zero value otherwise.
func (o *SearchRecord) GetUserEmail() string {
	if o == nil || IsNil(o.UserEmail) {
		var ret string
		return ret
	}
	return *o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetUserEmailOk() (*string, bool) {
	if o == nil || IsNil(o.UserEmail) {
		return nil, false
	}
	return o.UserEmail, true
}

// HasUserEmail returns a boolean if a field has been set.
func (o *SearchRecord) HasUserEmail() bool {
	if o != nil && !IsNil(o.UserEmail) {
		return true
	}

	return false
}

// SetUserEmail gets a reference to the given string and assigns it to the UserEmail field.
func (o *SearchRecord) SetUserEmail(v string) {
	o.UserEmail = &v
}

// GetUserID returns the UserID field value if set, zero value otherwise.
func (o *SearchRecord) GetUserID() string {
	if o == nil || IsNil(o.UserID) {
		var ret string
		return ret
	}
	return *o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetUserIDOk() (*string, bool) {
	if o == nil || IsNil(o.UserID) {
		return nil, false
	}
	return o.UserID, true
}

// HasUserID returns a boolean if a field has been set.
func (o *SearchRecord) HasUserID() bool {
	if o != nil && !IsNil(o.UserID) {
		return true
	}

	return false
}

// SetUserID gets a reference to the given string and assigns it to the UserID field.
func (o *SearchRecord) SetUserID(v string) {
	o.UserID = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SearchRecord) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRecord) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SearchRecord) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *SearchRecord) SetVersion(v string) {
	o.Version = &v
}

func (o SearchRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudProvider) {
		toSerialize["cloudProvider"] = o.CloudProvider
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environmentId"] = o.EnvironmentId
	}
	if !IsNil(o.EnvironmentKey) {
		toSerialize["environmentKey"] = o.EnvironmentKey
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	if !IsNil(o.OrgName) {
		toSerialize["orgName"] = o.OrgName
	}
	if !IsNil(o.RegionCode) {
		toSerialize["regionCode"] = o.RegionCode
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resourceId"] = o.ResourceId
	}
	if !IsNil(o.ResourceName) {
		toSerialize["resourceName"] = o.ResourceName
	}
	if !IsNil(o.ServiceEnvironmentName) {
		toSerialize["serviceEnvironmentName"] = o.ServiceEnvironmentName
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	if !IsNil(o.ServicePlanName) {
		toSerialize["servicePlanName"] = o.ServicePlanName
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusDescription) {
		toSerialize["statusDescription"] = o.StatusDescription
	}
	if !IsNil(o.TargetResourceName) {
		toSerialize["targetResourceName"] = o.TargetResourceName
	}
	if !IsNil(o.UserEmail) {
		toSerialize["userEmail"] = o.UserEmail
	}
	if !IsNil(o.UserID) {
		toSerialize["userID"] = o.UserID
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *SearchRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchRecord := _SearchRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchRecord)

	if err != nil {
		return err
	}

	*o = SearchRecord(varSearchRecord)

	return err
}

type NullableSearchRecord struct {
	value *SearchRecord
	isSet bool
}

func (v NullableSearchRecord) Get() *SearchRecord {
	return v.value
}

func (v *NullableSearchRecord) Set(val *SearchRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRecord(val *SearchRecord) *NullableSearchRecord {
	return &NullableSearchRecord{value: val, isSet: true}
}

func (v NullableSearchRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


