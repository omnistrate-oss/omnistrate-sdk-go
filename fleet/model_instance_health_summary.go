/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the InstanceHealthSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceHealthSummary{}

// InstanceHealthSummary struct for InstanceHealthSummary
type InstanceHealthSummary struct {
	// The ID of the instance
	InstanceID *string `json:"instanceID,omitempty"`
	// The lifecycle status of the instance
	LifeCycleStatus *string `json:"lifeCycleStatus,omitempty"`
	// The health summary of the resources by resource ID
	ResourcesHealth *map[string]ResourceHealthSummary `json:"resourcesHealth,omitempty"`
	// The status of the instance
	Status *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceHealthSummary InstanceHealthSummary

// NewInstanceHealthSummary instantiates a new InstanceHealthSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceHealthSummary() *InstanceHealthSummary {
	this := InstanceHealthSummary{}
	return &this
}

// NewInstanceHealthSummaryWithDefaults instantiates a new InstanceHealthSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceHealthSummaryWithDefaults() *InstanceHealthSummary {
	this := InstanceHealthSummary{}
	return &this
}

// GetInstanceID returns the InstanceID field value if set, zero value otherwise.
func (o *InstanceHealthSummary) GetInstanceID() string {
	if o == nil || IsNil(o.InstanceID) {
		var ret string
		return ret
	}
	return *o.InstanceID
}

// GetInstanceIDOk returns a tuple with the InstanceID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceHealthSummary) GetInstanceIDOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceID) {
		return nil, false
	}
	return o.InstanceID, true
}

// HasInstanceID returns a boolean if a field has been set.
func (o *InstanceHealthSummary) HasInstanceID() bool {
	if o != nil && !IsNil(o.InstanceID) {
		return true
	}

	return false
}

// SetInstanceID gets a reference to the given string and assigns it to the InstanceID field.
func (o *InstanceHealthSummary) SetInstanceID(v string) {
	o.InstanceID = &v
}

// GetLifeCycleStatus returns the LifeCycleStatus field value if set, zero value otherwise.
func (o *InstanceHealthSummary) GetLifeCycleStatus() string {
	if o == nil || IsNil(o.LifeCycleStatus) {
		var ret string
		return ret
	}
	return *o.LifeCycleStatus
}

// GetLifeCycleStatusOk returns a tuple with the LifeCycleStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceHealthSummary) GetLifeCycleStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LifeCycleStatus) {
		return nil, false
	}
	return o.LifeCycleStatus, true
}

// HasLifeCycleStatus returns a boolean if a field has been set.
func (o *InstanceHealthSummary) HasLifeCycleStatus() bool {
	if o != nil && !IsNil(o.LifeCycleStatus) {
		return true
	}

	return false
}

// SetLifeCycleStatus gets a reference to the given string and assigns it to the LifeCycleStatus field.
func (o *InstanceHealthSummary) SetLifeCycleStatus(v string) {
	o.LifeCycleStatus = &v
}

// GetResourcesHealth returns the ResourcesHealth field value if set, zero value otherwise.
func (o *InstanceHealthSummary) GetResourcesHealth() map[string]ResourceHealthSummary {
	if o == nil || IsNil(o.ResourcesHealth) {
		var ret map[string]ResourceHealthSummary
		return ret
	}
	return *o.ResourcesHealth
}

// GetResourcesHealthOk returns a tuple with the ResourcesHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceHealthSummary) GetResourcesHealthOk() (*map[string]ResourceHealthSummary, bool) {
	if o == nil || IsNil(o.ResourcesHealth) {
		return nil, false
	}
	return o.ResourcesHealth, true
}

// HasResourcesHealth returns a boolean if a field has been set.
func (o *InstanceHealthSummary) HasResourcesHealth() bool {
	if o != nil && !IsNil(o.ResourcesHealth) {
		return true
	}

	return false
}

// SetResourcesHealth gets a reference to the given map[string]ResourceHealthSummary and assigns it to the ResourcesHealth field.
func (o *InstanceHealthSummary) SetResourcesHealth(v map[string]ResourceHealthSummary) {
	o.ResourcesHealth = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InstanceHealthSummary) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceHealthSummary) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InstanceHealthSummary) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *InstanceHealthSummary) SetStatus(v string) {
	o.Status = &v
}

func (o InstanceHealthSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceHealthSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstanceID) {
		toSerialize["instanceID"] = o.InstanceID
	}
	if !IsNil(o.LifeCycleStatus) {
		toSerialize["lifeCycleStatus"] = o.LifeCycleStatus
	}
	if !IsNil(o.ResourcesHealth) {
		toSerialize["resourcesHealth"] = o.ResourcesHealth
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceHealthSummary) UnmarshalJSON(data []byte) (err error) {
	varInstanceHealthSummary := _InstanceHealthSummary{}

	err = json.Unmarshal(data, &varInstanceHealthSummary)

	if err != nil {
		return err
	}

	*o = InstanceHealthSummary(varInstanceHealthSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instanceID")
		delete(additionalProperties, "lifeCycleStatus")
		delete(additionalProperties, "resourcesHealth")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceHealthSummary struct {
	value *InstanceHealthSummary
	isSet bool
}

func (v NullableInstanceHealthSummary) Get() *InstanceHealthSummary {
	return v.value
}

func (v *NullableInstanceHealthSummary) Set(val *InstanceHealthSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceHealthSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceHealthSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceHealthSummary(val *InstanceHealthSummary) *NullableInstanceHealthSummary {
	return &NullableInstanceHealthSummary{value: val, isSet: true}
}

func (v NullableInstanceHealthSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceHealthSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


