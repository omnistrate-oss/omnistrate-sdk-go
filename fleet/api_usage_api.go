/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
	"reflect"
)


type UsageApiAPI interface {

	/*
	UsageApiGetCurrentUsage GetCurrentUsage usage-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUsageApiGetCurrentUsageRequest
	*/
	UsageApiGetCurrentUsage(ctx context.Context) ApiUsageApiGetCurrentUsageRequest

	// UsageApiGetCurrentUsageExecute executes the request
	//  @return FleetGetUsageResult
	UsageApiGetCurrentUsageExecute(r ApiUsageApiGetCurrentUsageRequest) (*FleetGetUsageResult, *http.Response, error)

	/*
	UsageApiGetUsagePerDay GetUsagePerDay usage-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUsageApiGetUsagePerDayRequest
	*/
	UsageApiGetUsagePerDay(ctx context.Context) ApiUsageApiGetUsagePerDayRequest

	// UsageApiGetUsagePerDayExecute executes the request
	//  @return FleetGetUsageResult
	UsageApiGetUsagePerDayExecute(r ApiUsageApiGetUsagePerDayRequest) (*FleetGetUsageResult, *http.Response, error)
}

// UsageApiAPIService UsageApiAPI service
type UsageApiAPIService service

type ApiUsageApiGetCurrentUsageRequest struct {
	ctx context.Context
	ApiService UsageApiAPI
	startDate *time.Time
	endDate *time.Time
	serviceID *string
	environmentID *string
	productTierID *string
	subscriptionIDs *[]string
}

// Start date of the usage report
func (r ApiUsageApiGetCurrentUsageRequest) StartDate(startDate time.Time) ApiUsageApiGetCurrentUsageRequest {
	r.startDate = &startDate
	return r
}

// End date of the usage report
func (r ApiUsageApiGetCurrentUsageRequest) EndDate(endDate time.Time) ApiUsageApiGetCurrentUsageRequest {
	r.endDate = &endDate
	return r
}

// Filter usage by service ID
func (r ApiUsageApiGetCurrentUsageRequest) ServiceID(serviceID string) ApiUsageApiGetCurrentUsageRequest {
	r.serviceID = &serviceID
	return r
}

// Filter usage by environment ID
func (r ApiUsageApiGetCurrentUsageRequest) EnvironmentID(environmentID string) ApiUsageApiGetCurrentUsageRequest {
	r.environmentID = &environmentID
	return r
}

// Filter usage by product tier ID
func (r ApiUsageApiGetCurrentUsageRequest) ProductTierID(productTierID string) ApiUsageApiGetCurrentUsageRequest {
	r.productTierID = &productTierID
	return r
}

// Filter usage by subscription IDs
func (r ApiUsageApiGetCurrentUsageRequest) SubscriptionIDs(subscriptionIDs []string) ApiUsageApiGetCurrentUsageRequest {
	r.subscriptionIDs = &subscriptionIDs
	return r
}

func (r ApiUsageApiGetCurrentUsageRequest) Execute() (*FleetGetUsageResult, *http.Response, error) {
	return r.ApiService.UsageApiGetCurrentUsageExecute(r)
}

/*
UsageApiGetCurrentUsage GetCurrentUsage usage-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsageApiGetCurrentUsageRequest
*/
func (a *UsageApiAPIService) UsageApiGetCurrentUsage(ctx context.Context) ApiUsageApiGetCurrentUsageRequest {
	return ApiUsageApiGetCurrentUsageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FleetGetUsageResult
func (a *UsageApiAPIService) UsageApiGetCurrentUsageExecute(r ApiUsageApiGetCurrentUsageRequest) (*FleetGetUsageResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FleetGetUsageResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsageApiAPIService.UsageApiGetCurrentUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/usage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	if r.serviceID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serviceID", r.serviceID, "form", "")
	}
	if r.environmentID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environmentID", r.environmentID, "form", "")
	}
	if r.productTierID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productTierID", r.productTierID, "form", "")
	}
	if r.subscriptionIDs != nil {
		t := *r.subscriptionIDs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionIDs", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionIDs", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsageApiGetUsagePerDayRequest struct {
	ctx context.Context
	ApiService UsageApiAPI
	startDate *time.Time
	endDate *time.Time
	serviceID *string
	environmentID *string
	productTierID *string
	subscriptionIDs *[]string
}

// Start date of the usage report
func (r ApiUsageApiGetUsagePerDayRequest) StartDate(startDate time.Time) ApiUsageApiGetUsagePerDayRequest {
	r.startDate = &startDate
	return r
}

// End date of the usage report
func (r ApiUsageApiGetUsagePerDayRequest) EndDate(endDate time.Time) ApiUsageApiGetUsagePerDayRequest {
	r.endDate = &endDate
	return r
}

// Filter usage by service ID
func (r ApiUsageApiGetUsagePerDayRequest) ServiceID(serviceID string) ApiUsageApiGetUsagePerDayRequest {
	r.serviceID = &serviceID
	return r
}

// Filter usage by environment ID
func (r ApiUsageApiGetUsagePerDayRequest) EnvironmentID(environmentID string) ApiUsageApiGetUsagePerDayRequest {
	r.environmentID = &environmentID
	return r
}

// Filter usage by product tier ID
func (r ApiUsageApiGetUsagePerDayRequest) ProductTierID(productTierID string) ApiUsageApiGetUsagePerDayRequest {
	r.productTierID = &productTierID
	return r
}

// Filter usage by subscription IDs
func (r ApiUsageApiGetUsagePerDayRequest) SubscriptionIDs(subscriptionIDs []string) ApiUsageApiGetUsagePerDayRequest {
	r.subscriptionIDs = &subscriptionIDs
	return r
}

func (r ApiUsageApiGetUsagePerDayRequest) Execute() (*FleetGetUsageResult, *http.Response, error) {
	return r.ApiService.UsageApiGetUsagePerDayExecute(r)
}

/*
UsageApiGetUsagePerDay GetUsagePerDay usage-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsageApiGetUsagePerDayRequest
*/
func (a *UsageApiAPIService) UsageApiGetUsagePerDay(ctx context.Context) ApiUsageApiGetUsagePerDayRequest {
	return ApiUsageApiGetUsagePerDayRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FleetGetUsageResult
func (a *UsageApiAPIService) UsageApiGetUsagePerDayExecute(r ApiUsageApiGetUsagePerDayRequest) (*FleetGetUsageResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FleetGetUsageResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsageApiAPIService.UsageApiGetUsagePerDay")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/usage-per-day"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	if r.serviceID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serviceID", r.serviceID, "form", "")
	}
	if r.environmentID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environmentID", r.environmentID, "form", "")
	}
	if r.productTierID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productTierID", r.productTierID, "form", "")
	}
	if r.subscriptionIDs != nil {
		t := *r.subscriptionIDs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionIDs", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionIDs", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
