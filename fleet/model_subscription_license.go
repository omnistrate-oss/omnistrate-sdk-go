/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the SubscriptionLicense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionLicense{}

// SubscriptionLicense struct for SubscriptionLicense
type SubscriptionLicense struct {
	// Public certificate used to sign the license in Base 64 format
	CertificateBase64 *string `json:"certificateBase64,omitempty"`
	// Current expiration of the license in RFC 3339 format. The license will be renewed periodically before this date while the subscription is active.
	ExpirationDate *string `json:"expirationDate,omitempty"`
	// License file in Base 64 format
	LicenseBase64 *string `json:"licenseBase64,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionLicense SubscriptionLicense

// NewSubscriptionLicense instantiates a new SubscriptionLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionLicense() *SubscriptionLicense {
	this := SubscriptionLicense{}
	var certificateBase64 string = ""
	this.CertificateBase64 = &certificateBase64
	var licenseBase64 string = ""
	this.LicenseBase64 = &licenseBase64
	return &this
}

// NewSubscriptionLicenseWithDefaults instantiates a new SubscriptionLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionLicenseWithDefaults() *SubscriptionLicense {
	this := SubscriptionLicense{}
	var certificateBase64 string = ""
	this.CertificateBase64 = &certificateBase64
	var licenseBase64 string = ""
	this.LicenseBase64 = &licenseBase64
	return &this
}

// GetCertificateBase64 returns the CertificateBase64 field value if set, zero value otherwise.
func (o *SubscriptionLicense) GetCertificateBase64() string {
	if o == nil || IsNil(o.CertificateBase64) {
		var ret string
		return ret
	}
	return *o.CertificateBase64
}

// GetCertificateBase64Ok returns a tuple with the CertificateBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionLicense) GetCertificateBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.CertificateBase64) {
		return nil, false
	}
	return o.CertificateBase64, true
}

// HasCertificateBase64 returns a boolean if a field has been set.
func (o *SubscriptionLicense) HasCertificateBase64() bool {
	if o != nil && !IsNil(o.CertificateBase64) {
		return true
	}

	return false
}

// SetCertificateBase64 gets a reference to the given string and assigns it to the CertificateBase64 field.
func (o *SubscriptionLicense) SetCertificateBase64(v string) {
	o.CertificateBase64 = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *SubscriptionLicense) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionLicense) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *SubscriptionLicense) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *SubscriptionLicense) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetLicenseBase64 returns the LicenseBase64 field value if set, zero value otherwise.
func (o *SubscriptionLicense) GetLicenseBase64() string {
	if o == nil || IsNil(o.LicenseBase64) {
		var ret string
		return ret
	}
	return *o.LicenseBase64
}

// GetLicenseBase64Ok returns a tuple with the LicenseBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionLicense) GetLicenseBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.LicenseBase64) {
		return nil, false
	}
	return o.LicenseBase64, true
}

// HasLicenseBase64 returns a boolean if a field has been set.
func (o *SubscriptionLicense) HasLicenseBase64() bool {
	if o != nil && !IsNil(o.LicenseBase64) {
		return true
	}

	return false
}

// SetLicenseBase64 gets a reference to the given string and assigns it to the LicenseBase64 field.
func (o *SubscriptionLicense) SetLicenseBase64(v string) {
	o.LicenseBase64 = &v
}

func (o SubscriptionLicense) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionLicense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateBase64) {
		toSerialize["certificateBase64"] = o.CertificateBase64
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.LicenseBase64) {
		toSerialize["licenseBase64"] = o.LicenseBase64
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionLicense) UnmarshalJSON(data []byte) (err error) {
	varSubscriptionLicense := _SubscriptionLicense{}

	err = json.Unmarshal(data, &varSubscriptionLicense)

	if err != nil {
		return err
	}

	*o = SubscriptionLicense(varSubscriptionLicense)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "certificateBase64")
		delete(additionalProperties, "expirationDate")
		delete(additionalProperties, "licenseBase64")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionLicense struct {
	value *SubscriptionLicense
	isSet bool
}

func (v NullableSubscriptionLicense) Get() *SubscriptionLicense {
	return v.value
}

func (v *NullableSubscriptionLicense) Set(val *SubscriptionLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionLicense(val *SubscriptionLicense) *NullableSubscriptionLicense {
	return &NullableSubscriptionLicense{value: val, isSet: true}
}

func (v NullableSubscriptionLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


