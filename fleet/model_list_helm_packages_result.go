/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListHelmPackagesResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListHelmPackagesResult{}

// ListHelmPackagesResult struct for ListHelmPackagesResult
type ListHelmPackagesResult struct {
	// List of Helm packages
	HelmPackages []HelmPackage `json:"helmPackages"`
}

type _ListHelmPackagesResult ListHelmPackagesResult

// NewListHelmPackagesResult instantiates a new ListHelmPackagesResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListHelmPackagesResult(helmPackages []HelmPackage) *ListHelmPackagesResult {
	this := ListHelmPackagesResult{}
	this.HelmPackages = helmPackages
	return &this
}

// NewListHelmPackagesResultWithDefaults instantiates a new ListHelmPackagesResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListHelmPackagesResultWithDefaults() *ListHelmPackagesResult {
	this := ListHelmPackagesResult{}
	return &this
}

// GetHelmPackages returns the HelmPackages field value
func (o *ListHelmPackagesResult) GetHelmPackages() []HelmPackage {
	if o == nil {
		var ret []HelmPackage
		return ret
	}

	return o.HelmPackages
}

// GetHelmPackagesOk returns a tuple with the HelmPackages field value
// and a boolean to check if the value has been set.
func (o *ListHelmPackagesResult) GetHelmPackagesOk() ([]HelmPackage, bool) {
	if o == nil {
		return nil, false
	}
	return o.HelmPackages, true
}

// SetHelmPackages sets field value
func (o *ListHelmPackagesResult) SetHelmPackages(v []HelmPackage) {
	o.HelmPackages = v
}

func (o ListHelmPackagesResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListHelmPackagesResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["helmPackages"] = o.HelmPackages
	return toSerialize, nil
}

func (o *ListHelmPackagesResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"helmPackages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListHelmPackagesResult := _ListHelmPackagesResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListHelmPackagesResult)

	if err != nil {
		return err
	}

	*o = ListHelmPackagesResult(varListHelmPackagesResult)

	return err
}

type NullableListHelmPackagesResult struct {
	value *ListHelmPackagesResult
	isSet bool
}

func (v NullableListHelmPackagesResult) Get() *ListHelmPackagesResult {
	return v.value
}

func (v *NullableListHelmPackagesResult) Set(val *ListHelmPackagesResult) {
	v.value = val
	v.isSet = true
}

func (v NullableListHelmPackagesResult) IsSet() bool {
	return v.isSet
}

func (v *NullableListHelmPackagesResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListHelmPackagesResult(val *ListHelmPackagesResult) *NullableListHelmPackagesResult {
	return &NullableListHelmPackagesResult{value: val, isSet: true}
}

func (v NullableListHelmPackagesResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListHelmPackagesResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


