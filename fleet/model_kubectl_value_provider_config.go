/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the KubectlValueProviderConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubectlValueProviderConfig{}

// KubectlValueProviderConfig Configuration for kubectl-based value provider
type KubectlValueProviderConfig struct {
	// The kubectl command to execute
	Command string `json:"command"`
	// Kubernetes context for the command
	Context *string `json:"context,omitempty"`
	// Environment variables for the command
	Environment *map[string]string `json:"environment,omitempty"`
	// Kubernetes namespace for the command
	Namespace *string `json:"namespace,omitempty"`
	// Number of retry attempts
	RetryCount *int64 `json:"retryCount,omitempty"`
	// Command timeout in seconds
	Timeout *int64 `json:"timeout,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KubectlValueProviderConfig KubectlValueProviderConfig

// NewKubectlValueProviderConfig instantiates a new KubectlValueProviderConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubectlValueProviderConfig(command string) *KubectlValueProviderConfig {
	this := KubectlValueProviderConfig{}
	this.Command = command
	var retryCount int64 = 3
	this.RetryCount = &retryCount
	var timeout int64 = 30
	this.Timeout = &timeout
	return &this
}

// NewKubectlValueProviderConfigWithDefaults instantiates a new KubectlValueProviderConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubectlValueProviderConfigWithDefaults() *KubectlValueProviderConfig {
	this := KubectlValueProviderConfig{}
	var retryCount int64 = 3
	this.RetryCount = &retryCount
	var timeout int64 = 30
	this.Timeout = &timeout
	return &this
}

// GetCommand returns the Command field value
func (o *KubectlValueProviderConfig) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *KubectlValueProviderConfig) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *KubectlValueProviderConfig) SetCommand(v string) {
	o.Command = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *KubectlValueProviderConfig) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubectlValueProviderConfig) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *KubectlValueProviderConfig) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *KubectlValueProviderConfig) SetContext(v string) {
	o.Context = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *KubectlValueProviderConfig) GetEnvironment() map[string]string {
	if o == nil || IsNil(o.Environment) {
		var ret map[string]string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubectlValueProviderConfig) GetEnvironmentOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *KubectlValueProviderConfig) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given map[string]string and assigns it to the Environment field.
func (o *KubectlValueProviderConfig) SetEnvironment(v map[string]string) {
	o.Environment = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *KubectlValueProviderConfig) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubectlValueProviderConfig) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *KubectlValueProviderConfig) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *KubectlValueProviderConfig) SetNamespace(v string) {
	o.Namespace = &v
}

// GetRetryCount returns the RetryCount field value if set, zero value otherwise.
func (o *KubectlValueProviderConfig) GetRetryCount() int64 {
	if o == nil || IsNil(o.RetryCount) {
		var ret int64
		return ret
	}
	return *o.RetryCount
}

// GetRetryCountOk returns a tuple with the RetryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubectlValueProviderConfig) GetRetryCountOk() (*int64, bool) {
	if o == nil || IsNil(o.RetryCount) {
		return nil, false
	}
	return o.RetryCount, true
}

// HasRetryCount returns a boolean if a field has been set.
func (o *KubectlValueProviderConfig) HasRetryCount() bool {
	if o != nil && !IsNil(o.RetryCount) {
		return true
	}

	return false
}

// SetRetryCount gets a reference to the given int64 and assigns it to the RetryCount field.
func (o *KubectlValueProviderConfig) SetRetryCount(v int64) {
	o.RetryCount = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *KubectlValueProviderConfig) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout) {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubectlValueProviderConfig) GetTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *KubectlValueProviderConfig) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *KubectlValueProviderConfig) SetTimeout(v int64) {
	o.Timeout = &v
}

func (o KubectlValueProviderConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubectlValueProviderConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["command"] = o.Command
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.RetryCount) {
		toSerialize["retryCount"] = o.RetryCount
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KubectlValueProviderConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"command",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubectlValueProviderConfig := _KubectlValueProviderConfig{}

	err = json.Unmarshal(data, &varKubectlValueProviderConfig)

	if err != nil {
		return err
	}

	*o = KubectlValueProviderConfig(varKubectlValueProviderConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "command")
		delete(additionalProperties, "context")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "retryCount")
		delete(additionalProperties, "timeout")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKubectlValueProviderConfig struct {
	value *KubectlValueProviderConfig
	isSet bool
}

func (v NullableKubectlValueProviderConfig) Get() *KubectlValueProviderConfig {
	return v.value
}

func (v *NullableKubectlValueProviderConfig) Set(val *KubectlValueProviderConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableKubectlValueProviderConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableKubectlValueProviderConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubectlValueProviderConfig(val *KubectlValueProviderConfig) *NullableKubectlValueProviderConfig {
	return &NullableKubectlValueProviderConfig{value: val, isSet: true}
}

func (v NullableKubectlValueProviderConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubectlValueProviderConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


