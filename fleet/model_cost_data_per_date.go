/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CostDataPerDate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CostDataPerDate{}

// CostDataPerDate struct for CostDataPerDate
type CostDataPerDate struct {
	// The total cost of the fleet on that date
	Cost float64 `json:"cost"`
	// The cost of the fleet by instance type on that date
	CostByInstanceType *map[string]InstanceTypeCost `json:"costByInstanceType,omitempty"`
	// The date of the cost data
	Date time.Time `json:"date"`
	AdditionalProperties map[string]interface{}
}

type _CostDataPerDate CostDataPerDate

// NewCostDataPerDate instantiates a new CostDataPerDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCostDataPerDate(cost float64, date time.Time) *CostDataPerDate {
	this := CostDataPerDate{}
	this.Cost = cost
	this.Date = date
	return &this
}

// NewCostDataPerDateWithDefaults instantiates a new CostDataPerDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostDataPerDateWithDefaults() *CostDataPerDate {
	this := CostDataPerDate{}
	return &this
}

// GetCost returns the Cost field value
func (o *CostDataPerDate) GetCost() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
func (o *CostDataPerDate) GetCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cost, true
}

// SetCost sets field value
func (o *CostDataPerDate) SetCost(v float64) {
	o.Cost = v
}

// GetCostByInstanceType returns the CostByInstanceType field value if set, zero value otherwise.
func (o *CostDataPerDate) GetCostByInstanceType() map[string]InstanceTypeCost {
	if o == nil || IsNil(o.CostByInstanceType) {
		var ret map[string]InstanceTypeCost
		return ret
	}
	return *o.CostByInstanceType
}

// GetCostByInstanceTypeOk returns a tuple with the CostByInstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostDataPerDate) GetCostByInstanceTypeOk() (*map[string]InstanceTypeCost, bool) {
	if o == nil || IsNil(o.CostByInstanceType) {
		return nil, false
	}
	return o.CostByInstanceType, true
}

// HasCostByInstanceType returns a boolean if a field has been set.
func (o *CostDataPerDate) HasCostByInstanceType() bool {
	if o != nil && !IsNil(o.CostByInstanceType) {
		return true
	}

	return false
}

// SetCostByInstanceType gets a reference to the given map[string]InstanceTypeCost and assigns it to the CostByInstanceType field.
func (o *CostDataPerDate) SetCostByInstanceType(v map[string]InstanceTypeCost) {
	o.CostByInstanceType = &v
}

// GetDate returns the Date field value
func (o *CostDataPerDate) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CostDataPerDate) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CostDataPerDate) SetDate(v time.Time) {
	o.Date = v
}

func (o CostDataPerDate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CostDataPerDate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cost"] = o.Cost
	if !IsNil(o.CostByInstanceType) {
		toSerialize["costByInstanceType"] = o.CostByInstanceType
	}
	toSerialize["date"] = o.Date

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CostDataPerDate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cost",
		"date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCostDataPerDate := _CostDataPerDate{}

	err = json.Unmarshal(data, &varCostDataPerDate)

	if err != nil {
		return err
	}

	*o = CostDataPerDate(varCostDataPerDate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cost")
		delete(additionalProperties, "costByInstanceType")
		delete(additionalProperties, "date")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCostDataPerDate struct {
	value *CostDataPerDate
	isSet bool
}

func (v NullableCostDataPerDate) Get() *CostDataPerDate {
	return v.value
}

func (v *NullableCostDataPerDate) Set(val *CostDataPerDate) {
	v.value = val
	v.isSet = true
}

func (v NullableCostDataPerDate) IsSet() bool {
	return v.isSet
}

func (v *NullableCostDataPerDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostDataPerDate(val *CostDataPerDate) *NullableCostDataPerDate {
	return &NullableCostDataPerDate{value: val, isSet: true}
}

func (v NullableCostDataPerDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostDataPerDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


