/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the PerUserCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PerUserCost{}

// PerUserCost struct for PerUserCost
type PerUserCost struct {
	Cost []CostDataPerDate `json:"cost"`
	// The email of the user
	Email string `json:"email"`
	InstancesCost []PerInstanceCost `json:"instancesCost,omitempty"`
	// ID of an Org
	OrgID string `json:"orgID"`
	// The name of the organization
	OrgName string `json:"orgName"`
	// The total cost of the user
	TotalCost float64 `json:"totalCost"`
	// The name of the user
	UserName string `json:"userName"`
	AdditionalProperties map[string]interface{}
}

type _PerUserCost PerUserCost

// NewPerUserCost instantiates a new PerUserCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerUserCost(cost []CostDataPerDate, email string, orgID string, orgName string, totalCost float64, userName string) *PerUserCost {
	this := PerUserCost{}
	this.Cost = cost
	this.Email = email
	this.OrgID = orgID
	this.OrgName = orgName
	this.TotalCost = totalCost
	this.UserName = userName
	return &this
}

// NewPerUserCostWithDefaults instantiates a new PerUserCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPerUserCostWithDefaults() *PerUserCost {
	this := PerUserCost{}
	return &this
}

// GetCost returns the Cost field value
func (o *PerUserCost) GetCost() []CostDataPerDate {
	if o == nil {
		var ret []CostDataPerDate
		return ret
	}

	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
func (o *PerUserCost) GetCostOk() ([]CostDataPerDate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost, true
}

// SetCost sets field value
func (o *PerUserCost) SetCost(v []CostDataPerDate) {
	o.Cost = v
}

// GetEmail returns the Email field value
func (o *PerUserCost) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *PerUserCost) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *PerUserCost) SetEmail(v string) {
	o.Email = v
}

// GetInstancesCost returns the InstancesCost field value if set, zero value otherwise.
func (o *PerUserCost) GetInstancesCost() []PerInstanceCost {
	if o == nil || IsNil(o.InstancesCost) {
		var ret []PerInstanceCost
		return ret
	}
	return o.InstancesCost
}

// GetInstancesCostOk returns a tuple with the InstancesCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerUserCost) GetInstancesCostOk() ([]PerInstanceCost, bool) {
	if o == nil || IsNil(o.InstancesCost) {
		return nil, false
	}
	return o.InstancesCost, true
}

// HasInstancesCost returns a boolean if a field has been set.
func (o *PerUserCost) HasInstancesCost() bool {
	if o != nil && !IsNil(o.InstancesCost) {
		return true
	}

	return false
}

// SetInstancesCost gets a reference to the given []PerInstanceCost and assigns it to the InstancesCost field.
func (o *PerUserCost) SetInstancesCost(v []PerInstanceCost) {
	o.InstancesCost = v
}

// GetOrgID returns the OrgID field value
func (o *PerUserCost) GetOrgID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgID
}

// GetOrgIDOk returns a tuple with the OrgID field value
// and a boolean to check if the value has been set.
func (o *PerUserCost) GetOrgIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgID, true
}

// SetOrgID sets field value
func (o *PerUserCost) SetOrgID(v string) {
	o.OrgID = v
}

// GetOrgName returns the OrgName field value
func (o *PerUserCost) GetOrgName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value
// and a boolean to check if the value has been set.
func (o *PerUserCost) GetOrgNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgName, true
}

// SetOrgName sets field value
func (o *PerUserCost) SetOrgName(v string) {
	o.OrgName = v
}

// GetTotalCost returns the TotalCost field value
func (o *PerUserCost) GetTotalCost() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value
// and a boolean to check if the value has been set.
func (o *PerUserCost) GetTotalCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCost, true
}

// SetTotalCost sets field value
func (o *PerUserCost) SetTotalCost(v float64) {
	o.TotalCost = v
}

// GetUserName returns the UserName field value
func (o *PerUserCost) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *PerUserCost) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *PerUserCost) SetUserName(v string) {
	o.UserName = v
}

func (o PerUserCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PerUserCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cost"] = o.Cost
	toSerialize["email"] = o.Email
	if !IsNil(o.InstancesCost) {
		toSerialize["instancesCost"] = o.InstancesCost
	}
	toSerialize["orgID"] = o.OrgID
	toSerialize["orgName"] = o.OrgName
	toSerialize["totalCost"] = o.TotalCost
	toSerialize["userName"] = o.UserName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PerUserCost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cost",
		"email",
		"orgID",
		"orgName",
		"totalCost",
		"userName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPerUserCost := _PerUserCost{}

	err = json.Unmarshal(data, &varPerUserCost)

	if err != nil {
		return err
	}

	*o = PerUserCost(varPerUserCost)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cost")
		delete(additionalProperties, "email")
		delete(additionalProperties, "instancesCost")
		delete(additionalProperties, "orgID")
		delete(additionalProperties, "orgName")
		delete(additionalProperties, "totalCost")
		delete(additionalProperties, "userName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePerUserCost struct {
	value *PerUserCost
	isSet bool
}

func (v NullablePerUserCost) Get() *PerUserCost {
	return v.value
}

func (v *NullablePerUserCost) Set(val *PerUserCost) {
	v.value = val
	v.isSet = true
}

func (v NullablePerUserCost) IsSet() bool {
	return v.isSet
}

func (v *NullablePerUserCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerUserCost(val *PerUserCost) *NullablePerUserCost {
	return &NullablePerUserCost{value: val, isSet: true}
}

func (v NullablePerUserCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerUserCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


