/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the DescribeUserCostResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeUserCostResult{}

// DescribeUserCostResult struct for DescribeUserCostResult
type DescribeUserCostResult struct {
	// The cost data for each user
	UserCosts *map[string]PerUserCost `json:"userCosts,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DescribeUserCostResult DescribeUserCostResult

// NewDescribeUserCostResult instantiates a new DescribeUserCostResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeUserCostResult() *DescribeUserCostResult {
	this := DescribeUserCostResult{}
	return &this
}

// NewDescribeUserCostResultWithDefaults instantiates a new DescribeUserCostResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeUserCostResultWithDefaults() *DescribeUserCostResult {
	this := DescribeUserCostResult{}
	return &this
}

// GetUserCosts returns the UserCosts field value if set, zero value otherwise.
func (o *DescribeUserCostResult) GetUserCosts() map[string]PerUserCost {
	if o == nil || IsNil(o.UserCosts) {
		var ret map[string]PerUserCost
		return ret
	}
	return *o.UserCosts
}

// GetUserCostsOk returns a tuple with the UserCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUserCostResult) GetUserCostsOk() (*map[string]PerUserCost, bool) {
	if o == nil || IsNil(o.UserCosts) {
		return nil, false
	}
	return o.UserCosts, true
}

// HasUserCosts returns a boolean if a field has been set.
func (o *DescribeUserCostResult) HasUserCosts() bool {
	if o != nil && !IsNil(o.UserCosts) {
		return true
	}

	return false
}

// SetUserCosts gets a reference to the given map[string]PerUserCost and assigns it to the UserCosts field.
func (o *DescribeUserCostResult) SetUserCosts(v map[string]PerUserCost) {
	o.UserCosts = &v
}

func (o DescribeUserCostResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeUserCostResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserCosts) {
		toSerialize["userCosts"] = o.UserCosts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DescribeUserCostResult) UnmarshalJSON(data []byte) (err error) {
	varDescribeUserCostResult := _DescribeUserCostResult{}

	err = json.Unmarshal(data, &varDescribeUserCostResult)

	if err != nil {
		return err
	}

	*o = DescribeUserCostResult(varDescribeUserCostResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "userCosts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDescribeUserCostResult struct {
	value *DescribeUserCostResult
	isSet bool
}

func (v NullableDescribeUserCostResult) Get() *DescribeUserCostResult {
	return v.value
}

func (v *NullableDescribeUserCostResult) Set(val *DescribeUserCostResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeUserCostResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeUserCostResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeUserCostResult(val *DescribeUserCostResult) *NullableDescribeUserCostResult {
	return &NullableDescribeUserCostResult{value: val, isSet: true}
}

func (v NullableDescribeUserCostResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeUserCostResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


