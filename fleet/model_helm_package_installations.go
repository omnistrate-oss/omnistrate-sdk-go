/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HelmPackageInstallations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmPackageInstallations{}

// HelmPackageInstallations struct for HelmPackageInstallations
type HelmPackageInstallations struct {
	HelmPackage HelmPackage `json:"helmPackage"`
	// The ID of the host cluster where the helm package is installed
	HostClusterID string `json:"hostClusterID"`
	// The status of the Helm package installation
	Status string `json:"status"`
}

type _HelmPackageInstallations HelmPackageInstallations

// NewHelmPackageInstallations instantiates a new HelmPackageInstallations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmPackageInstallations(helmPackage HelmPackage, hostClusterID string, status string) *HelmPackageInstallations {
	this := HelmPackageInstallations{}
	this.HelmPackage = helmPackage
	this.HostClusterID = hostClusterID
	this.Status = status
	return &this
}

// NewHelmPackageInstallationsWithDefaults instantiates a new HelmPackageInstallations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmPackageInstallationsWithDefaults() *HelmPackageInstallations {
	this := HelmPackageInstallations{}
	return &this
}

// GetHelmPackage returns the HelmPackage field value
func (o *HelmPackageInstallations) GetHelmPackage() HelmPackage {
	if o == nil {
		var ret HelmPackage
		return ret
	}

	return o.HelmPackage
}

// GetHelmPackageOk returns a tuple with the HelmPackage field value
// and a boolean to check if the value has been set.
func (o *HelmPackageInstallations) GetHelmPackageOk() (*HelmPackage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HelmPackage, true
}

// SetHelmPackage sets field value
func (o *HelmPackageInstallations) SetHelmPackage(v HelmPackage) {
	o.HelmPackage = v
}

// GetHostClusterID returns the HostClusterID field value
func (o *HelmPackageInstallations) GetHostClusterID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostClusterID
}

// GetHostClusterIDOk returns a tuple with the HostClusterID field value
// and a boolean to check if the value has been set.
func (o *HelmPackageInstallations) GetHostClusterIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostClusterID, true
}

// SetHostClusterID sets field value
func (o *HelmPackageInstallations) SetHostClusterID(v string) {
	o.HostClusterID = v
}

// GetStatus returns the Status field value
func (o *HelmPackageInstallations) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *HelmPackageInstallations) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *HelmPackageInstallations) SetStatus(v string) {
	o.Status = v
}

func (o HelmPackageInstallations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmPackageInstallations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["helmPackage"] = o.HelmPackage
	toSerialize["hostClusterID"] = o.HostClusterID
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *HelmPackageInstallations) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"helmPackage",
		"hostClusterID",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmPackageInstallations := _HelmPackageInstallations{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHelmPackageInstallations)

	if err != nil {
		return err
	}

	*o = HelmPackageInstallations(varHelmPackageInstallations)

	return err
}

type NullableHelmPackageInstallations struct {
	value *HelmPackageInstallations
	isSet bool
}

func (v NullableHelmPackageInstallations) Get() *HelmPackageInstallations {
	return v.value
}

func (v *NullableHelmPackageInstallations) Set(val *HelmPackageInstallations) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmPackageInstallations) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmPackageInstallations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmPackageInstallations(val *HelmPackageInstallations) *NullableHelmPackageInstallations {
	return &NullableHelmPackageInstallations{value: val, isSet: true}
}

func (v NullableHelmPackageInstallations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmPackageInstallations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


