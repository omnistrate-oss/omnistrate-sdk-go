/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the CloudProviderHealthSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudProviderHealthSummary{}

// CloudProviderHealthSummary struct for CloudProviderHealthSummary
type CloudProviderHealthSummary struct {
	// The cloud provider
	CloudProvider string `json:"cloudProvider"`
	// The number of instances currently deploying
	DeployingInstances int64 `json:"deployingInstances"`
	// The number of healthy instances in the cloud provider
	HealthyInstances int64 `json:"healthyInstances"`
	// The status message
	Message string `json:"message"`
	// The summary of health by region
	RegionalHealthSummary map[string]RegionalHealthSummary `json:"regionalHealthSummary"`
	// The status of the cloud provider
	Status string `json:"status"`
	// The total number of instances in the cloud provider
	TotalInstances int64 `json:"totalInstances"`
	// The number of unhealthy instances in the cloud provider
	UnhealthyInstances int64 `json:"unhealthyInstances"`
	AdditionalProperties map[string]interface{}
}

type _CloudProviderHealthSummary CloudProviderHealthSummary

// NewCloudProviderHealthSummary instantiates a new CloudProviderHealthSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudProviderHealthSummary(cloudProvider string, deployingInstances int64, healthyInstances int64, message string, regionalHealthSummary map[string]RegionalHealthSummary, status string, totalInstances int64, unhealthyInstances int64) *CloudProviderHealthSummary {
	this := CloudProviderHealthSummary{}
	this.CloudProvider = cloudProvider
	this.DeployingInstances = deployingInstances
	this.HealthyInstances = healthyInstances
	this.Message = message
	this.RegionalHealthSummary = regionalHealthSummary
	this.Status = status
	this.TotalInstances = totalInstances
	this.UnhealthyInstances = unhealthyInstances
	return &this
}

// NewCloudProviderHealthSummaryWithDefaults instantiates a new CloudProviderHealthSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudProviderHealthSummaryWithDefaults() *CloudProviderHealthSummary {
	this := CloudProviderHealthSummary{}
	return &this
}

// GetCloudProvider returns the CloudProvider field value
func (o *CloudProviderHealthSummary) GetCloudProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value
// and a boolean to check if the value has been set.
func (o *CloudProviderHealthSummary) GetCloudProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProvider, true
}

// SetCloudProvider sets field value
func (o *CloudProviderHealthSummary) SetCloudProvider(v string) {
	o.CloudProvider = v
}

// GetDeployingInstances returns the DeployingInstances field value
func (o *CloudProviderHealthSummary) GetDeployingInstances() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DeployingInstances
}

// GetDeployingInstancesOk returns a tuple with the DeployingInstances field value
// and a boolean to check if the value has been set.
func (o *CloudProviderHealthSummary) GetDeployingInstancesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployingInstances, true
}

// SetDeployingInstances sets field value
func (o *CloudProviderHealthSummary) SetDeployingInstances(v int64) {
	o.DeployingInstances = v
}

// GetHealthyInstances returns the HealthyInstances field value
func (o *CloudProviderHealthSummary) GetHealthyInstances() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.HealthyInstances
}

// GetHealthyInstancesOk returns a tuple with the HealthyInstances field value
// and a boolean to check if the value has been set.
func (o *CloudProviderHealthSummary) GetHealthyInstancesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HealthyInstances, true
}

// SetHealthyInstances sets field value
func (o *CloudProviderHealthSummary) SetHealthyInstances(v int64) {
	o.HealthyInstances = v
}

// GetMessage returns the Message field value
func (o *CloudProviderHealthSummary) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CloudProviderHealthSummary) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CloudProviderHealthSummary) SetMessage(v string) {
	o.Message = v
}

// GetRegionalHealthSummary returns the RegionalHealthSummary field value
func (o *CloudProviderHealthSummary) GetRegionalHealthSummary() map[string]RegionalHealthSummary {
	if o == nil {
		var ret map[string]RegionalHealthSummary
		return ret
	}

	return o.RegionalHealthSummary
}

// GetRegionalHealthSummaryOk returns a tuple with the RegionalHealthSummary field value
// and a boolean to check if the value has been set.
func (o *CloudProviderHealthSummary) GetRegionalHealthSummaryOk() (*map[string]RegionalHealthSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionalHealthSummary, true
}

// SetRegionalHealthSummary sets field value
func (o *CloudProviderHealthSummary) SetRegionalHealthSummary(v map[string]RegionalHealthSummary) {
	o.RegionalHealthSummary = v
}

// GetStatus returns the Status field value
func (o *CloudProviderHealthSummary) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CloudProviderHealthSummary) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CloudProviderHealthSummary) SetStatus(v string) {
	o.Status = v
}

// GetTotalInstances returns the TotalInstances field value
func (o *CloudProviderHealthSummary) GetTotalInstances() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalInstances
}

// GetTotalInstancesOk returns a tuple with the TotalInstances field value
// and a boolean to check if the value has been set.
func (o *CloudProviderHealthSummary) GetTotalInstancesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalInstances, true
}

// SetTotalInstances sets field value
func (o *CloudProviderHealthSummary) SetTotalInstances(v int64) {
	o.TotalInstances = v
}

// GetUnhealthyInstances returns the UnhealthyInstances field value
func (o *CloudProviderHealthSummary) GetUnhealthyInstances() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UnhealthyInstances
}

// GetUnhealthyInstancesOk returns a tuple with the UnhealthyInstances field value
// and a boolean to check if the value has been set.
func (o *CloudProviderHealthSummary) GetUnhealthyInstancesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnhealthyInstances, true
}

// SetUnhealthyInstances sets field value
func (o *CloudProviderHealthSummary) SetUnhealthyInstances(v int64) {
	o.UnhealthyInstances = v
}

func (o CloudProviderHealthSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudProviderHealthSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloudProvider"] = o.CloudProvider
	toSerialize["deployingInstances"] = o.DeployingInstances
	toSerialize["healthyInstances"] = o.HealthyInstances
	toSerialize["message"] = o.Message
	toSerialize["regionalHealthSummary"] = o.RegionalHealthSummary
	toSerialize["status"] = o.Status
	toSerialize["totalInstances"] = o.TotalInstances
	toSerialize["unhealthyInstances"] = o.UnhealthyInstances

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CloudProviderHealthSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloudProvider",
		"deployingInstances",
		"healthyInstances",
		"message",
		"regionalHealthSummary",
		"status",
		"totalInstances",
		"unhealthyInstances",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloudProviderHealthSummary := _CloudProviderHealthSummary{}

	err = json.Unmarshal(data, &varCloudProviderHealthSummary)

	if err != nil {
		return err
	}

	*o = CloudProviderHealthSummary(varCloudProviderHealthSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cloudProvider")
		delete(additionalProperties, "deployingInstances")
		delete(additionalProperties, "healthyInstances")
		delete(additionalProperties, "message")
		delete(additionalProperties, "regionalHealthSummary")
		delete(additionalProperties, "status")
		delete(additionalProperties, "totalInstances")
		delete(additionalProperties, "unhealthyInstances")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCloudProviderHealthSummary struct {
	value *CloudProviderHealthSummary
	isSet bool
}

func (v NullableCloudProviderHealthSummary) Get() *CloudProviderHealthSummary {
	return v.value
}

func (v *NullableCloudProviderHealthSummary) Set(val *CloudProviderHealthSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudProviderHealthSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudProviderHealthSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudProviderHealthSummary(val *CloudProviderHealthSummary) *NullableCloudProviderHealthSummary {
	return &NullableCloudProviderHealthSummary{value: val, isSet: true}
}

func (v NullableCloudProviderHealthSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudProviderHealthSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


