/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the ManageUpgradePathLifecycleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManageUpgradePathLifecycleRequest{}

// ManageUpgradePathLifecycleRequest struct for ManageUpgradePathLifecycleRequest
type ManageUpgradePathLifecycleRequest struct {
	// The action to perform on an ongoing resource workflow
	Action string `json:"action"`
	// The action payload to perform on the upgrade path.
	ActionPayload map[string]interface{} `json:"actionPayload,omitempty"`
	// ID of a Product Tier
	ProductTierId string `json:"productTierId"`
	// ID of a Service
	ServiceId string `json:"serviceId"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	// ID of an Upgrade Path
	UpgradePathId string `json:"upgradePathId"`
	AdditionalProperties map[string]interface{}
}

type _ManageUpgradePathLifecycleRequest ManageUpgradePathLifecycleRequest

// NewManageUpgradePathLifecycleRequest instantiates a new ManageUpgradePathLifecycleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManageUpgradePathLifecycleRequest(action string, productTierId string, serviceId string, token string, upgradePathId string) *ManageUpgradePathLifecycleRequest {
	this := ManageUpgradePathLifecycleRequest{}
	this.Action = action
	this.ProductTierId = productTierId
	this.ServiceId = serviceId
	this.Token = token
	this.UpgradePathId = upgradePathId
	return &this
}

// NewManageUpgradePathLifecycleRequestWithDefaults instantiates a new ManageUpgradePathLifecycleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManageUpgradePathLifecycleRequestWithDefaults() *ManageUpgradePathLifecycleRequest {
	this := ManageUpgradePathLifecycleRequest{}
	return &this
}

// GetAction returns the Action field value
func (o *ManageUpgradePathLifecycleRequest) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ManageUpgradePathLifecycleRequest) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ManageUpgradePathLifecycleRequest) SetAction(v string) {
	o.Action = v
}

// GetActionPayload returns the ActionPayload field value if set, zero value otherwise.
func (o *ManageUpgradePathLifecycleRequest) GetActionPayload() map[string]interface{} {
	if o == nil || IsNil(o.ActionPayload) {
		var ret map[string]interface{}
		return ret
	}
	return o.ActionPayload
}

// GetActionPayloadOk returns a tuple with the ActionPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageUpgradePathLifecycleRequest) GetActionPayloadOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ActionPayload) {
		return map[string]interface{}{}, false
	}
	return o.ActionPayload, true
}

// HasActionPayload returns a boolean if a field has been set.
func (o *ManageUpgradePathLifecycleRequest) HasActionPayload() bool {
	if o != nil && !IsNil(o.ActionPayload) {
		return true
	}

	return false
}

// SetActionPayload gets a reference to the given map[string]interface{} and assigns it to the ActionPayload field.
func (o *ManageUpgradePathLifecycleRequest) SetActionPayload(v map[string]interface{}) {
	o.ActionPayload = v
}

// GetProductTierId returns the ProductTierId field value
func (o *ManageUpgradePathLifecycleRequest) GetProductTierId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value
// and a boolean to check if the value has been set.
func (o *ManageUpgradePathLifecycleRequest) GetProductTierIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTierId, true
}

// SetProductTierId sets field value
func (o *ManageUpgradePathLifecycleRequest) SetProductTierId(v string) {
	o.ProductTierId = v
}

// GetServiceId returns the ServiceId field value
func (o *ManageUpgradePathLifecycleRequest) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *ManageUpgradePathLifecycleRequest) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *ManageUpgradePathLifecycleRequest) SetServiceId(v string) {
	o.ServiceId = v
}

// GetToken returns the Token field value
func (o *ManageUpgradePathLifecycleRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *ManageUpgradePathLifecycleRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *ManageUpgradePathLifecycleRequest) SetToken(v string) {
	o.Token = v
}

// GetUpgradePathId returns the UpgradePathId field value
func (o *ManageUpgradePathLifecycleRequest) GetUpgradePathId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpgradePathId
}

// GetUpgradePathIdOk returns a tuple with the UpgradePathId field value
// and a boolean to check if the value has been set.
func (o *ManageUpgradePathLifecycleRequest) GetUpgradePathIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpgradePathId, true
}

// SetUpgradePathId sets field value
func (o *ManageUpgradePathLifecycleRequest) SetUpgradePathId(v string) {
	o.UpgradePathId = v
}

func (o ManageUpgradePathLifecycleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManageUpgradePathLifecycleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.ActionPayload) {
		toSerialize["actionPayload"] = o.ActionPayload
	}
	toSerialize["productTierId"] = o.ProductTierId
	toSerialize["serviceId"] = o.ServiceId
	toSerialize["token"] = o.Token
	toSerialize["upgradePathId"] = o.UpgradePathId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManageUpgradePathLifecycleRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"productTierId",
		"serviceId",
		"token",
		"upgradePathId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManageUpgradePathLifecycleRequest := _ManageUpgradePathLifecycleRequest{}

	err = json.Unmarshal(data, &varManageUpgradePathLifecycleRequest)

	if err != nil {
		return err
	}

	*o = ManageUpgradePathLifecycleRequest(varManageUpgradePathLifecycleRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "actionPayload")
		delete(additionalProperties, "productTierId")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "token")
		delete(additionalProperties, "upgradePathId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManageUpgradePathLifecycleRequest struct {
	value *ManageUpgradePathLifecycleRequest
	isSet bool
}

func (v NullableManageUpgradePathLifecycleRequest) Get() *ManageUpgradePathLifecycleRequest {
	return v.value
}

func (v *NullableManageUpgradePathLifecycleRequest) Set(val *ManageUpgradePathLifecycleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableManageUpgradePathLifecycleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableManageUpgradePathLifecycleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManageUpgradePathLifecycleRequest(val *ManageUpgradePathLifecycleRequest) *NullableManageUpgradePathLifecycleRequest {
	return &NullableManageUpgradePathLifecycleRequest{value: val, isSet: true}
}

func (v NullableManageUpgradePathLifecycleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManageUpgradePathLifecycleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


