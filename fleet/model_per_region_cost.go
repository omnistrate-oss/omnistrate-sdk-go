/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the PerRegionCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PerRegionCost{}

// PerRegionCost struct for PerRegionCost
type PerRegionCost struct {
	// Name of the Infra Provider
	CloudProviderName string `json:"cloudProviderName"`
	Cost []CostDataPerDate `json:"cost"`
	// The name of the region
	RegionName string `json:"regionName"`
	// The total cost of the fleet in the region
	TotalCost float64 `json:"totalCost"`
	AdditionalProperties map[string]interface{}
}

type _PerRegionCost PerRegionCost

// NewPerRegionCost instantiates a new PerRegionCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerRegionCost(cloudProviderName string, cost []CostDataPerDate, regionName string, totalCost float64) *PerRegionCost {
	this := PerRegionCost{}
	this.CloudProviderName = cloudProviderName
	this.Cost = cost
	this.RegionName = regionName
	this.TotalCost = totalCost
	return &this
}

// NewPerRegionCostWithDefaults instantiates a new PerRegionCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPerRegionCostWithDefaults() *PerRegionCost {
	this := PerRegionCost{}
	return &this
}

// GetCloudProviderName returns the CloudProviderName field value
func (o *PerRegionCost) GetCloudProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProviderName
}

// GetCloudProviderNameOk returns a tuple with the CloudProviderName field value
// and a boolean to check if the value has been set.
func (o *PerRegionCost) GetCloudProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProviderName, true
}

// SetCloudProviderName sets field value
func (o *PerRegionCost) SetCloudProviderName(v string) {
	o.CloudProviderName = v
}

// GetCost returns the Cost field value
func (o *PerRegionCost) GetCost() []CostDataPerDate {
	if o == nil {
		var ret []CostDataPerDate
		return ret
	}

	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
func (o *PerRegionCost) GetCostOk() ([]CostDataPerDate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost, true
}

// SetCost sets field value
func (o *PerRegionCost) SetCost(v []CostDataPerDate) {
	o.Cost = v
}

// GetRegionName returns the RegionName field value
func (o *PerRegionCost) GetRegionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value
// and a boolean to check if the value has been set.
func (o *PerRegionCost) GetRegionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionName, true
}

// SetRegionName sets field value
func (o *PerRegionCost) SetRegionName(v string) {
	o.RegionName = v
}

// GetTotalCost returns the TotalCost field value
func (o *PerRegionCost) GetTotalCost() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value
// and a boolean to check if the value has been set.
func (o *PerRegionCost) GetTotalCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCost, true
}

// SetTotalCost sets field value
func (o *PerRegionCost) SetTotalCost(v float64) {
	o.TotalCost = v
}

func (o PerRegionCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PerRegionCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloudProviderName"] = o.CloudProviderName
	toSerialize["cost"] = o.Cost
	toSerialize["regionName"] = o.RegionName
	toSerialize["totalCost"] = o.TotalCost

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PerRegionCost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloudProviderName",
		"cost",
		"regionName",
		"totalCost",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPerRegionCost := _PerRegionCost{}

	err = json.Unmarshal(data, &varPerRegionCost)

	if err != nil {
		return err
	}

	*o = PerRegionCost(varPerRegionCost)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cloudProviderName")
		delete(additionalProperties, "cost")
		delete(additionalProperties, "regionName")
		delete(additionalProperties, "totalCost")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePerRegionCost struct {
	value *PerRegionCost
	isSet bool
}

func (v NullablePerRegionCost) Get() *PerRegionCost {
	return v.value
}

func (v *NullablePerRegionCost) Set(val *PerRegionCost) {
	v.value = val
	v.isSet = true
}

func (v NullablePerRegionCost) IsSet() bool {
	return v.isSet
}

func (v *NullablePerRegionCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerRegionCost(val *PerRegionCost) *NullablePerRegionCost {
	return &NullablePerRegionCost{value: val, isSet: true}
}

func (v NullablePerRegionCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerRegionCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


