/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the IntegrationStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationStatus{}

// IntegrationStatus struct for IntegrationStatus
type IntegrationStatus struct {
	// Additional URL relevant for integration (optional and integration specific)
	Url *string `json:"Url,omitempty"`
	// The health status of the integration
	HealthStatus *string `json:"healthStatus,omitempty"`
	// The name of the integration or feature
	IntegrationType *string `json:"integrationType,omitempty"`
	// Additional details regarding integration health
	Message *string `json:"message,omitempty"`
	// Scope of the feature/integration
	Scope *string `json:"scope,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IntegrationStatus IntegrationStatus

// NewIntegrationStatus instantiates a new IntegrationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationStatus() *IntegrationStatus {
	this := IntegrationStatus{}
	return &this
}

// NewIntegrationStatusWithDefaults instantiates a new IntegrationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationStatusWithDefaults() *IntegrationStatus {
	this := IntegrationStatus{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *IntegrationStatus) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStatus) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *IntegrationStatus) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *IntegrationStatus) SetUrl(v string) {
	o.Url = &v
}

// GetHealthStatus returns the HealthStatus field value if set, zero value otherwise.
func (o *IntegrationStatus) GetHealthStatus() string {
	if o == nil || IsNil(o.HealthStatus) {
		var ret string
		return ret
	}
	return *o.HealthStatus
}

// GetHealthStatusOk returns a tuple with the HealthStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStatus) GetHealthStatusOk() (*string, bool) {
	if o == nil || IsNil(o.HealthStatus) {
		return nil, false
	}
	return o.HealthStatus, true
}

// HasHealthStatus returns a boolean if a field has been set.
func (o *IntegrationStatus) HasHealthStatus() bool {
	if o != nil && !IsNil(o.HealthStatus) {
		return true
	}

	return false
}

// SetHealthStatus gets a reference to the given string and assigns it to the HealthStatus field.
func (o *IntegrationStatus) SetHealthStatus(v string) {
	o.HealthStatus = &v
}

// GetIntegrationType returns the IntegrationType field value if set, zero value otherwise.
func (o *IntegrationStatus) GetIntegrationType() string {
	if o == nil || IsNil(o.IntegrationType) {
		var ret string
		return ret
	}
	return *o.IntegrationType
}

// GetIntegrationTypeOk returns a tuple with the IntegrationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStatus) GetIntegrationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationType) {
		return nil, false
	}
	return o.IntegrationType, true
}

// HasIntegrationType returns a boolean if a field has been set.
func (o *IntegrationStatus) HasIntegrationType() bool {
	if o != nil && !IsNil(o.IntegrationType) {
		return true
	}

	return false
}

// SetIntegrationType gets a reference to the given string and assigns it to the IntegrationType field.
func (o *IntegrationStatus) SetIntegrationType(v string) {
	o.IntegrationType = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *IntegrationStatus) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStatus) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *IntegrationStatus) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *IntegrationStatus) SetMessage(v string) {
	o.Message = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *IntegrationStatus) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStatus) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *IntegrationStatus) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *IntegrationStatus) SetScope(v string) {
	o.Scope = &v
}

func (o IntegrationStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["Url"] = o.Url
	}
	if !IsNil(o.HealthStatus) {
		toSerialize["healthStatus"] = o.HealthStatus
	}
	if !IsNil(o.IntegrationType) {
		toSerialize["integrationType"] = o.IntegrationType
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IntegrationStatus) UnmarshalJSON(data []byte) (err error) {
	varIntegrationStatus := _IntegrationStatus{}

	err = json.Unmarshal(data, &varIntegrationStatus)

	if err != nil {
		return err
	}

	*o = IntegrationStatus(varIntegrationStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "Url")
		delete(additionalProperties, "healthStatus")
		delete(additionalProperties, "integrationType")
		delete(additionalProperties, "message")
		delete(additionalProperties, "scope")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIntegrationStatus struct {
	value *IntegrationStatus
	isSet bool
}

func (v NullableIntegrationStatus) Get() *IntegrationStatus {
	return v.value
}

func (v *NullableIntegrationStatus) Set(val *IntegrationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationStatus(val *IntegrationStatus) *NullableIntegrationStatus {
	return &NullableIntegrationStatus{value: val, isSet: true}
}

func (v NullableIntegrationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


