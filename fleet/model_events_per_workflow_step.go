/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the EventsPerWorkflowStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsPerWorkflowStep{}

// EventsPerWorkflowStep struct for EventsPerWorkflowStep
type EventsPerWorkflowStep struct {
	// List of events for the step
	Events []WorkflowEvent `json:"events"`
	// The name of the workflow step
	StepName string `json:"stepName"`
	AdditionalProperties map[string]interface{}
}

type _EventsPerWorkflowStep EventsPerWorkflowStep

// NewEventsPerWorkflowStep instantiates a new EventsPerWorkflowStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsPerWorkflowStep(events []WorkflowEvent, stepName string) *EventsPerWorkflowStep {
	this := EventsPerWorkflowStep{}
	this.Events = events
	this.StepName = stepName
	return &this
}

// NewEventsPerWorkflowStepWithDefaults instantiates a new EventsPerWorkflowStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsPerWorkflowStepWithDefaults() *EventsPerWorkflowStep {
	this := EventsPerWorkflowStep{}
	return &this
}

// GetEvents returns the Events field value
func (o *EventsPerWorkflowStep) GetEvents() []WorkflowEvent {
	if o == nil {
		var ret []WorkflowEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *EventsPerWorkflowStep) GetEventsOk() ([]WorkflowEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *EventsPerWorkflowStep) SetEvents(v []WorkflowEvent) {
	o.Events = v
}

// GetStepName returns the StepName field value
func (o *EventsPerWorkflowStep) GetStepName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StepName
}

// GetStepNameOk returns a tuple with the StepName field value
// and a boolean to check if the value has been set.
func (o *EventsPerWorkflowStep) GetStepNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepName, true
}

// SetStepName sets field value
func (o *EventsPerWorkflowStep) SetStepName(v string) {
	o.StepName = v
}

func (o EventsPerWorkflowStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsPerWorkflowStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	toSerialize["stepName"] = o.StepName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventsPerWorkflowStep) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"events",
		"stepName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventsPerWorkflowStep := _EventsPerWorkflowStep{}

	err = json.Unmarshal(data, &varEventsPerWorkflowStep)

	if err != nil {
		return err
	}

	*o = EventsPerWorkflowStep(varEventsPerWorkflowStep)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "events")
		delete(additionalProperties, "stepName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventsPerWorkflowStep struct {
	value *EventsPerWorkflowStep
	isSet bool
}

func (v NullableEventsPerWorkflowStep) Get() *EventsPerWorkflowStep {
	return v.value
}

func (v *NullableEventsPerWorkflowStep) Set(val *EventsPerWorkflowStep) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsPerWorkflowStep) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsPerWorkflowStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsPerWorkflowStep(val *EventsPerWorkflowStep) *NullableEventsPerWorkflowStep {
	return &NullableEventsPerWorkflowStep{value: val, isSet: true}
}

func (v NullableEventsPerWorkflowStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsPerWorkflowStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


