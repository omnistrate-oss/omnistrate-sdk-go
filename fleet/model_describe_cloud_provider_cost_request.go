/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the DescribeCloudProviderCostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeCloudProviderCostRequest{}

// DescribeCloudProviderCostRequest struct for DescribeCloudProviderCostRequest
type DescribeCloudProviderCostRequest struct {
	// End time of the window in RFC 3339 format. If omitted, the filter is open-ended at the start.
	EndDate time.Time `json:"endDate"`
	// The type of service environment
	EnvironmentType string `json:"environmentType"`
	// The cloud provider IDs to exclude from the cost data
	ExcludeCloudProviderIDs *string `json:"excludeCloudProviderIDs,omitempty"`
	// The frequency of the cost data
	Frequency string `json:"frequency"`
	// The cloud provider IDs to include in the cost data
	IncludeCloudProviderIDs *string `json:"includeCloudProviderIDs,omitempty"`
	// Start time of the window in RFC 3339 format. If omitted, the filter is open-ended at the start.
	StartDate time.Time `json:"startDate"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _DescribeCloudProviderCostRequest DescribeCloudProviderCostRequest

// NewDescribeCloudProviderCostRequest instantiates a new DescribeCloudProviderCostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeCloudProviderCostRequest(endDate time.Time, environmentType string, frequency string, startDate time.Time, token string) *DescribeCloudProviderCostRequest {
	this := DescribeCloudProviderCostRequest{}
	this.EndDate = endDate
	this.EnvironmentType = environmentType
	this.Frequency = frequency
	this.StartDate = startDate
	this.Token = token
	return &this
}

// NewDescribeCloudProviderCostRequestWithDefaults instantiates a new DescribeCloudProviderCostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeCloudProviderCostRequestWithDefaults() *DescribeCloudProviderCostRequest {
	this := DescribeCloudProviderCostRequest{}
	return &this
}

// GetEndDate returns the EndDate field value
func (o *DescribeCloudProviderCostRequest) GetEndDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *DescribeCloudProviderCostRequest) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *DescribeCloudProviderCostRequest) SetEndDate(v time.Time) {
	o.EndDate = v
}

// GetEnvironmentType returns the EnvironmentType field value
func (o *DescribeCloudProviderCostRequest) GetEnvironmentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentType
}

// GetEnvironmentTypeOk returns a tuple with the EnvironmentType field value
// and a boolean to check if the value has been set.
func (o *DescribeCloudProviderCostRequest) GetEnvironmentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentType, true
}

// SetEnvironmentType sets field value
func (o *DescribeCloudProviderCostRequest) SetEnvironmentType(v string) {
	o.EnvironmentType = v
}

// GetExcludeCloudProviderIDs returns the ExcludeCloudProviderIDs field value if set, zero value otherwise.
func (o *DescribeCloudProviderCostRequest) GetExcludeCloudProviderIDs() string {
	if o == nil || IsNil(o.ExcludeCloudProviderIDs) {
		var ret string
		return ret
	}
	return *o.ExcludeCloudProviderIDs
}

// GetExcludeCloudProviderIDsOk returns a tuple with the ExcludeCloudProviderIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeCloudProviderCostRequest) GetExcludeCloudProviderIDsOk() (*string, bool) {
	if o == nil || IsNil(o.ExcludeCloudProviderIDs) {
		return nil, false
	}
	return o.ExcludeCloudProviderIDs, true
}

// HasExcludeCloudProviderIDs returns a boolean if a field has been set.
func (o *DescribeCloudProviderCostRequest) HasExcludeCloudProviderIDs() bool {
	if o != nil && !IsNil(o.ExcludeCloudProviderIDs) {
		return true
	}

	return false
}

// SetExcludeCloudProviderIDs gets a reference to the given string and assigns it to the ExcludeCloudProviderIDs field.
func (o *DescribeCloudProviderCostRequest) SetExcludeCloudProviderIDs(v string) {
	o.ExcludeCloudProviderIDs = &v
}

// GetFrequency returns the Frequency field value
func (o *DescribeCloudProviderCostRequest) GetFrequency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
func (o *DescribeCloudProviderCostRequest) GetFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frequency, true
}

// SetFrequency sets field value
func (o *DescribeCloudProviderCostRequest) SetFrequency(v string) {
	o.Frequency = v
}

// GetIncludeCloudProviderIDs returns the IncludeCloudProviderIDs field value if set, zero value otherwise.
func (o *DescribeCloudProviderCostRequest) GetIncludeCloudProviderIDs() string {
	if o == nil || IsNil(o.IncludeCloudProviderIDs) {
		var ret string
		return ret
	}
	return *o.IncludeCloudProviderIDs
}

// GetIncludeCloudProviderIDsOk returns a tuple with the IncludeCloudProviderIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeCloudProviderCostRequest) GetIncludeCloudProviderIDsOk() (*string, bool) {
	if o == nil || IsNil(o.IncludeCloudProviderIDs) {
		return nil, false
	}
	return o.IncludeCloudProviderIDs, true
}

// HasIncludeCloudProviderIDs returns a boolean if a field has been set.
func (o *DescribeCloudProviderCostRequest) HasIncludeCloudProviderIDs() bool {
	if o != nil && !IsNil(o.IncludeCloudProviderIDs) {
		return true
	}

	return false
}

// SetIncludeCloudProviderIDs gets a reference to the given string and assigns it to the IncludeCloudProviderIDs field.
func (o *DescribeCloudProviderCostRequest) SetIncludeCloudProviderIDs(v string) {
	o.IncludeCloudProviderIDs = &v
}

// GetStartDate returns the StartDate field value
func (o *DescribeCloudProviderCostRequest) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *DescribeCloudProviderCostRequest) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *DescribeCloudProviderCostRequest) SetStartDate(v time.Time) {
	o.StartDate = v
}

// GetToken returns the Token field value
func (o *DescribeCloudProviderCostRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *DescribeCloudProviderCostRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *DescribeCloudProviderCostRequest) SetToken(v string) {
	o.Token = v
}

func (o DescribeCloudProviderCostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeCloudProviderCostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endDate"] = o.EndDate
	toSerialize["environmentType"] = o.EnvironmentType
	if !IsNil(o.ExcludeCloudProviderIDs) {
		toSerialize["excludeCloudProviderIDs"] = o.ExcludeCloudProviderIDs
	}
	toSerialize["frequency"] = o.Frequency
	if !IsNil(o.IncludeCloudProviderIDs) {
		toSerialize["includeCloudProviderIDs"] = o.IncludeCloudProviderIDs
	}
	toSerialize["startDate"] = o.StartDate
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DescribeCloudProviderCostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endDate",
		"environmentType",
		"frequency",
		"startDate",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeCloudProviderCostRequest := _DescribeCloudProviderCostRequest{}

	err = json.Unmarshal(data, &varDescribeCloudProviderCostRequest)

	if err != nil {
		return err
	}

	*o = DescribeCloudProviderCostRequest(varDescribeCloudProviderCostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "endDate")
		delete(additionalProperties, "environmentType")
		delete(additionalProperties, "excludeCloudProviderIDs")
		delete(additionalProperties, "frequency")
		delete(additionalProperties, "includeCloudProviderIDs")
		delete(additionalProperties, "startDate")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDescribeCloudProviderCostRequest struct {
	value *DescribeCloudProviderCostRequest
	isSet bool
}

func (v NullableDescribeCloudProviderCostRequest) Get() *DescribeCloudProviderCostRequest {
	return v.value
}

func (v *NullableDescribeCloudProviderCostRequest) Set(val *DescribeCloudProviderCostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeCloudProviderCostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeCloudProviderCostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeCloudProviderCostRequest(val *DescribeCloudProviderCostRequest) *NullableDescribeCloudProviderCostRequest {
	return &NullableDescribeCloudProviderCostRequest{value: val, isSet: true}
}

func (v NullableDescribeCloudProviderCostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeCloudProviderCostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


