/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the ListEligibleInstancesPerUpgradeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListEligibleInstancesPerUpgradeRequest{}

// ListEligibleInstancesPerUpgradeRequest struct for ListEligibleInstancesPerUpgradeRequest
type ListEligibleInstancesPerUpgradeRequest struct {
	// The next token to use for pagination.
	NextPageToken *string `json:"nextPageToken,omitempty"`
	// ID of a Product Tier
	ProductTierId string `json:"productTierId"`
	// ID of a Service
	ServiceId string `json:"serviceId"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	// ID of an Upgrade Path
	UpgradePathId string `json:"upgradePathId"`
	AdditionalProperties map[string]interface{}
}

type _ListEligibleInstancesPerUpgradeRequest ListEligibleInstancesPerUpgradeRequest

// NewListEligibleInstancesPerUpgradeRequest instantiates a new ListEligibleInstancesPerUpgradeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListEligibleInstancesPerUpgradeRequest(productTierId string, serviceId string, token string, upgradePathId string) *ListEligibleInstancesPerUpgradeRequest {
	this := ListEligibleInstancesPerUpgradeRequest{}
	this.ProductTierId = productTierId
	this.ServiceId = serviceId
	this.Token = token
	this.UpgradePathId = upgradePathId
	return &this
}

// NewListEligibleInstancesPerUpgradeRequestWithDefaults instantiates a new ListEligibleInstancesPerUpgradeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListEligibleInstancesPerUpgradeRequestWithDefaults() *ListEligibleInstancesPerUpgradeRequest {
	this := ListEligibleInstancesPerUpgradeRequest{}
	return &this
}

// GetNextPageToken returns the NextPageToken field value if set, zero value otherwise.
func (o *ListEligibleInstancesPerUpgradeRequest) GetNextPageToken() string {
	if o == nil || IsNil(o.NextPageToken) {
		var ret string
		return ret
	}
	return *o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListEligibleInstancesPerUpgradeRequest) GetNextPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageToken) {
		return nil, false
	}
	return o.NextPageToken, true
}

// HasNextPageToken returns a boolean if a field has been set.
func (o *ListEligibleInstancesPerUpgradeRequest) HasNextPageToken() bool {
	if o != nil && !IsNil(o.NextPageToken) {
		return true
	}

	return false
}

// SetNextPageToken gets a reference to the given string and assigns it to the NextPageToken field.
func (o *ListEligibleInstancesPerUpgradeRequest) SetNextPageToken(v string) {
	o.NextPageToken = &v
}

// GetProductTierId returns the ProductTierId field value
func (o *ListEligibleInstancesPerUpgradeRequest) GetProductTierId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value
// and a boolean to check if the value has been set.
func (o *ListEligibleInstancesPerUpgradeRequest) GetProductTierIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTierId, true
}

// SetProductTierId sets field value
func (o *ListEligibleInstancesPerUpgradeRequest) SetProductTierId(v string) {
	o.ProductTierId = v
}

// GetServiceId returns the ServiceId field value
func (o *ListEligibleInstancesPerUpgradeRequest) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *ListEligibleInstancesPerUpgradeRequest) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *ListEligibleInstancesPerUpgradeRequest) SetServiceId(v string) {
	o.ServiceId = v
}

// GetToken returns the Token field value
func (o *ListEligibleInstancesPerUpgradeRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *ListEligibleInstancesPerUpgradeRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *ListEligibleInstancesPerUpgradeRequest) SetToken(v string) {
	o.Token = v
}

// GetUpgradePathId returns the UpgradePathId field value
func (o *ListEligibleInstancesPerUpgradeRequest) GetUpgradePathId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpgradePathId
}

// GetUpgradePathIdOk returns a tuple with the UpgradePathId field value
// and a boolean to check if the value has been set.
func (o *ListEligibleInstancesPerUpgradeRequest) GetUpgradePathIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpgradePathId, true
}

// SetUpgradePathId sets field value
func (o *ListEligibleInstancesPerUpgradeRequest) SetUpgradePathId(v string) {
	o.UpgradePathId = v
}

func (o ListEligibleInstancesPerUpgradeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListEligibleInstancesPerUpgradeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextPageToken) {
		toSerialize["nextPageToken"] = o.NextPageToken
	}
	toSerialize["productTierId"] = o.ProductTierId
	toSerialize["serviceId"] = o.ServiceId
	toSerialize["token"] = o.Token
	toSerialize["upgradePathId"] = o.UpgradePathId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListEligibleInstancesPerUpgradeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"productTierId",
		"serviceId",
		"token",
		"upgradePathId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListEligibleInstancesPerUpgradeRequest := _ListEligibleInstancesPerUpgradeRequest{}

	err = json.Unmarshal(data, &varListEligibleInstancesPerUpgradeRequest)

	if err != nil {
		return err
	}

	*o = ListEligibleInstancesPerUpgradeRequest(varListEligibleInstancesPerUpgradeRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "nextPageToken")
		delete(additionalProperties, "productTierId")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "token")
		delete(additionalProperties, "upgradePathId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListEligibleInstancesPerUpgradeRequest struct {
	value *ListEligibleInstancesPerUpgradeRequest
	isSet bool
}

func (v NullableListEligibleInstancesPerUpgradeRequest) Get() *ListEligibleInstancesPerUpgradeRequest {
	return v.value
}

func (v *NullableListEligibleInstancesPerUpgradeRequest) Set(val *ListEligibleInstancesPerUpgradeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableListEligibleInstancesPerUpgradeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableListEligibleInstancesPerUpgradeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListEligibleInstancesPerUpgradeRequest(val *ListEligibleInstancesPerUpgradeRequest) *NullableListEligibleInstancesPerUpgradeRequest {
	return &NullableListEligibleInstancesPerUpgradeRequest{value: val, isSet: true}
}

func (v NullableListEligibleInstancesPerUpgradeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListEligibleInstancesPerUpgradeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


