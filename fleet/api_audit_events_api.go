/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
	"reflect"
)


type AuditEventsApiAPI interface {

	/*
	AuditEventsApiAuditEvents AuditEvents audit-events-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAuditEventsApiAuditEventsRequest
	*/
	AuditEventsApiAuditEvents(ctx context.Context) ApiAuditEventsApiAuditEventsRequest

	// AuditEventsApiAuditEventsExecute executes the request
	//  @return FleetAuditEventsResult
	AuditEventsApiAuditEventsExecute(r ApiAuditEventsApiAuditEventsRequest) (*FleetAuditEventsResult, *http.Response, error)
}

// AuditEventsApiAPIService AuditEventsApiAPI service
type AuditEventsApiAPIService service

type ApiAuditEventsApiAuditEventsRequest struct {
	ctx context.Context
	ApiService AuditEventsApiAPI
	serviceID *string
	environmentType *string
	eventSourceTypes *[]string
	instanceID *string
	productTierID *string
	nextPageToken *string
	pageSize *int64
	startDate *time.Time
	endDate *time.Time
}

// The service ID to list events for
func (r ApiAuditEventsApiAuditEventsRequest) ServiceID(serviceID string) ApiAuditEventsApiAuditEventsRequest {
	r.serviceID = &serviceID
	return r
}

func (r ApiAuditEventsApiAuditEventsRequest) EnvironmentType(environmentType string) ApiAuditEventsApiAuditEventsRequest {
	r.environmentType = &environmentType
	return r
}

// The event types to filter by
func (r ApiAuditEventsApiAuditEventsRequest) EventSourceTypes(eventSourceTypes []string) ApiAuditEventsApiAuditEventsRequest {
	r.eventSourceTypes = &eventSourceTypes
	return r
}

// The instance ID to list events for
func (r ApiAuditEventsApiAuditEventsRequest) InstanceID(instanceID string) ApiAuditEventsApiAuditEventsRequest {
	r.instanceID = &instanceID
	return r
}

func (r ApiAuditEventsApiAuditEventsRequest) ProductTierID(productTierID string) ApiAuditEventsApiAuditEventsRequest {
	r.productTierID = &productTierID
	return r
}

// The next token to use for pagination
func (r ApiAuditEventsApiAuditEventsRequest) NextPageToken(nextPageToken string) ApiAuditEventsApiAuditEventsRequest {
	r.nextPageToken = &nextPageToken
	return r
}

// The number of events to return per page
func (r ApiAuditEventsApiAuditEventsRequest) PageSize(pageSize int64) ApiAuditEventsApiAuditEventsRequest {
	r.pageSize = &pageSize
	return r
}

// Start date of the events
func (r ApiAuditEventsApiAuditEventsRequest) StartDate(startDate time.Time) ApiAuditEventsApiAuditEventsRequest {
	r.startDate = &startDate
	return r
}

// End date of the events
func (r ApiAuditEventsApiAuditEventsRequest) EndDate(endDate time.Time) ApiAuditEventsApiAuditEventsRequest {
	r.endDate = &endDate
	return r
}

func (r ApiAuditEventsApiAuditEventsRequest) Execute() (*FleetAuditEventsResult, *http.Response, error) {
	return r.ApiService.AuditEventsApiAuditEventsExecute(r)
}

/*
AuditEventsApiAuditEvents AuditEvents audit-events-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditEventsApiAuditEventsRequest
*/
func (a *AuditEventsApiAPIService) AuditEventsApiAuditEvents(ctx context.Context) ApiAuditEventsApiAuditEventsRequest {
	return ApiAuditEventsApiAuditEventsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FleetAuditEventsResult
func (a *AuditEventsApiAPIService) AuditEventsApiAuditEventsExecute(r ApiAuditEventsApiAuditEventsRequest) (*FleetAuditEventsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FleetAuditEventsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditEventsApiAPIService.AuditEventsApiAuditEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/audit-events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.serviceID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serviceID", r.serviceID, "form", "")
	}
	if r.environmentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environmentType", r.environmentType, "form", "")
	}
	if r.eventSourceTypes != nil {
		t := *r.eventSourceTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eventSourceTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eventSourceTypes", t, "form", "multi")
		}
	}
	if r.instanceID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceID", r.instanceID, "form", "")
	}
	if r.productTierID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productTierID", r.productTierID, "form", "")
	}
	if r.nextPageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextPageToken", r.nextPageToken, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
