/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the BackupStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupStatus{}

// BackupStatus struct for BackupStatus
type BackupStatus struct {
	// The backup period in hours
	BackupPeriodInHours int64 `json:"backupPeriodInHours"`
	// The backup retention in days
	BackupRetentionInDays int64 `json:"backupRetentionInDays"`
	// The earliest restore time
	EarliestRestoreTime *string `json:"earliestRestoreTime,omitempty"`
	// The last backup time
	LastBackupTime *string `json:"lastBackupTime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BackupStatus BackupStatus

// NewBackupStatus instantiates a new BackupStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupStatus(backupPeriodInHours int64, backupRetentionInDays int64) *BackupStatus {
	this := BackupStatus{}
	this.BackupPeriodInHours = backupPeriodInHours
	this.BackupRetentionInDays = backupRetentionInDays
	return &this
}

// NewBackupStatusWithDefaults instantiates a new BackupStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupStatusWithDefaults() *BackupStatus {
	this := BackupStatus{}
	return &this
}

// GetBackupPeriodInHours returns the BackupPeriodInHours field value
func (o *BackupStatus) GetBackupPeriodInHours() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BackupPeriodInHours
}

// GetBackupPeriodInHoursOk returns a tuple with the BackupPeriodInHours field value
// and a boolean to check if the value has been set.
func (o *BackupStatus) GetBackupPeriodInHoursOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupPeriodInHours, true
}

// SetBackupPeriodInHours sets field value
func (o *BackupStatus) SetBackupPeriodInHours(v int64) {
	o.BackupPeriodInHours = v
}

// GetBackupRetentionInDays returns the BackupRetentionInDays field value
func (o *BackupStatus) GetBackupRetentionInDays() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BackupRetentionInDays
}

// GetBackupRetentionInDaysOk returns a tuple with the BackupRetentionInDays field value
// and a boolean to check if the value has been set.
func (o *BackupStatus) GetBackupRetentionInDaysOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupRetentionInDays, true
}

// SetBackupRetentionInDays sets field value
func (o *BackupStatus) SetBackupRetentionInDays(v int64) {
	o.BackupRetentionInDays = v
}

// GetEarliestRestoreTime returns the EarliestRestoreTime field value if set, zero value otherwise.
func (o *BackupStatus) GetEarliestRestoreTime() string {
	if o == nil || IsNil(o.EarliestRestoreTime) {
		var ret string
		return ret
	}
	return *o.EarliestRestoreTime
}

// GetEarliestRestoreTimeOk returns a tuple with the EarliestRestoreTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStatus) GetEarliestRestoreTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EarliestRestoreTime) {
		return nil, false
	}
	return o.EarliestRestoreTime, true
}

// HasEarliestRestoreTime returns a boolean if a field has been set.
func (o *BackupStatus) HasEarliestRestoreTime() bool {
	if o != nil && !IsNil(o.EarliestRestoreTime) {
		return true
	}

	return false
}

// SetEarliestRestoreTime gets a reference to the given string and assigns it to the EarliestRestoreTime field.
func (o *BackupStatus) SetEarliestRestoreTime(v string) {
	o.EarliestRestoreTime = &v
}

// GetLastBackupTime returns the LastBackupTime field value if set, zero value otherwise.
func (o *BackupStatus) GetLastBackupTime() string {
	if o == nil || IsNil(o.LastBackupTime) {
		var ret string
		return ret
	}
	return *o.LastBackupTime
}

// GetLastBackupTimeOk returns a tuple with the LastBackupTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStatus) GetLastBackupTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastBackupTime) {
		return nil, false
	}
	return o.LastBackupTime, true
}

// HasLastBackupTime returns a boolean if a field has been set.
func (o *BackupStatus) HasLastBackupTime() bool {
	if o != nil && !IsNil(o.LastBackupTime) {
		return true
	}

	return false
}

// SetLastBackupTime gets a reference to the given string and assigns it to the LastBackupTime field.
func (o *BackupStatus) SetLastBackupTime(v string) {
	o.LastBackupTime = &v
}

func (o BackupStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backupPeriodInHours"] = o.BackupPeriodInHours
	toSerialize["backupRetentionInDays"] = o.BackupRetentionInDays
	if !IsNil(o.EarliestRestoreTime) {
		toSerialize["earliestRestoreTime"] = o.EarliestRestoreTime
	}
	if !IsNil(o.LastBackupTime) {
		toSerialize["lastBackupTime"] = o.LastBackupTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BackupStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"backupPeriodInHours",
		"backupRetentionInDays",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupStatus := _BackupStatus{}

	err = json.Unmarshal(data, &varBackupStatus)

	if err != nil {
		return err
	}

	*o = BackupStatus(varBackupStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "backupPeriodInHours")
		delete(additionalProperties, "backupRetentionInDays")
		delete(additionalProperties, "earliestRestoreTime")
		delete(additionalProperties, "lastBackupTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBackupStatus struct {
	value *BackupStatus
	isSet bool
}

func (v NullableBackupStatus) Get() *BackupStatus {
	return v.value
}

func (v *NullableBackupStatus) Set(val *BackupStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupStatus(val *BackupStatus) *NullableBackupStatus {
	return &NullableBackupStatus{value: val, isSet: true}
}

func (v NullableBackupStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


