/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the EnableFleetFeatureRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnableFleetFeatureRequest{}

// EnableFleetFeatureRequest struct for EnableFleetFeatureRequest
type EnableFleetFeatureRequest struct {
	// FleetFeatureType is to enable / disable features per service provider
	Feature *string `json:"feature,omitempty"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _EnableFleetFeatureRequest EnableFleetFeatureRequest

// NewEnableFleetFeatureRequest instantiates a new EnableFleetFeatureRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnableFleetFeatureRequest(token string) *EnableFleetFeatureRequest {
	this := EnableFleetFeatureRequest{}
	this.Token = token
	return &this
}

// NewEnableFleetFeatureRequestWithDefaults instantiates a new EnableFleetFeatureRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnableFleetFeatureRequestWithDefaults() *EnableFleetFeatureRequest {
	this := EnableFleetFeatureRequest{}
	return &this
}

// GetFeature returns the Feature field value if set, zero value otherwise.
func (o *EnableFleetFeatureRequest) GetFeature() string {
	if o == nil || IsNil(o.Feature) {
		var ret string
		return ret
	}
	return *o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnableFleetFeatureRequest) GetFeatureOk() (*string, bool) {
	if o == nil || IsNil(o.Feature) {
		return nil, false
	}
	return o.Feature, true
}

// HasFeature returns a boolean if a field has been set.
func (o *EnableFleetFeatureRequest) HasFeature() bool {
	if o != nil && !IsNil(o.Feature) {
		return true
	}

	return false
}

// SetFeature gets a reference to the given string and assigns it to the Feature field.
func (o *EnableFleetFeatureRequest) SetFeature(v string) {
	o.Feature = &v
}

// GetToken returns the Token field value
func (o *EnableFleetFeatureRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *EnableFleetFeatureRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *EnableFleetFeatureRequest) SetToken(v string) {
	o.Token = v
}

func (o EnableFleetFeatureRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnableFleetFeatureRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Feature) {
		toSerialize["feature"] = o.Feature
	}
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnableFleetFeatureRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnableFleetFeatureRequest := _EnableFleetFeatureRequest{}

	err = json.Unmarshal(data, &varEnableFleetFeatureRequest)

	if err != nil {
		return err
	}

	*o = EnableFleetFeatureRequest(varEnableFleetFeatureRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "feature")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnableFleetFeatureRequest struct {
	value *EnableFleetFeatureRequest
	isSet bool
}

func (v NullableEnableFleetFeatureRequest) Get() *EnableFleetFeatureRequest {
	return v.value
}

func (v *NullableEnableFleetFeatureRequest) Set(val *EnableFleetFeatureRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEnableFleetFeatureRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEnableFleetFeatureRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnableFleetFeatureRequest(val *EnableFleetFeatureRequest) *NullableEnableFleetFeatureRequest {
	return &NullableEnableFleetFeatureRequest{value: val, isSet: true}
}

func (v NullableEnableFleetFeatureRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnableFleetFeatureRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


