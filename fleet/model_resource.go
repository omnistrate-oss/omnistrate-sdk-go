/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the Resource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Resource{}

// Resource struct for Resource
type Resource struct {
	// ID of a Service Environment
	EnvironmentId *string `json:"environmentId,omitempty"`
	// The number of instances for the specific resource.
	InstanceCount *int64 `json:"instanceCount,omitempty"`
	// The name of the resource.
	Name *string `json:"name,omitempty"`
	// The per-version instance count for the resource.
	PerVersionInstanceCount *map[string]int64 `json:"perVersionInstanceCount,omitempty"`
	// The product tier type
	ProductTierType *string `json:"productTierType,omitempty"`
	// The proxy type of instance
	ProxyType *string `json:"proxyType,omitempty"`
	// ID of a resource
	ResourceId *string `json:"resourceId,omitempty"`
	// ID of a Service
	ServiceId *string `json:"serviceId,omitempty"`
	// The service model type
	ServiceModelType *string `json:"serviceModelType,omitempty"`
	// The latest version of the resource.
	Version *string `json:"version,omitempty"`
	// The version history of the resource.
	VersionHistory []string `json:"versionHistory,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Resource Resource

// NewResource instantiates a new Resource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResource() *Resource {
	this := Resource{}
	return &this
}

// NewResourceWithDefaults instantiates a new Resource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceWithDefaults() *Resource {
	this := Resource{}
	return &this
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *Resource) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *Resource) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *Resource) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetInstanceCount returns the InstanceCount field value if set, zero value otherwise.
func (o *Resource) GetInstanceCount() int64 {
	if o == nil || IsNil(o.InstanceCount) {
		var ret int64
		return ret
	}
	return *o.InstanceCount
}

// GetInstanceCountOk returns a tuple with the InstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetInstanceCountOk() (*int64, bool) {
	if o == nil || IsNil(o.InstanceCount) {
		return nil, false
	}
	return o.InstanceCount, true
}

// HasInstanceCount returns a boolean if a field has been set.
func (o *Resource) HasInstanceCount() bool {
	if o != nil && !IsNil(o.InstanceCount) {
		return true
	}

	return false
}

// SetInstanceCount gets a reference to the given int64 and assigns it to the InstanceCount field.
func (o *Resource) SetInstanceCount(v int64) {
	o.InstanceCount = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Resource) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Resource) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Resource) SetName(v string) {
	o.Name = &v
}

// GetPerVersionInstanceCount returns the PerVersionInstanceCount field value if set, zero value otherwise.
func (o *Resource) GetPerVersionInstanceCount() map[string]int64 {
	if o == nil || IsNil(o.PerVersionInstanceCount) {
		var ret map[string]int64
		return ret
	}
	return *o.PerVersionInstanceCount
}

// GetPerVersionInstanceCountOk returns a tuple with the PerVersionInstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetPerVersionInstanceCountOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.PerVersionInstanceCount) {
		return nil, false
	}
	return o.PerVersionInstanceCount, true
}

// HasPerVersionInstanceCount returns a boolean if a field has been set.
func (o *Resource) HasPerVersionInstanceCount() bool {
	if o != nil && !IsNil(o.PerVersionInstanceCount) {
		return true
	}

	return false
}

// SetPerVersionInstanceCount gets a reference to the given map[string]int64 and assigns it to the PerVersionInstanceCount field.
func (o *Resource) SetPerVersionInstanceCount(v map[string]int64) {
	o.PerVersionInstanceCount = &v
}

// GetProductTierType returns the ProductTierType field value if set, zero value otherwise.
func (o *Resource) GetProductTierType() string {
	if o == nil || IsNil(o.ProductTierType) {
		var ret string
		return ret
	}
	return *o.ProductTierType
}

// GetProductTierTypeOk returns a tuple with the ProductTierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetProductTierTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTierType) {
		return nil, false
	}
	return o.ProductTierType, true
}

// HasProductTierType returns a boolean if a field has been set.
func (o *Resource) HasProductTierType() bool {
	if o != nil && !IsNil(o.ProductTierType) {
		return true
	}

	return false
}

// SetProductTierType gets a reference to the given string and assigns it to the ProductTierType field.
func (o *Resource) SetProductTierType(v string) {
	o.ProductTierType = &v
}

// GetProxyType returns the ProxyType field value if set, zero value otherwise.
func (o *Resource) GetProxyType() string {
	if o == nil || IsNil(o.ProxyType) {
		var ret string
		return ret
	}
	return *o.ProxyType
}

// GetProxyTypeOk returns a tuple with the ProxyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetProxyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyType) {
		return nil, false
	}
	return o.ProxyType, true
}

// HasProxyType returns a boolean if a field has been set.
func (o *Resource) HasProxyType() bool {
	if o != nil && !IsNil(o.ProxyType) {
		return true
	}

	return false
}

// SetProxyType gets a reference to the given string and assigns it to the ProxyType field.
func (o *Resource) SetProxyType(v string) {
	o.ProxyType = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *Resource) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *Resource) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *Resource) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *Resource) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *Resource) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *Resource) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceModelType returns the ServiceModelType field value if set, zero value otherwise.
func (o *Resource) GetServiceModelType() string {
	if o == nil || IsNil(o.ServiceModelType) {
		var ret string
		return ret
	}
	return *o.ServiceModelType
}

// GetServiceModelTypeOk returns a tuple with the ServiceModelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetServiceModelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceModelType) {
		return nil, false
	}
	return o.ServiceModelType, true
}

// HasServiceModelType returns a boolean if a field has been set.
func (o *Resource) HasServiceModelType() bool {
	if o != nil && !IsNil(o.ServiceModelType) {
		return true
	}

	return false
}

// SetServiceModelType gets a reference to the given string and assigns it to the ServiceModelType field.
func (o *Resource) SetServiceModelType(v string) {
	o.ServiceModelType = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Resource) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Resource) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Resource) SetVersion(v string) {
	o.Version = &v
}

// GetVersionHistory returns the VersionHistory field value if set, zero value otherwise.
func (o *Resource) GetVersionHistory() []string {
	if o == nil || IsNil(o.VersionHistory) {
		var ret []string
		return ret
	}
	return o.VersionHistory
}

// GetVersionHistoryOk returns a tuple with the VersionHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetVersionHistoryOk() ([]string, bool) {
	if o == nil || IsNil(o.VersionHistory) {
		return nil, false
	}
	return o.VersionHistory, true
}

// HasVersionHistory returns a boolean if a field has been set.
func (o *Resource) HasVersionHistory() bool {
	if o != nil && !IsNil(o.VersionHistory) {
		return true
	}

	return false
}

// SetVersionHistory gets a reference to the given []string and assigns it to the VersionHistory field.
func (o *Resource) SetVersionHistory(v []string) {
	o.VersionHistory = v
}

func (o Resource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Resource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environmentId"] = o.EnvironmentId
	}
	if !IsNil(o.InstanceCount) {
		toSerialize["instanceCount"] = o.InstanceCount
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PerVersionInstanceCount) {
		toSerialize["perVersionInstanceCount"] = o.PerVersionInstanceCount
	}
	if !IsNil(o.ProductTierType) {
		toSerialize["productTierType"] = o.ProductTierType
	}
	if !IsNil(o.ProxyType) {
		toSerialize["proxyType"] = o.ProxyType
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resourceId"] = o.ResourceId
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	if !IsNil(o.ServiceModelType) {
		toSerialize["serviceModelType"] = o.ServiceModelType
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.VersionHistory) {
		toSerialize["versionHistory"] = o.VersionHistory
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Resource) UnmarshalJSON(data []byte) (err error) {
	varResource := _Resource{}

	err = json.Unmarshal(data, &varResource)

	if err != nil {
		return err
	}

	*o = Resource(varResource)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "environmentId")
		delete(additionalProperties, "instanceCount")
		delete(additionalProperties, "name")
		delete(additionalProperties, "perVersionInstanceCount")
		delete(additionalProperties, "productTierType")
		delete(additionalProperties, "proxyType")
		delete(additionalProperties, "resourceId")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "serviceModelType")
		delete(additionalProperties, "version")
		delete(additionalProperties, "versionHistory")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResource struct {
	value *Resource
	isSet bool
}

func (v NullableResource) Get() *Resource {
	return v.value
}

func (v *NullableResource) Set(val *Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResource(val *Resource) *NullableResource {
	return &NullableResource{value: val, isSet: true}
}

func (v NullableResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


