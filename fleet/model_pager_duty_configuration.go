/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the PagerDutyConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PagerDutyConfiguration{}

// PagerDutyConfiguration struct for PagerDutyConfiguration
type PagerDutyConfiguration struct {
	// PagerDuty API integration key
	IntegrationKey string `json:"integrationKey"`
	AdditionalProperties map[string]interface{}
}

type _PagerDutyConfiguration PagerDutyConfiguration

// NewPagerDutyConfiguration instantiates a new PagerDutyConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPagerDutyConfiguration(integrationKey string) *PagerDutyConfiguration {
	this := PagerDutyConfiguration{}
	this.IntegrationKey = integrationKey
	return &this
}

// NewPagerDutyConfigurationWithDefaults instantiates a new PagerDutyConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPagerDutyConfigurationWithDefaults() *PagerDutyConfiguration {
	this := PagerDutyConfiguration{}
	return &this
}

// GetIntegrationKey returns the IntegrationKey field value
func (o *PagerDutyConfiguration) GetIntegrationKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntegrationKey
}

// GetIntegrationKeyOk returns a tuple with the IntegrationKey field value
// and a boolean to check if the value has been set.
func (o *PagerDutyConfiguration) GetIntegrationKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegrationKey, true
}

// SetIntegrationKey sets field value
func (o *PagerDutyConfiguration) SetIntegrationKey(v string) {
	o.IntegrationKey = v
}

func (o PagerDutyConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PagerDutyConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["integrationKey"] = o.IntegrationKey

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PagerDutyConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"integrationKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPagerDutyConfiguration := _PagerDutyConfiguration{}

	err = json.Unmarshal(data, &varPagerDutyConfiguration)

	if err != nil {
		return err
	}

	*o = PagerDutyConfiguration(varPagerDutyConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "integrationKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePagerDutyConfiguration struct {
	value *PagerDutyConfiguration
	isSet bool
}

func (v NullablePagerDutyConfiguration) Get() *PagerDutyConfiguration {
	return v.value
}

func (v *NullablePagerDutyConfiguration) Set(val *PagerDutyConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullablePagerDutyConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullablePagerDutyConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePagerDutyConfiguration(val *PagerDutyConfiguration) *NullablePagerDutyConfiguration {
	return &NullablePagerDutyConfiguration{value: val, isSet: true}
}

func (v NullablePagerDutyConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePagerDutyConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


