/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomerOnboarding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerOnboarding{}

// CustomerOnboarding struct for CustomerOnboarding
type CustomerOnboarding struct {
	// The ID of the onboarding.
	Id string `json:"id"`
	// Whether the onboarding is completed.
	IsCompleted bool `json:"isCompleted"`
	// The name of the onboarding.
	Name *string `json:"name,omitempty"`
	// The Organization ID of the user.
	OrgId string `json:"orgId"`
	// The ID of the service associated with this onboarding.
	ServiceId *string `json:"serviceId,omitempty"`
	// The stages of the onboarding.
	Stages []OnboardingStage `json:"stages"`
	// The user ID.
	UserId string `json:"userId"`
	AdditionalProperties map[string]interface{}
}

type _CustomerOnboarding CustomerOnboarding

// NewCustomerOnboarding instantiates a new CustomerOnboarding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerOnboarding(id string, isCompleted bool, orgId string, stages []OnboardingStage, userId string) *CustomerOnboarding {
	this := CustomerOnboarding{}
	this.Id = id
	this.IsCompleted = isCompleted
	this.OrgId = orgId
	this.Stages = stages
	this.UserId = userId
	return &this
}

// NewCustomerOnboardingWithDefaults instantiates a new CustomerOnboarding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerOnboardingWithDefaults() *CustomerOnboarding {
	this := CustomerOnboarding{}
	return &this
}

// GetId returns the Id field value
func (o *CustomerOnboarding) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CustomerOnboarding) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CustomerOnboarding) SetId(v string) {
	o.Id = v
}

// GetIsCompleted returns the IsCompleted field value
func (o *CustomerOnboarding) GetIsCompleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCompleted
}

// GetIsCompletedOk returns a tuple with the IsCompleted field value
// and a boolean to check if the value has been set.
func (o *CustomerOnboarding) GetIsCompletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsCompleted, true
}

// SetIsCompleted sets field value
func (o *CustomerOnboarding) SetIsCompleted(v bool) {
	o.IsCompleted = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CustomerOnboarding) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerOnboarding) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CustomerOnboarding) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CustomerOnboarding) SetName(v string) {
	o.Name = &v
}

// GetOrgId returns the OrgId field value
func (o *CustomerOnboarding) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *CustomerOnboarding) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *CustomerOnboarding) SetOrgId(v string) {
	o.OrgId = v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *CustomerOnboarding) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerOnboarding) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *CustomerOnboarding) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *CustomerOnboarding) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetStages returns the Stages field value
func (o *CustomerOnboarding) GetStages() []OnboardingStage {
	if o == nil {
		var ret []OnboardingStage
		return ret
	}

	return o.Stages
}

// GetStagesOk returns a tuple with the Stages field value
// and a boolean to check if the value has been set.
func (o *CustomerOnboarding) GetStagesOk() ([]OnboardingStage, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stages, true
}

// SetStages sets field value
func (o *CustomerOnboarding) SetStages(v []OnboardingStage) {
	o.Stages = v
}

// GetUserId returns the UserId field value
func (o *CustomerOnboarding) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *CustomerOnboarding) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *CustomerOnboarding) SetUserId(v string) {
	o.UserId = v
}

func (o CustomerOnboarding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerOnboarding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["isCompleted"] = o.IsCompleted
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["orgId"] = o.OrgId
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	toSerialize["stages"] = o.Stages
	toSerialize["userId"] = o.UserId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomerOnboarding) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"isCompleted",
		"orgId",
		"stages",
		"userId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerOnboarding := _CustomerOnboarding{}

	err = json.Unmarshal(data, &varCustomerOnboarding)

	if err != nil {
		return err
	}

	*o = CustomerOnboarding(varCustomerOnboarding)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "isCompleted")
		delete(additionalProperties, "name")
		delete(additionalProperties, "orgId")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "stages")
		delete(additionalProperties, "userId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomerOnboarding struct {
	value *CustomerOnboarding
	isSet bool
}

func (v NullableCustomerOnboarding) Get() *CustomerOnboarding {
	return v.value
}

func (v *NullableCustomerOnboarding) Set(val *CustomerOnboarding) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerOnboarding) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerOnboarding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerOnboarding(val *CustomerOnboarding) *NullableCustomerOnboarding {
	return &NullableCustomerOnboarding{value: val, isSet: true}
}

func (v NullableCustomerOnboarding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerOnboarding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


