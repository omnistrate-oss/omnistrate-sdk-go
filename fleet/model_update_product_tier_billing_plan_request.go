/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateProductTierBillingPlanRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProductTierBillingPlanRequest{}

// UpdateProductTierBillingPlanRequest struct for UpdateProductTierBillingPlanRequest
type UpdateProductTierBillingPlanRequest struct {
	// Allow creates when payment not configured
	AllowCreatesWhenPaymentNotConfigured *bool `json:"allowCreatesWhenPaymentNotConfigured,omitempty"`
	// ID of a Product Tier Billing Plan
	Id string `json:"id"`
	// Maximum number of instances
	MaxNumberofInstances *int64 `json:"maxNumberofInstances,omitempty"`
	// Plan name
	PlanName *string `json:"planName,omitempty"`
	// Pricing in dollars.
	Pricing interface{} `json:"pricing,omitempty"`
	// ID of a Product Tier
	ProductTierId string `json:"productTierId"`
	// ID of a Service
	ServiceId string `json:"serviceId"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _UpdateProductTierBillingPlanRequest UpdateProductTierBillingPlanRequest

// NewUpdateProductTierBillingPlanRequest instantiates a new UpdateProductTierBillingPlanRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProductTierBillingPlanRequest(id string, productTierId string, serviceId string, token string) *UpdateProductTierBillingPlanRequest {
	this := UpdateProductTierBillingPlanRequest{}
	this.Id = id
	this.ProductTierId = productTierId
	this.ServiceId = serviceId
	this.Token = token
	return &this
}

// NewUpdateProductTierBillingPlanRequestWithDefaults instantiates a new UpdateProductTierBillingPlanRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProductTierBillingPlanRequestWithDefaults() *UpdateProductTierBillingPlanRequest {
	this := UpdateProductTierBillingPlanRequest{}
	return &this
}

// GetAllowCreatesWhenPaymentNotConfigured returns the AllowCreatesWhenPaymentNotConfigured field value if set, zero value otherwise.
func (o *UpdateProductTierBillingPlanRequest) GetAllowCreatesWhenPaymentNotConfigured() bool {
	if o == nil || IsNil(o.AllowCreatesWhenPaymentNotConfigured) {
		var ret bool
		return ret
	}
	return *o.AllowCreatesWhenPaymentNotConfigured
}

// GetAllowCreatesWhenPaymentNotConfiguredOk returns a tuple with the AllowCreatesWhenPaymentNotConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierBillingPlanRequest) GetAllowCreatesWhenPaymentNotConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowCreatesWhenPaymentNotConfigured) {
		return nil, false
	}
	return o.AllowCreatesWhenPaymentNotConfigured, true
}

// HasAllowCreatesWhenPaymentNotConfigured returns a boolean if a field has been set.
func (o *UpdateProductTierBillingPlanRequest) HasAllowCreatesWhenPaymentNotConfigured() bool {
	if o != nil && !IsNil(o.AllowCreatesWhenPaymentNotConfigured) {
		return true
	}

	return false
}

// SetAllowCreatesWhenPaymentNotConfigured gets a reference to the given bool and assigns it to the AllowCreatesWhenPaymentNotConfigured field.
func (o *UpdateProductTierBillingPlanRequest) SetAllowCreatesWhenPaymentNotConfigured(v bool) {
	o.AllowCreatesWhenPaymentNotConfigured = &v
}

// GetId returns the Id field value
func (o *UpdateProductTierBillingPlanRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateProductTierBillingPlanRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateProductTierBillingPlanRequest) SetId(v string) {
	o.Id = v
}

// GetMaxNumberofInstances returns the MaxNumberofInstances field value if set, zero value otherwise.
func (o *UpdateProductTierBillingPlanRequest) GetMaxNumberofInstances() int64 {
	if o == nil || IsNil(o.MaxNumberofInstances) {
		var ret int64
		return ret
	}
	return *o.MaxNumberofInstances
}

// GetMaxNumberofInstancesOk returns a tuple with the MaxNumberofInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierBillingPlanRequest) GetMaxNumberofInstancesOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxNumberofInstances) {
		return nil, false
	}
	return o.MaxNumberofInstances, true
}

// HasMaxNumberofInstances returns a boolean if a field has been set.
func (o *UpdateProductTierBillingPlanRequest) HasMaxNumberofInstances() bool {
	if o != nil && !IsNil(o.MaxNumberofInstances) {
		return true
	}

	return false
}

// SetMaxNumberofInstances gets a reference to the given int64 and assigns it to the MaxNumberofInstances field.
func (o *UpdateProductTierBillingPlanRequest) SetMaxNumberofInstances(v int64) {
	o.MaxNumberofInstances = &v
}

// GetPlanName returns the PlanName field value if set, zero value otherwise.
func (o *UpdateProductTierBillingPlanRequest) GetPlanName() string {
	if o == nil || IsNil(o.PlanName) {
		var ret string
		return ret
	}
	return *o.PlanName
}

// GetPlanNameOk returns a tuple with the PlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductTierBillingPlanRequest) GetPlanNameOk() (*string, bool) {
	if o == nil || IsNil(o.PlanName) {
		return nil, false
	}
	return o.PlanName, true
}

// HasPlanName returns a boolean if a field has been set.
func (o *UpdateProductTierBillingPlanRequest) HasPlanName() bool {
	if o != nil && !IsNil(o.PlanName) {
		return true
	}

	return false
}

// SetPlanName gets a reference to the given string and assigns it to the PlanName field.
func (o *UpdateProductTierBillingPlanRequest) SetPlanName(v string) {
	o.PlanName = &v
}

// GetPricing returns the Pricing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateProductTierBillingPlanRequest) GetPricing() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Pricing
}

// GetPricingOk returns a tuple with the Pricing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateProductTierBillingPlanRequest) GetPricingOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Pricing) {
		return nil, false
	}
	return &o.Pricing, true
}

// HasPricing returns a boolean if a field has been set.
func (o *UpdateProductTierBillingPlanRequest) HasPricing() bool {
	if o != nil && !IsNil(o.Pricing) {
		return true
	}

	return false
}

// SetPricing gets a reference to the given interface{} and assigns it to the Pricing field.
func (o *UpdateProductTierBillingPlanRequest) SetPricing(v interface{}) {
	o.Pricing = v
}

// GetProductTierId returns the ProductTierId field value
func (o *UpdateProductTierBillingPlanRequest) GetProductTierId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value
// and a boolean to check if the value has been set.
func (o *UpdateProductTierBillingPlanRequest) GetProductTierIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTierId, true
}

// SetProductTierId sets field value
func (o *UpdateProductTierBillingPlanRequest) SetProductTierId(v string) {
	o.ProductTierId = v
}

// GetServiceId returns the ServiceId field value
func (o *UpdateProductTierBillingPlanRequest) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *UpdateProductTierBillingPlanRequest) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *UpdateProductTierBillingPlanRequest) SetServiceId(v string) {
	o.ServiceId = v
}

// GetToken returns the Token field value
func (o *UpdateProductTierBillingPlanRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *UpdateProductTierBillingPlanRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *UpdateProductTierBillingPlanRequest) SetToken(v string) {
	o.Token = v
}

func (o UpdateProductTierBillingPlanRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProductTierBillingPlanRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowCreatesWhenPaymentNotConfigured) {
		toSerialize["allowCreatesWhenPaymentNotConfigured"] = o.AllowCreatesWhenPaymentNotConfigured
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.MaxNumberofInstances) {
		toSerialize["maxNumberofInstances"] = o.MaxNumberofInstances
	}
	if !IsNil(o.PlanName) {
		toSerialize["planName"] = o.PlanName
	}
	if o.Pricing != nil {
		toSerialize["pricing"] = o.Pricing
	}
	toSerialize["productTierId"] = o.ProductTierId
	toSerialize["serviceId"] = o.ServiceId
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateProductTierBillingPlanRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"productTierId",
		"serviceId",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateProductTierBillingPlanRequest := _UpdateProductTierBillingPlanRequest{}

	err = json.Unmarshal(data, &varUpdateProductTierBillingPlanRequest)

	if err != nil {
		return err
	}

	*o = UpdateProductTierBillingPlanRequest(varUpdateProductTierBillingPlanRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowCreatesWhenPaymentNotConfigured")
		delete(additionalProperties, "id")
		delete(additionalProperties, "maxNumberofInstances")
		delete(additionalProperties, "planName")
		delete(additionalProperties, "pricing")
		delete(additionalProperties, "productTierId")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateProductTierBillingPlanRequest struct {
	value *UpdateProductTierBillingPlanRequest
	isSet bool
}

func (v NullableUpdateProductTierBillingPlanRequest) Get() *UpdateProductTierBillingPlanRequest {
	return v.value
}

func (v *NullableUpdateProductTierBillingPlanRequest) Set(val *UpdateProductTierBillingPlanRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProductTierBillingPlanRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProductTierBillingPlanRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProductTierBillingPlanRequest(val *UpdateProductTierBillingPlanRequest) *NullableUpdateProductTierBillingPlanRequest {
	return &NullableUpdateProductTierBillingPlanRequest{value: val, isSet: true}
}

func (v NullableUpdateProductTierBillingPlanRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProductTierBillingPlanRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


