/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WorkflowFailure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowFailure{}

// WorkflowFailure struct for WorkflowFailure
type WorkflowFailure struct {
	// The time of the event
	EventTime string `json:"eventTime"`
	// Details of the event
	Message string `json:"message"`
}

type _WorkflowFailure WorkflowFailure

// NewWorkflowFailure instantiates a new WorkflowFailure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowFailure(eventTime string, message string) *WorkflowFailure {
	this := WorkflowFailure{}
	this.EventTime = eventTime
	this.Message = message
	return &this
}

// NewWorkflowFailureWithDefaults instantiates a new WorkflowFailure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowFailureWithDefaults() *WorkflowFailure {
	this := WorkflowFailure{}
	return &this
}

// GetEventTime returns the EventTime field value
func (o *WorkflowFailure) GetEventTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value
// and a boolean to check if the value has been set.
func (o *WorkflowFailure) GetEventTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTime, true
}

// SetEventTime sets field value
func (o *WorkflowFailure) SetEventTime(v string) {
	o.EventTime = v
}

// GetMessage returns the Message field value
func (o *WorkflowFailure) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *WorkflowFailure) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *WorkflowFailure) SetMessage(v string) {
	o.Message = v
}

func (o WorkflowFailure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowFailure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventTime"] = o.EventTime
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *WorkflowFailure) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eventTime",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkflowFailure := _WorkflowFailure{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkflowFailure)

	if err != nil {
		return err
	}

	*o = WorkflowFailure(varWorkflowFailure)

	return err
}

type NullableWorkflowFailure struct {
	value *WorkflowFailure
	isSet bool
}

func (v NullableWorkflowFailure) Get() *WorkflowFailure {
	return v.value
}

func (v *NullableWorkflowFailure) Set(val *WorkflowFailure) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowFailure) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowFailure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowFailure(val *WorkflowFailure) *NullableWorkflowFailure {
	return &NullableWorkflowFailure{value: val, isSet: true}
}

func (v NullableWorkflowFailure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowFailure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


