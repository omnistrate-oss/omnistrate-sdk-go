/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the DebugResourceInstanceResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DebugResourceInstanceResult{}

// DebugResourceInstanceResult struct for DebugResourceInstanceResult
type DebugResourceInstanceResult struct {
	// ID of a Resource Instance
	InstanceId string `json:"instanceId"`
	// The debug information for individual instance resources
	ResourcesDebug *map[string]DebugResourceResult `json:"resourcesDebug,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DebugResourceInstanceResult DebugResourceInstanceResult

// NewDebugResourceInstanceResult instantiates a new DebugResourceInstanceResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDebugResourceInstanceResult(instanceId string) *DebugResourceInstanceResult {
	this := DebugResourceInstanceResult{}
	this.InstanceId = instanceId
	return &this
}

// NewDebugResourceInstanceResultWithDefaults instantiates a new DebugResourceInstanceResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDebugResourceInstanceResultWithDefaults() *DebugResourceInstanceResult {
	this := DebugResourceInstanceResult{}
	return &this
}

// GetInstanceId returns the InstanceId field value
func (o *DebugResourceInstanceResult) GetInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *DebugResourceInstanceResult) GetInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *DebugResourceInstanceResult) SetInstanceId(v string) {
	o.InstanceId = v
}

// GetResourcesDebug returns the ResourcesDebug field value if set, zero value otherwise.
func (o *DebugResourceInstanceResult) GetResourcesDebug() map[string]DebugResourceResult {
	if o == nil || IsNil(o.ResourcesDebug) {
		var ret map[string]DebugResourceResult
		return ret
	}
	return *o.ResourcesDebug
}

// GetResourcesDebugOk returns a tuple with the ResourcesDebug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebugResourceInstanceResult) GetResourcesDebugOk() (*map[string]DebugResourceResult, bool) {
	if o == nil || IsNil(o.ResourcesDebug) {
		return nil, false
	}
	return o.ResourcesDebug, true
}

// HasResourcesDebug returns a boolean if a field has been set.
func (o *DebugResourceInstanceResult) HasResourcesDebug() bool {
	if o != nil && !IsNil(o.ResourcesDebug) {
		return true
	}

	return false
}

// SetResourcesDebug gets a reference to the given map[string]DebugResourceResult and assigns it to the ResourcesDebug field.
func (o *DebugResourceInstanceResult) SetResourcesDebug(v map[string]DebugResourceResult) {
	o.ResourcesDebug = &v
}

func (o DebugResourceInstanceResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DebugResourceInstanceResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instanceId"] = o.InstanceId
	if !IsNil(o.ResourcesDebug) {
		toSerialize["resourcesDebug"] = o.ResourcesDebug
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DebugResourceInstanceResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instanceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDebugResourceInstanceResult := _DebugResourceInstanceResult{}

	err = json.Unmarshal(data, &varDebugResourceInstanceResult)

	if err != nil {
		return err
	}

	*o = DebugResourceInstanceResult(varDebugResourceInstanceResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instanceId")
		delete(additionalProperties, "resourcesDebug")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDebugResourceInstanceResult struct {
	value *DebugResourceInstanceResult
	isSet bool
}

func (v NullableDebugResourceInstanceResult) Get() *DebugResourceInstanceResult {
	return v.value
}

func (v *NullableDebugResourceInstanceResult) Set(val *DebugResourceInstanceResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDebugResourceInstanceResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDebugResourceInstanceResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDebugResourceInstanceResult(val *DebugResourceInstanceResult) *NullableDebugResourceInstanceResult {
	return &NullableDebugResourceInstanceResult{value: val, isSet: true}
}

func (v NullableDebugResourceInstanceResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDebugResourceInstanceResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


