/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChannelSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelSubscription{}

// ChannelSubscription struct for ChannelSubscription
type ChannelSubscription struct {
	// Types of alerts to route to this channel (optional)
	AlertTypes []string `json:"alertTypes"`
	// Types of environments to route to this channel (optional)
	EnvironmentTypes []string `json:"environmentTypes"`
	// Categories of events to route to this channel
	EventCategories []string `json:"eventCategories"`
	// Priorities of events to route to this channel
	EventPriorities []string `json:"eventPriorities"`
	// Types of events to route to this channel (optional)
	EventTypes []string `json:"eventTypes"`
}

type _ChannelSubscription ChannelSubscription

// NewChannelSubscription instantiates a new ChannelSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelSubscription(alertTypes []string, environmentTypes []string, eventCategories []string, eventPriorities []string, eventTypes []string) *ChannelSubscription {
	this := ChannelSubscription{}
	this.AlertTypes = alertTypes
	this.EnvironmentTypes = environmentTypes
	this.EventCategories = eventCategories
	this.EventPriorities = eventPriorities
	this.EventTypes = eventTypes
	return &this
}

// NewChannelSubscriptionWithDefaults instantiates a new ChannelSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelSubscriptionWithDefaults() *ChannelSubscription {
	this := ChannelSubscription{}
	return &this
}

// GetAlertTypes returns the AlertTypes field value
func (o *ChannelSubscription) GetAlertTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AlertTypes
}

// GetAlertTypesOk returns a tuple with the AlertTypes field value
// and a boolean to check if the value has been set.
func (o *ChannelSubscription) GetAlertTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlertTypes, true
}

// SetAlertTypes sets field value
func (o *ChannelSubscription) SetAlertTypes(v []string) {
	o.AlertTypes = v
}

// GetEnvironmentTypes returns the EnvironmentTypes field value
func (o *ChannelSubscription) GetEnvironmentTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EnvironmentTypes
}

// GetEnvironmentTypesOk returns a tuple with the EnvironmentTypes field value
// and a boolean to check if the value has been set.
func (o *ChannelSubscription) GetEnvironmentTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvironmentTypes, true
}

// SetEnvironmentTypes sets field value
func (o *ChannelSubscription) SetEnvironmentTypes(v []string) {
	o.EnvironmentTypes = v
}

// GetEventCategories returns the EventCategories field value
func (o *ChannelSubscription) GetEventCategories() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EventCategories
}

// GetEventCategoriesOk returns a tuple with the EventCategories field value
// and a boolean to check if the value has been set.
func (o *ChannelSubscription) GetEventCategoriesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventCategories, true
}

// SetEventCategories sets field value
func (o *ChannelSubscription) SetEventCategories(v []string) {
	o.EventCategories = v
}

// GetEventPriorities returns the EventPriorities field value
func (o *ChannelSubscription) GetEventPriorities() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EventPriorities
}

// GetEventPrioritiesOk returns a tuple with the EventPriorities field value
// and a boolean to check if the value has been set.
func (o *ChannelSubscription) GetEventPrioritiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventPriorities, true
}

// SetEventPriorities sets field value
func (o *ChannelSubscription) SetEventPriorities(v []string) {
	o.EventPriorities = v
}

// GetEventTypes returns the EventTypes field value
func (o *ChannelSubscription) GetEventTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value
// and a boolean to check if the value has been set.
func (o *ChannelSubscription) GetEventTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTypes, true
}

// SetEventTypes sets field value
func (o *ChannelSubscription) SetEventTypes(v []string) {
	o.EventTypes = v
}

func (o ChannelSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alertTypes"] = o.AlertTypes
	toSerialize["environmentTypes"] = o.EnvironmentTypes
	toSerialize["eventCategories"] = o.EventCategories
	toSerialize["eventPriorities"] = o.EventPriorities
	toSerialize["eventTypes"] = o.EventTypes
	return toSerialize, nil
}

func (o *ChannelSubscription) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"alertTypes",
		"environmentTypes",
		"eventCategories",
		"eventPriorities",
		"eventTypes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChannelSubscription := _ChannelSubscription{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChannelSubscription)

	if err != nil {
		return err
	}

	*o = ChannelSubscription(varChannelSubscription)

	return err
}

type NullableChannelSubscription struct {
	value *ChannelSubscription
	isSet bool
}

func (v NullableChannelSubscription) Get() *ChannelSubscription {
	return v.value
}

func (v *NullableChannelSubscription) Set(val *ChannelSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelSubscription(val *ChannelSubscription) *NullableChannelSubscription {
	return &NullableChannelSubscription{value: val, isSet: true}
}

func (v NullableChannelSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


