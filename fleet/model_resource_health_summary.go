/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the ResourceHealthSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceHealthSummary{}

// ResourceHealthSummary struct for ResourceHealthSummary
type ResourceHealthSummary struct {
	// The health summary of the nodes by node name
	NodesHealth map[string]NodeHealthSummary `json:"nodesHealth"`
	// The ID of the resource
	ResourceID string `json:"resourceID"`
	// The key of the resource
	ResourceKey string `json:"resourceKey"`
	// The type of the resource
	ResourceType *string `json:"resourceType,omitempty"`
	// The status of the resource
	Status string `json:"status"`
	AdditionalProperties map[string]interface{}
}

type _ResourceHealthSummary ResourceHealthSummary

// NewResourceHealthSummary instantiates a new ResourceHealthSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceHealthSummary(nodesHealth map[string]NodeHealthSummary, resourceID string, resourceKey string, status string) *ResourceHealthSummary {
	this := ResourceHealthSummary{}
	this.NodesHealth = nodesHealth
	this.ResourceID = resourceID
	this.ResourceKey = resourceKey
	this.Status = status
	return &this
}

// NewResourceHealthSummaryWithDefaults instantiates a new ResourceHealthSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceHealthSummaryWithDefaults() *ResourceHealthSummary {
	this := ResourceHealthSummary{}
	return &this
}

// GetNodesHealth returns the NodesHealth field value
func (o *ResourceHealthSummary) GetNodesHealth() map[string]NodeHealthSummary {
	if o == nil {
		var ret map[string]NodeHealthSummary
		return ret
	}

	return o.NodesHealth
}

// GetNodesHealthOk returns a tuple with the NodesHealth field value
// and a boolean to check if the value has been set.
func (o *ResourceHealthSummary) GetNodesHealthOk() (*map[string]NodeHealthSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodesHealth, true
}

// SetNodesHealth sets field value
func (o *ResourceHealthSummary) SetNodesHealth(v map[string]NodeHealthSummary) {
	o.NodesHealth = v
}

// GetResourceID returns the ResourceID field value
func (o *ResourceHealthSummary) GetResourceID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceID
}

// GetResourceIDOk returns a tuple with the ResourceID field value
// and a boolean to check if the value has been set.
func (o *ResourceHealthSummary) GetResourceIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceID, true
}

// SetResourceID sets field value
func (o *ResourceHealthSummary) SetResourceID(v string) {
	o.ResourceID = v
}

// GetResourceKey returns the ResourceKey field value
func (o *ResourceHealthSummary) GetResourceKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceKey
}

// GetResourceKeyOk returns a tuple with the ResourceKey field value
// and a boolean to check if the value has been set.
func (o *ResourceHealthSummary) GetResourceKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceKey, true
}

// SetResourceKey sets field value
func (o *ResourceHealthSummary) SetResourceKey(v string) {
	o.ResourceKey = v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ResourceHealthSummary) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceHealthSummary) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ResourceHealthSummary) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *ResourceHealthSummary) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetStatus returns the Status field value
func (o *ResourceHealthSummary) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ResourceHealthSummary) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ResourceHealthSummary) SetStatus(v string) {
	o.Status = v
}

func (o ResourceHealthSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceHealthSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodesHealth"] = o.NodesHealth
	toSerialize["resourceID"] = o.ResourceID
	toSerialize["resourceKey"] = o.ResourceKey
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	toSerialize["status"] = o.Status

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResourceHealthSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodesHealth",
		"resourceID",
		"resourceKey",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceHealthSummary := _ResourceHealthSummary{}

	err = json.Unmarshal(data, &varResourceHealthSummary)

	if err != nil {
		return err
	}

	*o = ResourceHealthSummary(varResourceHealthSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "nodesHealth")
		delete(additionalProperties, "resourceID")
		delete(additionalProperties, "resourceKey")
		delete(additionalProperties, "resourceType")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourceHealthSummary struct {
	value *ResourceHealthSummary
	isSet bool
}

func (v NullableResourceHealthSummary) Get() *ResourceHealthSummary {
	return v.value
}

func (v *NullableResourceHealthSummary) Set(val *ResourceHealthSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceHealthSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceHealthSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceHealthSummary(val *ResourceHealthSummary) *NullableResourceHealthSummary {
	return &NullableResourceHealthSummary{value: val, isSet: true}
}

func (v NullableResourceHealthSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceHealthSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


