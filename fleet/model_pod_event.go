/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the PodEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PodEvent{}

// PodEvent struct for PodEvent
type PodEvent struct {
	// The first timestamp when the pod event occurred
	FirstTimestamp *string `json:"FirstTimestamp,omitempty"`
	// The last timestamp when the pod event occurred
	LastTimestamp *string `json:"LastTimestamp,omitempty"`
	// The message associated with the pod event
	Message *string `json:"Message,omitempty"`
	// The number of occurrences of the pod event
	NumberOfOccurrences *int64 `json:"NumberOfOccurrences,omitempty"`
	// The reason for the pod event
	Reason *string `json:"Reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PodEvent PodEvent

// NewPodEvent instantiates a new PodEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPodEvent() *PodEvent {
	this := PodEvent{}
	return &this
}

// NewPodEventWithDefaults instantiates a new PodEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodEventWithDefaults() *PodEvent {
	this := PodEvent{}
	return &this
}

// GetFirstTimestamp returns the FirstTimestamp field value if set, zero value otherwise.
func (o *PodEvent) GetFirstTimestamp() string {
	if o == nil || IsNil(o.FirstTimestamp) {
		var ret string
		return ret
	}
	return *o.FirstTimestamp
}

// GetFirstTimestampOk returns a tuple with the FirstTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodEvent) GetFirstTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.FirstTimestamp) {
		return nil, false
	}
	return o.FirstTimestamp, true
}

// HasFirstTimestamp returns a boolean if a field has been set.
func (o *PodEvent) HasFirstTimestamp() bool {
	if o != nil && !IsNil(o.FirstTimestamp) {
		return true
	}

	return false
}

// SetFirstTimestamp gets a reference to the given string and assigns it to the FirstTimestamp field.
func (o *PodEvent) SetFirstTimestamp(v string) {
	o.FirstTimestamp = &v
}

// GetLastTimestamp returns the LastTimestamp field value if set, zero value otherwise.
func (o *PodEvent) GetLastTimestamp() string {
	if o == nil || IsNil(o.LastTimestamp) {
		var ret string
		return ret
	}
	return *o.LastTimestamp
}

// GetLastTimestampOk returns a tuple with the LastTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodEvent) GetLastTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.LastTimestamp) {
		return nil, false
	}
	return o.LastTimestamp, true
}

// HasLastTimestamp returns a boolean if a field has been set.
func (o *PodEvent) HasLastTimestamp() bool {
	if o != nil && !IsNil(o.LastTimestamp) {
		return true
	}

	return false
}

// SetLastTimestamp gets a reference to the given string and assigns it to the LastTimestamp field.
func (o *PodEvent) SetLastTimestamp(v string) {
	o.LastTimestamp = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *PodEvent) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodEvent) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PodEvent) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *PodEvent) SetMessage(v string) {
	o.Message = &v
}

// GetNumberOfOccurrences returns the NumberOfOccurrences field value if set, zero value otherwise.
func (o *PodEvent) GetNumberOfOccurrences() int64 {
	if o == nil || IsNil(o.NumberOfOccurrences) {
		var ret int64
		return ret
	}
	return *o.NumberOfOccurrences
}

// GetNumberOfOccurrencesOk returns a tuple with the NumberOfOccurrences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodEvent) GetNumberOfOccurrencesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfOccurrences) {
		return nil, false
	}
	return o.NumberOfOccurrences, true
}

// HasNumberOfOccurrences returns a boolean if a field has been set.
func (o *PodEvent) HasNumberOfOccurrences() bool {
	if o != nil && !IsNil(o.NumberOfOccurrences) {
		return true
	}

	return false
}

// SetNumberOfOccurrences gets a reference to the given int64 and assigns it to the NumberOfOccurrences field.
func (o *PodEvent) SetNumberOfOccurrences(v int64) {
	o.NumberOfOccurrences = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *PodEvent) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PodEvent) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *PodEvent) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *PodEvent) SetReason(v string) {
	o.Reason = &v
}

func (o PodEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PodEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstTimestamp) {
		toSerialize["FirstTimestamp"] = o.FirstTimestamp
	}
	if !IsNil(o.LastTimestamp) {
		toSerialize["LastTimestamp"] = o.LastTimestamp
	}
	if !IsNil(o.Message) {
		toSerialize["Message"] = o.Message
	}
	if !IsNil(o.NumberOfOccurrences) {
		toSerialize["NumberOfOccurrences"] = o.NumberOfOccurrences
	}
	if !IsNil(o.Reason) {
		toSerialize["Reason"] = o.Reason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PodEvent) UnmarshalJSON(data []byte) (err error) {
	varPodEvent := _PodEvent{}

	err = json.Unmarshal(data, &varPodEvent)

	if err != nil {
		return err
	}

	*o = PodEvent(varPodEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "FirstTimestamp")
		delete(additionalProperties, "LastTimestamp")
		delete(additionalProperties, "Message")
		delete(additionalProperties, "NumberOfOccurrences")
		delete(additionalProperties, "Reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePodEvent struct {
	value *PodEvent
	isSet bool
}

func (v NullablePodEvent) Get() *PodEvent {
	return v.value
}

func (v *NullablePodEvent) Set(val *PodEvent) {
	v.value = val
	v.isSet = true
}

func (v NullablePodEvent) IsSet() bool {
	return v.isSet
}

func (v *NullablePodEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePodEvent(val *PodEvent) *NullablePodEvent {
	return &NullablePodEvent{value: val, isSet: true}
}

func (v NullablePodEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePodEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


