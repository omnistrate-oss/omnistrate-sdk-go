/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
)

// checks if the UsagePerSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsagePerSubscription{}

// UsagePerSubscription struct for UsagePerSubscription
type UsagePerSubscription struct {
	// End timestamp of usage
	EndTime *string `json:"endTime,omitempty"`
	// ID of an Org
	OrganizationID *string `json:"organizationID,omitempty"`
	// The name of the organization the subscription belongs to
	OrganizationName *string `json:"organizationName,omitempty"`
	// ID of a Product Tier
	ProductTierID *string `json:"productTierID,omitempty"`
	// The name of the product tier the subscription is for
	ProductTierName *string `json:"productTierName,omitempty"`
	// ID of a Service
	ServiceID *string `json:"serviceID,omitempty"`
	// The name of the service the subscription is for
	ServiceName *string `json:"serviceName,omitempty"`
	// Start timestamp of usage
	StartTime *string `json:"startTime,omitempty"`
	// ID of a Subscription
	SubscriptionID *string `json:"subscriptionID,omitempty"`
	// Usage per dimension for the subscription
	Usage []UsagePerDimension `json:"usage,omitempty"`
	// The email of the owner of the subscription
	UserEmail *string `json:"userEmail,omitempty"`
	// ID of a User
	UserID *string `json:"userID,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UsagePerSubscription UsagePerSubscription

// NewUsagePerSubscription instantiates a new UsagePerSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsagePerSubscription() *UsagePerSubscription {
	this := UsagePerSubscription{}
	return &this
}

// NewUsagePerSubscriptionWithDefaults instantiates a new UsagePerSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsagePerSubscriptionWithDefaults() *UsagePerSubscription {
	this := UsagePerSubscription{}
	return &this
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *UsagePerSubscription) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsagePerSubscription) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *UsagePerSubscription) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *UsagePerSubscription) SetEndTime(v string) {
	o.EndTime = &v
}

// GetOrganizationID returns the OrganizationID field value if set, zero value otherwise.
func (o *UsagePerSubscription) GetOrganizationID() string {
	if o == nil || IsNil(o.OrganizationID) {
		var ret string
		return ret
	}
	return *o.OrganizationID
}

// GetOrganizationIDOk returns a tuple with the OrganizationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsagePerSubscription) GetOrganizationIDOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationID) {
		return nil, false
	}
	return o.OrganizationID, true
}

// HasOrganizationID returns a boolean if a field has been set.
func (o *UsagePerSubscription) HasOrganizationID() bool {
	if o != nil && !IsNil(o.OrganizationID) {
		return true
	}

	return false
}

// SetOrganizationID gets a reference to the given string and assigns it to the OrganizationID field.
func (o *UsagePerSubscription) SetOrganizationID(v string) {
	o.OrganizationID = &v
}

// GetOrganizationName returns the OrganizationName field value if set, zero value otherwise.
func (o *UsagePerSubscription) GetOrganizationName() string {
	if o == nil || IsNil(o.OrganizationName) {
		var ret string
		return ret
	}
	return *o.OrganizationName
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsagePerSubscription) GetOrganizationNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationName) {
		return nil, false
	}
	return o.OrganizationName, true
}

// HasOrganizationName returns a boolean if a field has been set.
func (o *UsagePerSubscription) HasOrganizationName() bool {
	if o != nil && !IsNil(o.OrganizationName) {
		return true
	}

	return false
}

// SetOrganizationName gets a reference to the given string and assigns it to the OrganizationName field.
func (o *UsagePerSubscription) SetOrganizationName(v string) {
	o.OrganizationName = &v
}

// GetProductTierID returns the ProductTierID field value if set, zero value otherwise.
func (o *UsagePerSubscription) GetProductTierID() string {
	if o == nil || IsNil(o.ProductTierID) {
		var ret string
		return ret
	}
	return *o.ProductTierID
}

// GetProductTierIDOk returns a tuple with the ProductTierID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsagePerSubscription) GetProductTierIDOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTierID) {
		return nil, false
	}
	return o.ProductTierID, true
}

// HasProductTierID returns a boolean if a field has been set.
func (o *UsagePerSubscription) HasProductTierID() bool {
	if o != nil && !IsNil(o.ProductTierID) {
		return true
	}

	return false
}

// SetProductTierID gets a reference to the given string and assigns it to the ProductTierID field.
func (o *UsagePerSubscription) SetProductTierID(v string) {
	o.ProductTierID = &v
}

// GetProductTierName returns the ProductTierName field value if set, zero value otherwise.
func (o *UsagePerSubscription) GetProductTierName() string {
	if o == nil || IsNil(o.ProductTierName) {
		var ret string
		return ret
	}
	return *o.ProductTierName
}

// GetProductTierNameOk returns a tuple with the ProductTierName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsagePerSubscription) GetProductTierNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTierName) {
		return nil, false
	}
	return o.ProductTierName, true
}

// HasProductTierName returns a boolean if a field has been set.
func (o *UsagePerSubscription) HasProductTierName() bool {
	if o != nil && !IsNil(o.ProductTierName) {
		return true
	}

	return false
}

// SetProductTierName gets a reference to the given string and assigns it to the ProductTierName field.
func (o *UsagePerSubscription) SetProductTierName(v string) {
	o.ProductTierName = &v
}

// GetServiceID returns the ServiceID field value if set, zero value otherwise.
func (o *UsagePerSubscription) GetServiceID() string {
	if o == nil || IsNil(o.ServiceID) {
		var ret string
		return ret
	}
	return *o.ServiceID
}

// GetServiceIDOk returns a tuple with the ServiceID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsagePerSubscription) GetServiceIDOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceID) {
		return nil, false
	}
	return o.ServiceID, true
}

// HasServiceID returns a boolean if a field has been set.
func (o *UsagePerSubscription) HasServiceID() bool {
	if o != nil && !IsNil(o.ServiceID) {
		return true
	}

	return false
}

// SetServiceID gets a reference to the given string and assigns it to the ServiceID field.
func (o *UsagePerSubscription) SetServiceID(v string) {
	o.ServiceID = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *UsagePerSubscription) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsagePerSubscription) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *UsagePerSubscription) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *UsagePerSubscription) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *UsagePerSubscription) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsagePerSubscription) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *UsagePerSubscription) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *UsagePerSubscription) SetStartTime(v string) {
	o.StartTime = &v
}

// GetSubscriptionID returns the SubscriptionID field value if set, zero value otherwise.
func (o *UsagePerSubscription) GetSubscriptionID() string {
	if o == nil || IsNil(o.SubscriptionID) {
		var ret string
		return ret
	}
	return *o.SubscriptionID
}

// GetSubscriptionIDOk returns a tuple with the SubscriptionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsagePerSubscription) GetSubscriptionIDOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionID) {
		return nil, false
	}
	return o.SubscriptionID, true
}

// HasSubscriptionID returns a boolean if a field has been set.
func (o *UsagePerSubscription) HasSubscriptionID() bool {
	if o != nil && !IsNil(o.SubscriptionID) {
		return true
	}

	return false
}

// SetSubscriptionID gets a reference to the given string and assigns it to the SubscriptionID field.
func (o *UsagePerSubscription) SetSubscriptionID(v string) {
	o.SubscriptionID = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *UsagePerSubscription) GetUsage() []UsagePerDimension {
	if o == nil || IsNil(o.Usage) {
		var ret []UsagePerDimension
		return ret
	}
	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsagePerSubscription) GetUsageOk() ([]UsagePerDimension, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *UsagePerSubscription) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given []UsagePerDimension and assigns it to the Usage field.
func (o *UsagePerSubscription) SetUsage(v []UsagePerDimension) {
	o.Usage = v
}

// GetUserEmail returns the UserEmail field value if set, zero value otherwise.
func (o *UsagePerSubscription) GetUserEmail() string {
	if o == nil || IsNil(o.UserEmail) {
		var ret string
		return ret
	}
	return *o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsagePerSubscription) GetUserEmailOk() (*string, bool) {
	if o == nil || IsNil(o.UserEmail) {
		return nil, false
	}
	return o.UserEmail, true
}

// HasUserEmail returns a boolean if a field has been set.
func (o *UsagePerSubscription) HasUserEmail() bool {
	if o != nil && !IsNil(o.UserEmail) {
		return true
	}

	return false
}

// SetUserEmail gets a reference to the given string and assigns it to the UserEmail field.
func (o *UsagePerSubscription) SetUserEmail(v string) {
	o.UserEmail = &v
}

// GetUserID returns the UserID field value if set, zero value otherwise.
func (o *UsagePerSubscription) GetUserID() string {
	if o == nil || IsNil(o.UserID) {
		var ret string
		return ret
	}
	return *o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsagePerSubscription) GetUserIDOk() (*string, bool) {
	if o == nil || IsNil(o.UserID) {
		return nil, false
	}
	return o.UserID, true
}

// HasUserID returns a boolean if a field has been set.
func (o *UsagePerSubscription) HasUserID() bool {
	if o != nil && !IsNil(o.UserID) {
		return true
	}

	return false
}

// SetUserID gets a reference to the given string and assigns it to the UserID field.
func (o *UsagePerSubscription) SetUserID(v string) {
	o.UserID = &v
}

func (o UsagePerSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsagePerSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.OrganizationID) {
		toSerialize["organizationID"] = o.OrganizationID
	}
	if !IsNil(o.OrganizationName) {
		toSerialize["organizationName"] = o.OrganizationName
	}
	if !IsNil(o.ProductTierID) {
		toSerialize["productTierID"] = o.ProductTierID
	}
	if !IsNil(o.ProductTierName) {
		toSerialize["productTierName"] = o.ProductTierName
	}
	if !IsNil(o.ServiceID) {
		toSerialize["serviceID"] = o.ServiceID
	}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.SubscriptionID) {
		toSerialize["subscriptionID"] = o.SubscriptionID
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.UserEmail) {
		toSerialize["userEmail"] = o.UserEmail
	}
	if !IsNil(o.UserID) {
		toSerialize["userID"] = o.UserID
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UsagePerSubscription) UnmarshalJSON(data []byte) (err error) {
	varUsagePerSubscription := _UsagePerSubscription{}

	err = json.Unmarshal(data, &varUsagePerSubscription)

	if err != nil {
		return err
	}

	*o = UsagePerSubscription(varUsagePerSubscription)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "endTime")
		delete(additionalProperties, "organizationID")
		delete(additionalProperties, "organizationName")
		delete(additionalProperties, "productTierID")
		delete(additionalProperties, "productTierName")
		delete(additionalProperties, "serviceID")
		delete(additionalProperties, "serviceName")
		delete(additionalProperties, "startTime")
		delete(additionalProperties, "subscriptionID")
		delete(additionalProperties, "usage")
		delete(additionalProperties, "userEmail")
		delete(additionalProperties, "userID")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUsagePerSubscription struct {
	value *UsagePerSubscription
	isSet bool
}

func (v NullableUsagePerSubscription) Get() *UsagePerSubscription {
	return v.value
}

func (v *NullableUsagePerSubscription) Set(val *UsagePerSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableUsagePerSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableUsagePerSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsagePerSubscription(val *UsagePerSubscription) *NullableUsagePerSubscription {
	return &NullableUsagePerSubscription{value: val, isSet: true}
}

func (v NullableUsagePerSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsagePerSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


