/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceDeploymentDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceDeploymentDetails{}

// ServiceDeploymentDetails struct for ServiceDeploymentDetails
type ServiceDeploymentDetails struct {
	// The deployment keys that this deployment depends on
	DependsOnDeployment []string `json:"dependsOnDeployment,omitempty"`
	// The reason why the deployment failed
	FailedReason *string `json:"failedReason,omitempty"`
	// The instance deployment alias
	InstanceDeploymentAlias string `json:"instanceDeploymentAlias"`
	// ID of a Resource Instance
	InstanceId *string `json:"instanceId,omitempty"`
	// ID of a Service
	ServiceId string `json:"serviceId"`
	// The status of the service deployment
	Status *string `json:"status,omitempty"`
	// The status message of the service deployment
	StatusMessage *string `json:"statusMessage,omitempty"`
	// ID of a Subscription
	SubscriptionId string `json:"subscriptionId"`
	AdditionalProperties map[string]interface{}
}

type _ServiceDeploymentDetails ServiceDeploymentDetails

// NewServiceDeploymentDetails instantiates a new ServiceDeploymentDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceDeploymentDetails(instanceDeploymentAlias string, serviceId string, subscriptionId string) *ServiceDeploymentDetails {
	this := ServiceDeploymentDetails{}
	this.InstanceDeploymentAlias = instanceDeploymentAlias
	this.ServiceId = serviceId
	this.SubscriptionId = subscriptionId
	return &this
}

// NewServiceDeploymentDetailsWithDefaults instantiates a new ServiceDeploymentDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceDeploymentDetailsWithDefaults() *ServiceDeploymentDetails {
	this := ServiceDeploymentDetails{}
	return &this
}

// GetDependsOnDeployment returns the DependsOnDeployment field value if set, zero value otherwise.
func (o *ServiceDeploymentDetails) GetDependsOnDeployment() []string {
	if o == nil || IsNil(o.DependsOnDeployment) {
		var ret []string
		return ret
	}
	return o.DependsOnDeployment
}

// GetDependsOnDeploymentOk returns a tuple with the DependsOnDeployment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceDeploymentDetails) GetDependsOnDeploymentOk() ([]string, bool) {
	if o == nil || IsNil(o.DependsOnDeployment) {
		return nil, false
	}
	return o.DependsOnDeployment, true
}

// HasDependsOnDeployment returns a boolean if a field has been set.
func (o *ServiceDeploymentDetails) HasDependsOnDeployment() bool {
	if o != nil && !IsNil(o.DependsOnDeployment) {
		return true
	}

	return false
}

// SetDependsOnDeployment gets a reference to the given []string and assigns it to the DependsOnDeployment field.
func (o *ServiceDeploymentDetails) SetDependsOnDeployment(v []string) {
	o.DependsOnDeployment = v
}

// GetFailedReason returns the FailedReason field value if set, zero value otherwise.
func (o *ServiceDeploymentDetails) GetFailedReason() string {
	if o == nil || IsNil(o.FailedReason) {
		var ret string
		return ret
	}
	return *o.FailedReason
}

// GetFailedReasonOk returns a tuple with the FailedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceDeploymentDetails) GetFailedReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailedReason) {
		return nil, false
	}
	return o.FailedReason, true
}

// HasFailedReason returns a boolean if a field has been set.
func (o *ServiceDeploymentDetails) HasFailedReason() bool {
	if o != nil && !IsNil(o.FailedReason) {
		return true
	}

	return false
}

// SetFailedReason gets a reference to the given string and assigns it to the FailedReason field.
func (o *ServiceDeploymentDetails) SetFailedReason(v string) {
	o.FailedReason = &v
}

// GetInstanceDeploymentAlias returns the InstanceDeploymentAlias field value
func (o *ServiceDeploymentDetails) GetInstanceDeploymentAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceDeploymentAlias
}

// GetInstanceDeploymentAliasOk returns a tuple with the InstanceDeploymentAlias field value
// and a boolean to check if the value has been set.
func (o *ServiceDeploymentDetails) GetInstanceDeploymentAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceDeploymentAlias, true
}

// SetInstanceDeploymentAlias sets field value
func (o *ServiceDeploymentDetails) SetInstanceDeploymentAlias(v string) {
	o.InstanceDeploymentAlias = v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *ServiceDeploymentDetails) GetInstanceId() string {
	if o == nil || IsNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceDeploymentDetails) GetInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *ServiceDeploymentDetails) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *ServiceDeploymentDetails) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetServiceId returns the ServiceId field value
func (o *ServiceDeploymentDetails) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *ServiceDeploymentDetails) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *ServiceDeploymentDetails) SetServiceId(v string) {
	o.ServiceId = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ServiceDeploymentDetails) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceDeploymentDetails) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ServiceDeploymentDetails) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ServiceDeploymentDetails) SetStatus(v string) {
	o.Status = &v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *ServiceDeploymentDetails) GetStatusMessage() string {
	if o == nil || IsNil(o.StatusMessage) {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceDeploymentDetails) GetStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StatusMessage) {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *ServiceDeploymentDetails) HasStatusMessage() bool {
	if o != nil && !IsNil(o.StatusMessage) {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *ServiceDeploymentDetails) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *ServiceDeploymentDetails) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *ServiceDeploymentDetails) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *ServiceDeploymentDetails) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

func (o ServiceDeploymentDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceDeploymentDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DependsOnDeployment) {
		toSerialize["dependsOnDeployment"] = o.DependsOnDeployment
	}
	if !IsNil(o.FailedReason) {
		toSerialize["failedReason"] = o.FailedReason
	}
	toSerialize["instanceDeploymentAlias"] = o.InstanceDeploymentAlias
	if !IsNil(o.InstanceId) {
		toSerialize["instanceId"] = o.InstanceId
	}
	toSerialize["serviceId"] = o.ServiceId
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusMessage) {
		toSerialize["statusMessage"] = o.StatusMessage
	}
	toSerialize["subscriptionId"] = o.SubscriptionId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceDeploymentDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instanceDeploymentAlias",
		"serviceId",
		"subscriptionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceDeploymentDetails := _ServiceDeploymentDetails{}

	err = json.Unmarshal(data, &varServiceDeploymentDetails)

	if err != nil {
		return err
	}

	*o = ServiceDeploymentDetails(varServiceDeploymentDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dependsOnDeployment")
		delete(additionalProperties, "failedReason")
		delete(additionalProperties, "instanceDeploymentAlias")
		delete(additionalProperties, "instanceId")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "status")
		delete(additionalProperties, "statusMessage")
		delete(additionalProperties, "subscriptionId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceDeploymentDetails struct {
	value *ServiceDeploymentDetails
	isSet bool
}

func (v NullableServiceDeploymentDetails) Get() *ServiceDeploymentDetails {
	return v.value
}

func (v *NullableServiceDeploymentDetails) Set(val *ServiceDeploymentDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceDeploymentDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceDeploymentDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceDeploymentDetails(val *ServiceDeploymentDetails) *NullableServiceDeploymentDetails {
	return &NullableServiceDeploymentDetails{value: val, isSet: true}
}

func (v NullableServiceDeploymentDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceDeploymentDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


