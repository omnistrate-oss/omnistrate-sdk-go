/*
Omnistrate Fleet API

REST API for Omnistrate Fleet

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fleet

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type FleetWorkflowsApiAPI interface {

	/*
	FleetWorkflowsApiDescribeServiceWorkflow DescribeServiceWorkflow fleet-workflows-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId The service ID this workflow belongs to.
	@param environmentId The service environment ID this workflow belongs to.
	@param id ID of the ServiceWorkflow
	@return ApiFleetWorkflowsApiDescribeServiceWorkflowRequest
	*/
	FleetWorkflowsApiDescribeServiceWorkflow(ctx context.Context, serviceId string, environmentId string, id string) ApiFleetWorkflowsApiDescribeServiceWorkflowRequest

	// FleetWorkflowsApiDescribeServiceWorkflowExecute executes the request
	//  @return DescribeServiceWorkflowResult
	FleetWorkflowsApiDescribeServiceWorkflowExecute(r ApiFleetWorkflowsApiDescribeServiceWorkflowRequest) (*DescribeServiceWorkflowResult, *http.Response, error)

	/*
	FleetWorkflowsApiDescribeServiceWorkflowSummary DescribeServiceWorkflowSummary fleet-workflows-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId The service ID this workflow belongs to.
	@param environmentId The service environment ID this workflow belongs to.
	@return ApiFleetWorkflowsApiDescribeServiceWorkflowSummaryRequest
	*/
	FleetWorkflowsApiDescribeServiceWorkflowSummary(ctx context.Context, serviceId string, environmentId string) ApiFleetWorkflowsApiDescribeServiceWorkflowSummaryRequest

	// FleetWorkflowsApiDescribeServiceWorkflowSummaryExecute executes the request
	//  @return DescribeServiceWorkflowSummaryResult
	FleetWorkflowsApiDescribeServiceWorkflowSummaryExecute(r ApiFleetWorkflowsApiDescribeServiceWorkflowSummaryRequest) (*DescribeServiceWorkflowSummaryResult, *http.Response, error)

	/*
	FleetWorkflowsApiGetWorkflowEvents GetWorkflowEvents fleet-workflows-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId The service ID this workflow belongs to.
	@param environmentId The service environment ID this workflow belongs to.
	@param id ID of the ServiceWorkflow
	@return ApiFleetWorkflowsApiGetWorkflowEventsRequest
	*/
	FleetWorkflowsApiGetWorkflowEvents(ctx context.Context, serviceId string, environmentId string, id string) ApiFleetWorkflowsApiGetWorkflowEventsRequest

	// FleetWorkflowsApiGetWorkflowEventsExecute executes the request
	//  @return GetWorkflowEventsResult
	FleetWorkflowsApiGetWorkflowEventsExecute(r ApiFleetWorkflowsApiGetWorkflowEventsRequest) (*GetWorkflowEventsResult, *http.Response, error)

	/*
	FleetWorkflowsApiListServiceWorkflows ListServiceWorkflows fleet-workflows-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId The service ID this workflow belongs to.
	@param environmentId The service environment ID this workflow belongs to.
	@return ApiFleetWorkflowsApiListServiceWorkflowsRequest
	*/
	FleetWorkflowsApiListServiceWorkflows(ctx context.Context, serviceId string, environmentId string) ApiFleetWorkflowsApiListServiceWorkflowsRequest

	// FleetWorkflowsApiListServiceWorkflowsExecute executes the request
	//  @return ListServiceWorkflowsResult
	FleetWorkflowsApiListServiceWorkflowsExecute(r ApiFleetWorkflowsApiListServiceWorkflowsRequest) (*ListServiceWorkflowsResult, *http.Response, error)

	/*
	FleetWorkflowsApiTerminateServiceWorkflow TerminateServiceWorkflow fleet-workflows-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId The service ID this workflow belongs to.
	@param environmentId The service environment ID this workflow belongs to.
	@param id ID of the ServiceWorkflow
	@return ApiFleetWorkflowsApiTerminateServiceWorkflowRequest
	*/
	FleetWorkflowsApiTerminateServiceWorkflow(ctx context.Context, serviceId string, environmentId string, id string) ApiFleetWorkflowsApiTerminateServiceWorkflowRequest

	// FleetWorkflowsApiTerminateServiceWorkflowExecute executes the request
	//  @return ServiceWorkflow
	FleetWorkflowsApiTerminateServiceWorkflowExecute(r ApiFleetWorkflowsApiTerminateServiceWorkflowRequest) (*ServiceWorkflow, *http.Response, error)

	/*
	FleetWorkflowsApiUpdateServiceWorkflow UpdateServiceWorkflow fleet-workflows-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId The service ID this workflow belongs to.
	@param environmentId The service environment ID this workflow belongs to.
	@param id ID of the ServiceWorkflow
	@return ApiFleetWorkflowsApiUpdateServiceWorkflowRequest
	*/
	FleetWorkflowsApiUpdateServiceWorkflow(ctx context.Context, serviceId string, environmentId string, id string) ApiFleetWorkflowsApiUpdateServiceWorkflowRequest

	// FleetWorkflowsApiUpdateServiceWorkflowExecute executes the request
	//  @return ServiceWorkflow
	FleetWorkflowsApiUpdateServiceWorkflowExecute(r ApiFleetWorkflowsApiUpdateServiceWorkflowRequest) (*ServiceWorkflow, *http.Response, error)
}

// FleetWorkflowsApiAPIService FleetWorkflowsApiAPI service
type FleetWorkflowsApiAPIService service

type ApiFleetWorkflowsApiDescribeServiceWorkflowRequest struct {
	ctx context.Context
	ApiService FleetWorkflowsApiAPI
	serviceId string
	environmentId string
	id string
}

func (r ApiFleetWorkflowsApiDescribeServiceWorkflowRequest) Execute() (*DescribeServiceWorkflowResult, *http.Response, error) {
	return r.ApiService.FleetWorkflowsApiDescribeServiceWorkflowExecute(r)
}

/*
FleetWorkflowsApiDescribeServiceWorkflow DescribeServiceWorkflow fleet-workflows-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId The service ID this workflow belongs to.
 @param environmentId The service environment ID this workflow belongs to.
 @param id ID of the ServiceWorkflow
 @return ApiFleetWorkflowsApiDescribeServiceWorkflowRequest
*/
func (a *FleetWorkflowsApiAPIService) FleetWorkflowsApiDescribeServiceWorkflow(ctx context.Context, serviceId string, environmentId string, id string) ApiFleetWorkflowsApiDescribeServiceWorkflowRequest {
	return ApiFleetWorkflowsApiDescribeServiceWorkflowRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		environmentId: environmentId,
		id: id,
	}
}

// Execute executes the request
//  @return DescribeServiceWorkflowResult
func (a *FleetWorkflowsApiAPIService) FleetWorkflowsApiDescribeServiceWorkflowExecute(r ApiFleetWorkflowsApiDescribeServiceWorkflowRequest) (*DescribeServiceWorkflowResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DescribeServiceWorkflowResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FleetWorkflowsApiAPIService.FleetWorkflowsApiDescribeServiceWorkflow")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/service/{serviceId}/environment/{environmentId}/service-workflows/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", url.PathEscape(parameterValueToString(r.environmentId, "environmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFleetWorkflowsApiDescribeServiceWorkflowSummaryRequest struct {
	ctx context.Context
	ApiService FleetWorkflowsApiAPI
	serviceId string
	environmentId string
}

func (r ApiFleetWorkflowsApiDescribeServiceWorkflowSummaryRequest) Execute() (*DescribeServiceWorkflowSummaryResult, *http.Response, error) {
	return r.ApiService.FleetWorkflowsApiDescribeServiceWorkflowSummaryExecute(r)
}

/*
FleetWorkflowsApiDescribeServiceWorkflowSummary DescribeServiceWorkflowSummary fleet-workflows-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId The service ID this workflow belongs to.
 @param environmentId The service environment ID this workflow belongs to.
 @return ApiFleetWorkflowsApiDescribeServiceWorkflowSummaryRequest
*/
func (a *FleetWorkflowsApiAPIService) FleetWorkflowsApiDescribeServiceWorkflowSummary(ctx context.Context, serviceId string, environmentId string) ApiFleetWorkflowsApiDescribeServiceWorkflowSummaryRequest {
	return ApiFleetWorkflowsApiDescribeServiceWorkflowSummaryRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		environmentId: environmentId,
	}
}

// Execute executes the request
//  @return DescribeServiceWorkflowSummaryResult
func (a *FleetWorkflowsApiAPIService) FleetWorkflowsApiDescribeServiceWorkflowSummaryExecute(r ApiFleetWorkflowsApiDescribeServiceWorkflowSummaryRequest) (*DescribeServiceWorkflowSummaryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DescribeServiceWorkflowSummaryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FleetWorkflowsApiAPIService.FleetWorkflowsApiDescribeServiceWorkflowSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/service/{serviceId}/environment/{environmentId}/service-workflows-summary"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", url.PathEscape(parameterValueToString(r.environmentId, "environmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFleetWorkflowsApiGetWorkflowEventsRequest struct {
	ctx context.Context
	ApiService FleetWorkflowsApiAPI
	serviceId string
	environmentId string
	id string
}

func (r ApiFleetWorkflowsApiGetWorkflowEventsRequest) Execute() (*GetWorkflowEventsResult, *http.Response, error) {
	return r.ApiService.FleetWorkflowsApiGetWorkflowEventsExecute(r)
}

/*
FleetWorkflowsApiGetWorkflowEvents GetWorkflowEvents fleet-workflows-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId The service ID this workflow belongs to.
 @param environmentId The service environment ID this workflow belongs to.
 @param id ID of the ServiceWorkflow
 @return ApiFleetWorkflowsApiGetWorkflowEventsRequest
*/
func (a *FleetWorkflowsApiAPIService) FleetWorkflowsApiGetWorkflowEvents(ctx context.Context, serviceId string, environmentId string, id string) ApiFleetWorkflowsApiGetWorkflowEventsRequest {
	return ApiFleetWorkflowsApiGetWorkflowEventsRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		environmentId: environmentId,
		id: id,
	}
}

// Execute executes the request
//  @return GetWorkflowEventsResult
func (a *FleetWorkflowsApiAPIService) FleetWorkflowsApiGetWorkflowEventsExecute(r ApiFleetWorkflowsApiGetWorkflowEventsRequest) (*GetWorkflowEventsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetWorkflowEventsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FleetWorkflowsApiAPIService.FleetWorkflowsApiGetWorkflowEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/service/{serviceId}/environment/{environmentId}/service-workflows/{id}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", url.PathEscape(parameterValueToString(r.environmentId, "environmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFleetWorkflowsApiListServiceWorkflowsRequest struct {
	ctx context.Context
	ApiService FleetWorkflowsApiAPI
	serviceId string
	environmentId string
	instanceId *string
	nextPageToken *string
	pageSize *int64
}

// The instance ID of the workflow
func (r ApiFleetWorkflowsApiListServiceWorkflowsRequest) InstanceId(instanceId string) ApiFleetWorkflowsApiListServiceWorkflowsRequest {
	r.instanceId = &instanceId
	return r
}

// The next token to use for pagination
func (r ApiFleetWorkflowsApiListServiceWorkflowsRequest) NextPageToken(nextPageToken string) ApiFleetWorkflowsApiListServiceWorkflowsRequest {
	r.nextPageToken = &nextPageToken
	return r
}

// The number of resources to return per page
func (r ApiFleetWorkflowsApiListServiceWorkflowsRequest) PageSize(pageSize int64) ApiFleetWorkflowsApiListServiceWorkflowsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiFleetWorkflowsApiListServiceWorkflowsRequest) Execute() (*ListServiceWorkflowsResult, *http.Response, error) {
	return r.ApiService.FleetWorkflowsApiListServiceWorkflowsExecute(r)
}

/*
FleetWorkflowsApiListServiceWorkflows ListServiceWorkflows fleet-workflows-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId The service ID this workflow belongs to.
 @param environmentId The service environment ID this workflow belongs to.
 @return ApiFleetWorkflowsApiListServiceWorkflowsRequest
*/
func (a *FleetWorkflowsApiAPIService) FleetWorkflowsApiListServiceWorkflows(ctx context.Context, serviceId string, environmentId string) ApiFleetWorkflowsApiListServiceWorkflowsRequest {
	return ApiFleetWorkflowsApiListServiceWorkflowsRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		environmentId: environmentId,
	}
}

// Execute executes the request
//  @return ListServiceWorkflowsResult
func (a *FleetWorkflowsApiAPIService) FleetWorkflowsApiListServiceWorkflowsExecute(r ApiFleetWorkflowsApiListServiceWorkflowsRequest) (*ListServiceWorkflowsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListServiceWorkflowsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FleetWorkflowsApiAPIService.FleetWorkflowsApiListServiceWorkflows")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/service/{serviceId}/environment/{environmentId}/service-workflows"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", url.PathEscape(parameterValueToString(r.environmentId, "environmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.instanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceId", r.instanceId, "form", "")
	}
	if r.nextPageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextPageToken", r.nextPageToken, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFleetWorkflowsApiTerminateServiceWorkflowRequest struct {
	ctx context.Context
	ApiService FleetWorkflowsApiAPI
	serviceId string
	environmentId string
	id string
}

func (r ApiFleetWorkflowsApiTerminateServiceWorkflowRequest) Execute() (*ServiceWorkflow, *http.Response, error) {
	return r.ApiService.FleetWorkflowsApiTerminateServiceWorkflowExecute(r)
}

/*
FleetWorkflowsApiTerminateServiceWorkflow TerminateServiceWorkflow fleet-workflows-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId The service ID this workflow belongs to.
 @param environmentId The service environment ID this workflow belongs to.
 @param id ID of the ServiceWorkflow
 @return ApiFleetWorkflowsApiTerminateServiceWorkflowRequest
*/
func (a *FleetWorkflowsApiAPIService) FleetWorkflowsApiTerminateServiceWorkflow(ctx context.Context, serviceId string, environmentId string, id string) ApiFleetWorkflowsApiTerminateServiceWorkflowRequest {
	return ApiFleetWorkflowsApiTerminateServiceWorkflowRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		environmentId: environmentId,
		id: id,
	}
}

// Execute executes the request
//  @return ServiceWorkflow
func (a *FleetWorkflowsApiAPIService) FleetWorkflowsApiTerminateServiceWorkflowExecute(r ApiFleetWorkflowsApiTerminateServiceWorkflowRequest) (*ServiceWorkflow, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceWorkflow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FleetWorkflowsApiAPIService.FleetWorkflowsApiTerminateServiceWorkflow")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/service/{serviceId}/environment/{environmentId}/service-workflows/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", url.PathEscape(parameterValueToString(r.environmentId, "environmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFleetWorkflowsApiUpdateServiceWorkflowRequest struct {
	ctx context.Context
	ApiService FleetWorkflowsApiAPI
	serviceId string
	environmentId string
	id string
	updateServiceWorkflowRequest2 *UpdateServiceWorkflowRequest2
}

func (r ApiFleetWorkflowsApiUpdateServiceWorkflowRequest) UpdateServiceWorkflowRequest2(updateServiceWorkflowRequest2 UpdateServiceWorkflowRequest2) ApiFleetWorkflowsApiUpdateServiceWorkflowRequest {
	r.updateServiceWorkflowRequest2 = &updateServiceWorkflowRequest2
	return r
}

func (r ApiFleetWorkflowsApiUpdateServiceWorkflowRequest) Execute() (*ServiceWorkflow, *http.Response, error) {
	return r.ApiService.FleetWorkflowsApiUpdateServiceWorkflowExecute(r)
}

/*
FleetWorkflowsApiUpdateServiceWorkflow UpdateServiceWorkflow fleet-workflows-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId The service ID this workflow belongs to.
 @param environmentId The service environment ID this workflow belongs to.
 @param id ID of the ServiceWorkflow
 @return ApiFleetWorkflowsApiUpdateServiceWorkflowRequest
*/
func (a *FleetWorkflowsApiAPIService) FleetWorkflowsApiUpdateServiceWorkflow(ctx context.Context, serviceId string, environmentId string, id string) ApiFleetWorkflowsApiUpdateServiceWorkflowRequest {
	return ApiFleetWorkflowsApiUpdateServiceWorkflowRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		environmentId: environmentId,
		id: id,
	}
}

// Execute executes the request
//  @return ServiceWorkflow
func (a *FleetWorkflowsApiAPIService) FleetWorkflowsApiUpdateServiceWorkflowExecute(r ApiFleetWorkflowsApiUpdateServiceWorkflowRequest) (*ServiceWorkflow, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceWorkflow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FleetWorkflowsApiAPIService.FleetWorkflowsApiUpdateServiceWorkflow")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/fleet/service/{serviceId}/environment/{environmentId}/service-workflows/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", url.PathEscape(parameterValueToString(r.environmentId, "environmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateServiceWorkflowRequest2 == nil {
		return localVarReturnValue, nil, reportError("updateServiceWorkflowRequest2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateServiceWorkflowRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
