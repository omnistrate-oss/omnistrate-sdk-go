/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdatePasswordRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePasswordRequestBody{}

// UpdatePasswordRequestBody struct for UpdatePasswordRequestBody
type UpdatePasswordRequestBody struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	CurrentPasswordHash *string `json:"currentPasswordHash,omitempty"`
	Password string `json:"password"`
}

type _UpdatePasswordRequestBody UpdatePasswordRequestBody

// NewUpdatePasswordRequestBody instantiates a new UpdatePasswordRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePasswordRequestBody(password string) *UpdatePasswordRequestBody {
	this := UpdatePasswordRequestBody{}
	this.Password = password
	return &this
}

// NewUpdatePasswordRequestBodyWithDefaults instantiates a new UpdatePasswordRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePasswordRequestBodyWithDefaults() *UpdatePasswordRequestBody {
	this := UpdatePasswordRequestBody{}
	return &this
}

// GetCurrentPassword returns the CurrentPassword field value if set, zero value otherwise.
func (o *UpdatePasswordRequestBody) GetCurrentPassword() string {
	if o == nil || IsNil(o.CurrentPassword) {
		var ret string
		return ret
	}
	return *o.CurrentPassword
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePasswordRequestBody) GetCurrentPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPassword) {
		return nil, false
	}
	return o.CurrentPassword, true
}

// SetCurrentPassword gets a reference to the given string and assigns it to the CurrentPassword field.
func (o *UpdatePasswordRequestBody) SetCurrentPassword(v string) {
	o.CurrentPassword = &v
}

// GetCurrentPasswordHash returns the CurrentPasswordHash field value if set, zero value otherwise.
func (o *UpdatePasswordRequestBody) GetCurrentPasswordHash() string {
	if o == nil || IsNil(o.CurrentPasswordHash) {
		var ret string
		return ret
	}
	return *o.CurrentPasswordHash
}

// GetCurrentPasswordHashOk returns a tuple with the CurrentPasswordHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePasswordRequestBody) GetCurrentPasswordHashOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPasswordHash) {
		return nil, false
	}
	return o.CurrentPasswordHash, true
}

// SetCurrentPasswordHash gets a reference to the given string and assigns it to the CurrentPasswordHash field.
func (o *UpdatePasswordRequestBody) SetCurrentPasswordHash(v string) {
	o.CurrentPasswordHash = &v
}

// GetPassword returns the Password field value
func (o *UpdatePasswordRequestBody) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UpdatePasswordRequestBody) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UpdatePasswordRequestBody) SetPassword(v string) {
	o.Password = v
}

func (o UpdatePasswordRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePasswordRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentPassword) {
		toSerialize["currentPassword"] = o.CurrentPassword
	}
	if !IsNil(o.CurrentPasswordHash) {
		toSerialize["currentPasswordHash"] = o.CurrentPasswordHash
	}
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

func (o *UpdatePasswordRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdatePasswordRequestBody := _UpdatePasswordRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdatePasswordRequestBody)

	if err != nil {
		return err
	}

	*o = UpdatePasswordRequestBody(varUpdatePasswordRequestBody)

	return err
}

type NullableUpdatePasswordRequestBody struct {
	value *UpdatePasswordRequestBody
	isSet bool
}

func (v NullableUpdatePasswordRequestBody) Get() *UpdatePasswordRequestBody {
	return v.value
}

func (v *NullableUpdatePasswordRequestBody) Set(val *UpdatePasswordRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePasswordRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePasswordRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePasswordRequestBody(val *UpdatePasswordRequestBody) *NullableUpdatePasswordRequestBody {
	return &NullableUpdatePasswordRequestBody{value: val, isSet: true}
}

func (v NullableUpdatePasswordRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePasswordRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


