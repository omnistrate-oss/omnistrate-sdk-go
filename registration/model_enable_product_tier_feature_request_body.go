/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EnableProductTierFeatureRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnableProductTierFeatureRequestBody{}

// EnableProductTierFeatureRequestBody struct for EnableProductTierFeatureRequestBody
type EnableProductTierFeatureRequestBody struct {
	// The configuration parameters of the product tier feature
	Configuration map[string]interface{} `json:"configuration,omitempty"`
	// Feature to enable
	Feature string `json:"feature"`
	// Feature scope
	Scope *string `json:"scope,omitempty"`
}

type _EnableProductTierFeatureRequestBody EnableProductTierFeatureRequestBody

// NewEnableProductTierFeatureRequestBody instantiates a new EnableProductTierFeatureRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnableProductTierFeatureRequestBody(feature string) *EnableProductTierFeatureRequestBody {
	this := EnableProductTierFeatureRequestBody{}
	this.Feature = feature
	return &this
}

// NewEnableProductTierFeatureRequestBodyWithDefaults instantiates a new EnableProductTierFeatureRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnableProductTierFeatureRequestBodyWithDefaults() *EnableProductTierFeatureRequestBody {
	this := EnableProductTierFeatureRequestBody{}
	return &this
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *EnableProductTierFeatureRequestBody) GetConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnableProductTierFeatureRequestBody) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Configuration) {
		return map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// SetConfiguration gets a reference to the given map[string]interface{} and assigns it to the Configuration field.
func (o *EnableProductTierFeatureRequestBody) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

// GetFeature returns the Feature field value
func (o *EnableProductTierFeatureRequestBody) GetFeature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value
// and a boolean to check if the value has been set.
func (o *EnableProductTierFeatureRequestBody) GetFeatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Feature, true
}

// SetFeature sets field value
func (o *EnableProductTierFeatureRequestBody) SetFeature(v string) {
	o.Feature = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *EnableProductTierFeatureRequestBody) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnableProductTierFeatureRequestBody) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *EnableProductTierFeatureRequestBody) SetScope(v string) {
	o.Scope = &v
}

func (o EnableProductTierFeatureRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnableProductTierFeatureRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	toSerialize["feature"] = o.Feature
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

func (o *EnableProductTierFeatureRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"feature",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnableProductTierFeatureRequestBody := _EnableProductTierFeatureRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnableProductTierFeatureRequestBody)

	if err != nil {
		return err
	}

	*o = EnableProductTierFeatureRequestBody(varEnableProductTierFeatureRequestBody)

	return err
}

type NullableEnableProductTierFeatureRequestBody struct {
	value *EnableProductTierFeatureRequestBody
	isSet bool
}

func (v NullableEnableProductTierFeatureRequestBody) Get() *EnableProductTierFeatureRequestBody {
	return v.value
}

func (v *NullableEnableProductTierFeatureRequestBody) Set(val *EnableProductTierFeatureRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableEnableProductTierFeatureRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableEnableProductTierFeatureRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnableProductTierFeatureRequestBody(val *EnableProductTierFeatureRequestBody) *NullableEnableProductTierFeatureRequestBody {
	return &NullableEnableProductTierFeatureRequestBody{value: val, isSet: true}
}

func (v NullableEnableProductTierFeatureRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnableProductTierFeatureRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


