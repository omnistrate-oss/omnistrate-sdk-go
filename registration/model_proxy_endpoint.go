/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
)

// checks if the ProxyEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProxyEndpoint{}

// ProxyEndpoint struct for ProxyEndpoint
type ProxyEndpoint struct {
	OpenPorts []string `json:"openPorts,omitempty"`
	ProxyEndpoint *string `json:"proxyEndpoint,omitempty"`
}

// NewProxyEndpoint instantiates a new ProxyEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProxyEndpoint() *ProxyEndpoint {
	this := ProxyEndpoint{}
	return &this
}

// NewProxyEndpointWithDefaults instantiates a new ProxyEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProxyEndpointWithDefaults() *ProxyEndpoint {
	this := ProxyEndpoint{}
	return &this
}

// GetOpenPorts returns the OpenPorts field value if set, zero value otherwise.
func (o *ProxyEndpoint) GetOpenPorts() []string {
	if o == nil || IsNil(o.OpenPorts) {
		var ret []string
		return ret
	}
	return o.OpenPorts
}

// GetOpenPortsOk returns a tuple with the OpenPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProxyEndpoint) GetOpenPortsOk() ([]string, bool) {
	if o == nil || IsNil(o.OpenPorts) {
		return nil, false
	}
	return o.OpenPorts, true
}

// HasOpenPorts returns a boolean if a field has been set.
func (o *ProxyEndpoint) HasOpenPorts() bool {
	if o != nil && !IsNil(o.OpenPorts) {
		return true
	}

	return false
}

// SetOpenPorts gets a reference to the given []string and assigns it to the OpenPorts field.
func (o *ProxyEndpoint) SetOpenPorts(v []string) {
	o.OpenPorts = v
}

// GetProxyEndpoint returns the ProxyEndpoint field value if set, zero value otherwise.
func (o *ProxyEndpoint) GetProxyEndpoint() string {
	if o == nil || IsNil(o.ProxyEndpoint) {
		var ret string
		return ret
	}
	return *o.ProxyEndpoint
}

// GetProxyEndpointOk returns a tuple with the ProxyEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProxyEndpoint) GetProxyEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyEndpoint) {
		return nil, false
	}
	return o.ProxyEndpoint, true
}

// HasProxyEndpoint returns a boolean if a field has been set.
func (o *ProxyEndpoint) HasProxyEndpoint() bool {
	if o != nil && !IsNil(o.ProxyEndpoint) {
		return true
	}

	return false
}

// SetProxyEndpoint gets a reference to the given string and assigns it to the ProxyEndpoint field.
func (o *ProxyEndpoint) SetProxyEndpoint(v string) {
	o.ProxyEndpoint = &v
}

func (o ProxyEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProxyEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OpenPorts) {
		toSerialize["openPorts"] = o.OpenPorts
	}
	if !IsNil(o.ProxyEndpoint) {
		toSerialize["proxyEndpoint"] = o.ProxyEndpoint
	}
	return toSerialize, nil
}

type NullableProxyEndpoint struct {
	value *ProxyEndpoint
	isSet bool
}

func (v NullableProxyEndpoint) Get() *ProxyEndpoint {
	return v.value
}

func (v *NullableProxyEndpoint) Set(val *ProxyEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableProxyEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableProxyEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProxyEndpoint(val *ProxyEndpoint) *NullableProxyEndpoint {
	return &NullableProxyEndpoint{value: val, isSet: true}
}

func (v NullableProxyEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProxyEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


