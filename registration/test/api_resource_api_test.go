/*
Omnistrate Registration API

Testing ResourceApiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package registration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/omnistrate/omnistrate-sdk-go"
)

func Test_registration_ResourceApiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ResourceApiAPIService ResourceApiAddFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ResourceApiAPI.ResourceApiAddFile(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiAddResourceDependency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string
		var resourceDependencyId string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiAddResourceDependency(context.Background(), serviceId, id, resourceDependencyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiCreateResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.ResourceApiAPI.ResourceApiCreateResource(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiDeleteResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiDeleteResource(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiDeprecateResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiDeprecateResource(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiDeregisterActionHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiDeregisterActionHook(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiDeregisterResourceMetricsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiDeregisterResourceMetricsConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiDescribeResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ResourceApiAPI.ResourceApiDescribeResource(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiDescribeResourceMetricsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ResourceApiAPI.ResourceApiDescribeResourceMetricsConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiDisableResourceCapability", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiDisableResourceCapability(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiEnableResourceCapability", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiEnableResourceCapability(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiGetFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string
		var fileId string

		resp, httpRes, err := apiClient.ResourceApiAPI.ResourceApiGetFile(context.Background(), serviceId, id, fileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiListActionHooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ResourceApiAPI.ResourceApiListActionHooks(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiListDependentResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ResourceApiAPI.ResourceApiListDependentResource(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiListFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ResourceApiAPI.ResourceApiListFiles(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiListResourceCapabilities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ResourceApiAPI.ResourceApiListResourceCapabilities(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiListResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string

		resp, httpRes, err := apiClient.ResourceApiAPI.ResourceApiListResources(context.Background(), serviceId, productTierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiRegisterActionHook", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiRegisterActionHook(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiRegisterResourceMetricsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiRegisterResourceMetricsConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiRemoveFile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string
		var fileId string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiRemoveFile(context.Background(), serviceId, id, fileId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiRemoveResourceDependency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string
		var resourceDependencyId string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiRemoveResourceDependency(context.Background(), serviceId, id, resourceDependencyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiSetEnvironmentVariables", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiSetEnvironmentVariables(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiUnsetEnvironmentVariables", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiUnsetEnvironmentVariables(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiUpdateFileContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string
		var fileId string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiUpdateFileContent(context.Background(), serviceId, id, fileId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiUpdateFileMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string
		var fileId string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiUpdateFileMetadata(context.Background(), serviceId, id, fileId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceApiAPIService ResourceApiUpdateResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ResourceApiAPI.ResourceApiUpdateResource(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
