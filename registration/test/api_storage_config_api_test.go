/*
Omnistrate Registration API

Testing StorageConfigApiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package registration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/omnistrate/omnistrate-sdk-go/registration"
)

func Test_registration_StorageConfigApiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StorageConfigApiAPIService StorageConfigApiAddStorageVolumeConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string
		var storageVolumeConfigId string

		httpRes, err := apiClient.StorageConfigApiAPI.StorageConfigApiAddStorageVolumeConfig(context.Background(), serviceId, id, storageVolumeConfigId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageConfigApiAPIService StorageConfigApiCreateStorageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.StorageConfigApiAPI.StorageConfigApiCreateStorageConfig(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageConfigApiAPIService StorageConfigApiDeleteStorageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.StorageConfigApiAPI.StorageConfigApiDeleteStorageConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageConfigApiAPIService StorageConfigApiDescribeStorageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.StorageConfigApiAPI.StorageConfigApiDescribeStorageConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageConfigApiAPIService StorageConfigApiListStorageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.StorageConfigApiAPI.StorageConfigApiListStorageConfig(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageConfigApiAPIService StorageConfigApiRemoveStorageVolumeConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string
		var storageVolumeConfigId string

		httpRes, err := apiClient.StorageConfigApiAPI.StorageConfigApiRemoveStorageVolumeConfig(context.Background(), serviceId, id, storageVolumeConfigId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageConfigApiAPIService StorageConfigApiUpdateStorageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.StorageConfigApiAPI.StorageConfigApiUpdateStorageConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
