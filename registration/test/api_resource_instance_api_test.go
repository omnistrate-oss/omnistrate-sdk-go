/*
Omnistrate Registration API

Testing ResourceInstanceApiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package registration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/omnistrate/omnistrate-sdk-go"
)

func Test_registration_ResourceInstanceApiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiAddCapacityToResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string
		var id string

		httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiAddCapacityToResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiAddCustomDNSToResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string
		var id string

		httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiAddCustomDNSToResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiCreateResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string

		resp, httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiCreateResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiDeleteResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string
		var id string

		httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiDeleteResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiDescribeResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string
		var id string

		resp, httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiDescribeResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiFailoverResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string
		var id string

		httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiFailoverResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiListResourceInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string

		resp, httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiListResourceInstances(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiRemoveCapacityFromResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string
		var id string

		httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiRemoveCapacityFromResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiRemoveCustomDNSFromResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string
		var id string

		httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiRemoveCustomDNSFromResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiResourceInstanceProvisionerSetupKit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string

		httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiResourceInstanceProvisionerSetupKit(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiRestartResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string
		var id string

		httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiRestartResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiRestoreResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string
		var id string

		resp, httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiRestoreResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiStartResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string
		var id string

		httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiStartResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiStopResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string
		var id string

		httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiStopResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceInstanceApiAPIService ResourceInstanceApiUpdateResourceInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string
		var resourceKey string
		var id string

		httpRes, err := apiClient.ResourceInstanceApiAPI.ResourceInstanceApiUpdateResourceInstance(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey, resourceKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
