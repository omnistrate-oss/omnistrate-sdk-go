/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DescribeIdentityProviderResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeIdentityProviderResult{}

// DescribeIdentityProviderResult struct for DescribeIdentityProviderResult
type DescribeIdentityProviderResult struct {
	// The Client ID of the Identity Provider
	ClientId string `json:"clientId"`
	// The Client Secret of the Identity Provider
	ClientSecret *string `json:"clientSecret,omitempty"`
	// The Identity Provider ID
	Id string `json:"id"`
	// The name of the Identity Provider
	IdentityProviderName string `json:"identityProviderName"`
	// The status of the Identity Provider
	Status string `json:"status"`
}

type _DescribeIdentityProviderResult DescribeIdentityProviderResult

// NewDescribeIdentityProviderResult instantiates a new DescribeIdentityProviderResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeIdentityProviderResult(clientId string, id string, identityProviderName string, status string) *DescribeIdentityProviderResult {
	this := DescribeIdentityProviderResult{}
	this.ClientId = clientId
	this.Id = id
	this.IdentityProviderName = identityProviderName
	this.Status = status
	return &this
}

// NewDescribeIdentityProviderResultWithDefaults instantiates a new DescribeIdentityProviderResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeIdentityProviderResultWithDefaults() *DescribeIdentityProviderResult {
	this := DescribeIdentityProviderResult{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *DescribeIdentityProviderResult) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *DescribeIdentityProviderResult) SetClientId(v string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *DescribeIdentityProviderResult) GetClientSecret() string {
	if o == nil || IsNil(o.ClientSecret) {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.ClientSecret) {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *DescribeIdentityProviderResult) HasClientSecret() bool {
	if o != nil && !IsNil(o.ClientSecret) {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *DescribeIdentityProviderResult) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetId returns the Id field value
func (o *DescribeIdentityProviderResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DescribeIdentityProviderResult) SetId(v string) {
	o.Id = v
}

// GetIdentityProviderName returns the IdentityProviderName field value
func (o *DescribeIdentityProviderResult) GetIdentityProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentityProviderName
}

// GetIdentityProviderNameOk returns a tuple with the IdentityProviderName field value
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetIdentityProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentityProviderName, true
}

// SetIdentityProviderName sets field value
func (o *DescribeIdentityProviderResult) SetIdentityProviderName(v string) {
	o.IdentityProviderName = v
}

// GetStatus returns the Status field value
func (o *DescribeIdentityProviderResult) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DescribeIdentityProviderResult) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DescribeIdentityProviderResult) SetStatus(v string) {
	o.Status = v
}

func (o DescribeIdentityProviderResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeIdentityProviderResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clientId"] = o.ClientId
	if !IsNil(o.ClientSecret) {
		toSerialize["clientSecret"] = o.ClientSecret
	}
	toSerialize["id"] = o.Id
	toSerialize["identityProviderName"] = o.IdentityProviderName
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *DescribeIdentityProviderResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clientId",
		"id",
		"identityProviderName",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeIdentityProviderResult := _DescribeIdentityProviderResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeIdentityProviderResult)

	if err != nil {
		return err
	}

	*o = DescribeIdentityProviderResult(varDescribeIdentityProviderResult)

	return err
}

type NullableDescribeIdentityProviderResult struct {
	value *DescribeIdentityProviderResult
	isSet bool
}

func (v NullableDescribeIdentityProviderResult) Get() *DescribeIdentityProviderResult {
	return v.value
}

func (v *NullableDescribeIdentityProviderResult) Set(val *DescribeIdentityProviderResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeIdentityProviderResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeIdentityProviderResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeIdentityProviderResult(val *DescribeIdentityProviderResult) *NullableDescribeIdentityProviderResult {
	return &NullableDescribeIdentityProviderResult{value: val, isSet: true}
}

func (v NullableDescribeIdentityProviderResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeIdentityProviderResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


