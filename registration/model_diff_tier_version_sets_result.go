/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DiffTierVersionSetsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiffTierVersionSetsResult{}

// DiffTierVersionSetsResult struct for DiffTierVersionSetsResult
type DiffTierVersionSetsResult struct {
	// The target version to compare against.
	AnotherVersion string `json:"anotherVersion"`
	// The product tier ID that this version set belongs to.
	ProductTierId string `json:"productTierId"`
	// The difference for the service API configuration per resource
	ResourceChangeSets map[string]ChangeSet `json:"resourceChangeSets"`
	// ID of the Service
	ServiceId string `json:"serviceId"`
	// The version number for the version set.
	Version string `json:"version"`
}

type _DiffTierVersionSetsResult DiffTierVersionSetsResult

// NewDiffTierVersionSetsResult instantiates a new DiffTierVersionSetsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiffTierVersionSetsResult(anotherVersion string, productTierId string, resourceChangeSets map[string]ChangeSet, serviceId string, version string) *DiffTierVersionSetsResult {
	this := DiffTierVersionSetsResult{}
	this.AnotherVersion = anotherVersion
	this.ProductTierId = productTierId
	this.ResourceChangeSets = resourceChangeSets
	this.ServiceId = serviceId
	this.Version = version
	return &this
}

// NewDiffTierVersionSetsResultWithDefaults instantiates a new DiffTierVersionSetsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiffTierVersionSetsResultWithDefaults() *DiffTierVersionSetsResult {
	this := DiffTierVersionSetsResult{}
	return &this
}

// GetAnotherVersion returns the AnotherVersion field value
func (o *DiffTierVersionSetsResult) GetAnotherVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AnotherVersion
}

// GetAnotherVersionOk returns a tuple with the AnotherVersion field value
// and a boolean to check if the value has been set.
func (o *DiffTierVersionSetsResult) GetAnotherVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnotherVersion, true
}

// SetAnotherVersion sets field value
func (o *DiffTierVersionSetsResult) SetAnotherVersion(v string) {
	o.AnotherVersion = v
}

// GetProductTierId returns the ProductTierId field value
func (o *DiffTierVersionSetsResult) GetProductTierId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value
// and a boolean to check if the value has been set.
func (o *DiffTierVersionSetsResult) GetProductTierIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTierId, true
}

// SetProductTierId sets field value
func (o *DiffTierVersionSetsResult) SetProductTierId(v string) {
	o.ProductTierId = v
}

// GetResourceChangeSets returns the ResourceChangeSets field value
func (o *DiffTierVersionSetsResult) GetResourceChangeSets() map[string]ChangeSet {
	if o == nil {
		var ret map[string]ChangeSet
		return ret
	}

	return o.ResourceChangeSets
}

// GetResourceChangeSetsOk returns a tuple with the ResourceChangeSets field value
// and a boolean to check if the value has been set.
func (o *DiffTierVersionSetsResult) GetResourceChangeSetsOk() (*map[string]ChangeSet, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceChangeSets, true
}

// SetResourceChangeSets sets field value
func (o *DiffTierVersionSetsResult) SetResourceChangeSets(v map[string]ChangeSet) {
	o.ResourceChangeSets = v
}

// GetServiceId returns the ServiceId field value
func (o *DiffTierVersionSetsResult) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *DiffTierVersionSetsResult) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *DiffTierVersionSetsResult) SetServiceId(v string) {
	o.ServiceId = v
}

// GetVersion returns the Version field value
func (o *DiffTierVersionSetsResult) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DiffTierVersionSetsResult) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DiffTierVersionSetsResult) SetVersion(v string) {
	o.Version = v
}

func (o DiffTierVersionSetsResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiffTierVersionSetsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["anotherVersion"] = o.AnotherVersion
	toSerialize["productTierId"] = o.ProductTierId
	toSerialize["resourceChangeSets"] = o.ResourceChangeSets
	toSerialize["serviceId"] = o.ServiceId
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *DiffTierVersionSetsResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"anotherVersion",
		"productTierId",
		"resourceChangeSets",
		"serviceId",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiffTierVersionSetsResult := _DiffTierVersionSetsResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiffTierVersionSetsResult)

	if err != nil {
		return err
	}

	*o = DiffTierVersionSetsResult(varDiffTierVersionSetsResult)

	return err
}

type NullableDiffTierVersionSetsResult struct {
	value *DiffTierVersionSetsResult
	isSet bool
}

func (v NullableDiffTierVersionSetsResult) Get() *DiffTierVersionSetsResult {
	return v.value
}

func (v *NullableDiffTierVersionSetsResult) Set(val *DiffTierVersionSetsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDiffTierVersionSetsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDiffTierVersionSetsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiffTierVersionSetsResult(val *DiffTierVersionSetsResult) *NullableDiffTierVersionSetsResult {
	return &NullableDiffTierVersionSetsResult{value: val, isSet: true}
}

func (v NullableDiffTierVersionSetsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiffTierVersionSetsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


