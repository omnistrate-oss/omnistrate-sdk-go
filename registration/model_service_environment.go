/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServiceEnvironment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceEnvironment{}

// ServiceEnvironment struct for ServiceEnvironment
type ServiceEnvironment struct {
	// Service environment ID
	Id string `json:"id"`
	// Name of the Service Environment
	Name string `json:"name"`
	// The status of the promotion
	PromoteStatus *string `json:"promoteStatus,omitempty"`
	// The status of the SaaS portal for this environment type
	SaasPortalStatus *string `json:"saasPortalStatus,omitempty"`
	// The URL of the SaaS portal for this environment type
	SaasPortalUrl *string `json:"saasPortalUrl,omitempty"`
	// List of service plans
	ServicePlans []ServicePlan `json:"servicePlans"`
	// The source environment ID
	SourceEnvironmentID *string `json:"sourceEnvironmentID,omitempty"`
	// The source environment name
	SourceEnvironmentName *string `json:"sourceEnvironmentName,omitempty"`
	Type *string `json:"type,omitempty"`
	// Visibility of the service environment
	Visibility string `json:"visibility"`
}

type _ServiceEnvironment ServiceEnvironment

// NewServiceEnvironment instantiates a new ServiceEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceEnvironment(id string, name string, servicePlans []ServicePlan, visibility string) *ServiceEnvironment {
	this := ServiceEnvironment{}
	this.Id = id
	this.Name = name
	this.ServicePlans = servicePlans
	this.Visibility = visibility
	return &this
}

// NewServiceEnvironmentWithDefaults instantiates a new ServiceEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceEnvironmentWithDefaults() *ServiceEnvironment {
	this := ServiceEnvironment{}
	return &this
}

// GetId returns the Id field value
func (o *ServiceEnvironment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServiceEnvironment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServiceEnvironment) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ServiceEnvironment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServiceEnvironment) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServiceEnvironment) SetName(v string) {
	o.Name = v
}

// GetPromoteStatus returns the PromoteStatus field value if set, zero value otherwise.
func (o *ServiceEnvironment) GetPromoteStatus() string {
	if o == nil || IsNil(o.PromoteStatus) {
		var ret string
		return ret
	}
	return *o.PromoteStatus
}

// GetPromoteStatusOk returns a tuple with the PromoteStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceEnvironment) GetPromoteStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PromoteStatus) {
		return nil, false
	}
	return o.PromoteStatus, true
}

// SetPromoteStatus gets a reference to the given string and assigns it to the PromoteStatus field.
func (o *ServiceEnvironment) SetPromoteStatus(v string) {
	o.PromoteStatus = &v
}

// GetSaasPortalStatus returns the SaasPortalStatus field value if set, zero value otherwise.
func (o *ServiceEnvironment) GetSaasPortalStatus() string {
	if o == nil || IsNil(o.SaasPortalStatus) {
		var ret string
		return ret
	}
	return *o.SaasPortalStatus
}

// GetSaasPortalStatusOk returns a tuple with the SaasPortalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceEnvironment) GetSaasPortalStatusOk() (*string, bool) {
	if o == nil || IsNil(o.SaasPortalStatus) {
		return nil, false
	}
	return o.SaasPortalStatus, true
}

// SetSaasPortalStatus gets a reference to the given string and assigns it to the SaasPortalStatus field.
func (o *ServiceEnvironment) SetSaasPortalStatus(v string) {
	o.SaasPortalStatus = &v
}

// GetSaasPortalUrl returns the SaasPortalUrl field value if set, zero value otherwise.
func (o *ServiceEnvironment) GetSaasPortalUrl() string {
	if o == nil || IsNil(o.SaasPortalUrl) {
		var ret string
		return ret
	}
	return *o.SaasPortalUrl
}

// GetSaasPortalUrlOk returns a tuple with the SaasPortalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceEnvironment) GetSaasPortalUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SaasPortalUrl) {
		return nil, false
	}
	return o.SaasPortalUrl, true
}

// SetSaasPortalUrl gets a reference to the given string and assigns it to the SaasPortalUrl field.
func (o *ServiceEnvironment) SetSaasPortalUrl(v string) {
	o.SaasPortalUrl = &v
}

// GetServicePlans returns the ServicePlans field value
func (o *ServiceEnvironment) GetServicePlans() []ServicePlan {
	if o == nil {
		var ret []ServicePlan
		return ret
	}

	return o.ServicePlans
}

// GetServicePlansOk returns a tuple with the ServicePlans field value
// and a boolean to check if the value has been set.
func (o *ServiceEnvironment) GetServicePlansOk() ([]ServicePlan, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServicePlans, true
}

// SetServicePlans sets field value
func (o *ServiceEnvironment) SetServicePlans(v []ServicePlan) {
	o.ServicePlans = v
}

// GetSourceEnvironmentID returns the SourceEnvironmentID field value if set, zero value otherwise.
func (o *ServiceEnvironment) GetSourceEnvironmentID() string {
	if o == nil || IsNil(o.SourceEnvironmentID) {
		var ret string
		return ret
	}
	return *o.SourceEnvironmentID
}

// GetSourceEnvironmentIDOk returns a tuple with the SourceEnvironmentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceEnvironment) GetSourceEnvironmentIDOk() (*string, bool) {
	if o == nil || IsNil(o.SourceEnvironmentID) {
		return nil, false
	}
	return o.SourceEnvironmentID, true
}

// SetSourceEnvironmentID gets a reference to the given string and assigns it to the SourceEnvironmentID field.
func (o *ServiceEnvironment) SetSourceEnvironmentID(v string) {
	o.SourceEnvironmentID = &v
}

// GetSourceEnvironmentName returns the SourceEnvironmentName field value if set, zero value otherwise.
func (o *ServiceEnvironment) GetSourceEnvironmentName() string {
	if o == nil || IsNil(o.SourceEnvironmentName) {
		var ret string
		return ret
	}
	return *o.SourceEnvironmentName
}

// GetSourceEnvironmentNameOk returns a tuple with the SourceEnvironmentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceEnvironment) GetSourceEnvironmentNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceEnvironmentName) {
		return nil, false
	}
	return o.SourceEnvironmentName, true
}

// SetSourceEnvironmentName gets a reference to the given string and assigns it to the SourceEnvironmentName field.
func (o *ServiceEnvironment) SetSourceEnvironmentName(v string) {
	o.SourceEnvironmentName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ServiceEnvironment) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceEnvironment) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ServiceEnvironment) SetType(v string) {
	o.Type = &v
}

// GetVisibility returns the Visibility field value
func (o *ServiceEnvironment) GetVisibility() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *ServiceEnvironment) GetVisibilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visibility, true
}

// SetVisibility sets field value
func (o *ServiceEnvironment) SetVisibility(v string) {
	o.Visibility = v
}

func (o ServiceEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceEnvironment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.PromoteStatus) {
		toSerialize["promoteStatus"] = o.PromoteStatus
	}
	if !IsNil(o.SaasPortalStatus) {
		toSerialize["saasPortalStatus"] = o.SaasPortalStatus
	}
	if !IsNil(o.SaasPortalUrl) {
		toSerialize["saasPortalUrl"] = o.SaasPortalUrl
	}
	toSerialize["servicePlans"] = o.ServicePlans
	if !IsNil(o.SourceEnvironmentID) {
		toSerialize["sourceEnvironmentID"] = o.SourceEnvironmentID
	}
	if !IsNil(o.SourceEnvironmentName) {
		toSerialize["sourceEnvironmentName"] = o.SourceEnvironmentName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["visibility"] = o.Visibility
	return toSerialize, nil
}

func (o *ServiceEnvironment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"servicePlans",
		"visibility",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceEnvironment := _ServiceEnvironment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceEnvironment)

	if err != nil {
		return err
	}

	*o = ServiceEnvironment(varServiceEnvironment)

	return err
}

type NullableServiceEnvironment struct {
	value *ServiceEnvironment
	isSet bool
}

func (v NullableServiceEnvironment) Get() *ServiceEnvironment {
	return v.value
}

func (v *NullableServiceEnvironment) Set(val *ServiceEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceEnvironment(val *ServiceEnvironment) *NullableServiceEnvironment {
	return &NullableServiceEnvironment{value: val, isSet: true}
}

func (v NullableServiceEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


