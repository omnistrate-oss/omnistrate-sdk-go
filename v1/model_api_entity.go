/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the APIEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &APIEntity{}

// APIEntity struct for APIEntity
type APIEntity struct {
	// The input parameters
	InputParameters []InputParameterEntity `json:"inputParameters"`
	// The output parameters
	OutputParameters []OutputParameterEntity `json:"outputParameters"`
	// The API verb
	Verb string `json:"verb"`
	AdditionalProperties map[string]interface{}
}

type _APIEntity APIEntity

// NewAPIEntity instantiates a new APIEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAPIEntity(inputParameters []InputParameterEntity, outputParameters []OutputParameterEntity, verb string) *APIEntity {
	this := APIEntity{}
	this.InputParameters = inputParameters
	this.OutputParameters = outputParameters
	this.Verb = verb
	return &this
}

// NewAPIEntityWithDefaults instantiates a new APIEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAPIEntityWithDefaults() *APIEntity {
	this := APIEntity{}
	return &this
}

// GetInputParameters returns the InputParameters field value
func (o *APIEntity) GetInputParameters() []InputParameterEntity {
	if o == nil {
		var ret []InputParameterEntity
		return ret
	}

	return o.InputParameters
}

// GetInputParametersOk returns a tuple with the InputParameters field value
// and a boolean to check if the value has been set.
func (o *APIEntity) GetInputParametersOk() ([]InputParameterEntity, bool) {
	if o == nil {
		return nil, false
	}
	return o.InputParameters, true
}

// SetInputParameters sets field value
func (o *APIEntity) SetInputParameters(v []InputParameterEntity) {
	o.InputParameters = v
}

// GetOutputParameters returns the OutputParameters field value
func (o *APIEntity) GetOutputParameters() []OutputParameterEntity {
	if o == nil {
		var ret []OutputParameterEntity
		return ret
	}

	return o.OutputParameters
}

// GetOutputParametersOk returns a tuple with the OutputParameters field value
// and a boolean to check if the value has been set.
func (o *APIEntity) GetOutputParametersOk() ([]OutputParameterEntity, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutputParameters, true
}

// SetOutputParameters sets field value
func (o *APIEntity) SetOutputParameters(v []OutputParameterEntity) {
	o.OutputParameters = v
}

// GetVerb returns the Verb field value
func (o *APIEntity) GetVerb() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Verb
}

// GetVerbOk returns a tuple with the Verb field value
// and a boolean to check if the value has been set.
func (o *APIEntity) GetVerbOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verb, true
}

// SetVerb sets field value
func (o *APIEntity) SetVerb(v string) {
	o.Verb = v
}

func (o APIEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o APIEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["inputParameters"] = o.InputParameters
	toSerialize["outputParameters"] = o.OutputParameters
	toSerialize["verb"] = o.Verb

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *APIEntity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"inputParameters",
		"outputParameters",
		"verb",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAPIEntity := _APIEntity{}

	err = json.Unmarshal(data, &varAPIEntity)

	if err != nil {
		return err
	}

	*o = APIEntity(varAPIEntity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "inputParameters")
		delete(additionalProperties, "outputParameters")
		delete(additionalProperties, "verb")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAPIEntity struct {
	value *APIEntity
	isSet bool
}

func (v NullableAPIEntity) Get() *APIEntity {
	return v.value
}

func (v *NullableAPIEntity) Set(val *APIEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIEntity(val *APIEntity) *NullableAPIEntity {
	return &NullableAPIEntity{value: val, isSet: true}
}

func (v NullableAPIEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

