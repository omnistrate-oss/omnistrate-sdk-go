/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the TierVersionSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TierVersionSet{}

// TierVersionSet struct for TierVersionSet
type TierVersionSet struct {
	// Auto approve subscription or not
	AutoApproveSubscription *bool `json:"autoApproveSubscription,omitempty"`
	// The base version of the version set.
	BaseVersion string `json:"baseVersion"`
	// The timestamp when the version set was created.
	CreatedAt string `json:"createdAt"`
	// The name of the user who created the version set.
	CreatedBy *string `json:"createdBy,omitempty"`
	// A brief description of the product-tier version set.
	Description *string `json:"description,omitempty"`
	// The features that are enabled for this product tier, including scope details and configuration
	EnabledFeatures []ProductTierFeatureDetail `json:"enabledFeatures"`
	// The features that are enabled / disabled for this product tier
	Features map[string]bool `json:"features"`
	// The number of instances that are currently running this version set.
	InstanceCount *int64 `json:"instanceCount,omitempty"`
	// ID of an Upgrade Path
	LatestUpgradePathId *string `json:"latestUpgradePathId,omitempty"`
	// The name of the product-tier version set.
	Name *string `json:"name,omitempty"`
	// The parent version of this release.
	ParentVersion *string `json:"parentVersion,omitempty"`
	// ID of a Product Tier
	ProductTierId string `json:"productTierId"`
	// The timestamp when the version set was released.
	ReleasedAt string `json:"releasedAt"`
	// The name of the user who released the version set.
	ReleasedBy *string `json:"releasedBy,omitempty"`
	// List of resources that are part of this version set.
	Resources []ResourceSummary `json:"resources,omitempty"`
	// ID of a Service
	ServiceId string `json:"serviceId"`
	// ID of a Service Model
	ServiceModelId string `json:"serviceModelId"`
	// The tier version set status.
	Status string `json:"status"`
	// The version-set type of the product-tier.
	Type string `json:"type"`
	// The timestamp when the version set was updated.
	UpdatedAt string `json:"updatedAt"`
	// The version number for the specific version set.
	Version string `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _TierVersionSet TierVersionSet

// NewTierVersionSet instantiates a new TierVersionSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTierVersionSet(baseVersion string, createdAt string, enabledFeatures []ProductTierFeatureDetail, features map[string]bool, productTierId string, releasedAt string, serviceId string, serviceModelId string, status string, type_ string, updatedAt string, version string) *TierVersionSet {
	this := TierVersionSet{}
	this.BaseVersion = baseVersion
	this.CreatedAt = createdAt
	this.EnabledFeatures = enabledFeatures
	this.Features = features
	this.ProductTierId = productTierId
	this.ReleasedAt = releasedAt
	this.ServiceId = serviceId
	this.ServiceModelId = serviceModelId
	this.Status = status
	this.Type = type_
	this.UpdatedAt = updatedAt
	this.Version = version
	return &this
}

// NewTierVersionSetWithDefaults instantiates a new TierVersionSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTierVersionSetWithDefaults() *TierVersionSet {
	this := TierVersionSet{}
	return &this
}

// GetAutoApproveSubscription returns the AutoApproveSubscription field value if set, zero value otherwise.
func (o *TierVersionSet) GetAutoApproveSubscription() bool {
	if o == nil || IsNil(o.AutoApproveSubscription) {
		var ret bool
		return ret
	}
	return *o.AutoApproveSubscription
}

// GetAutoApproveSubscriptionOk returns a tuple with the AutoApproveSubscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetAutoApproveSubscriptionOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoApproveSubscription) {
		return nil, false
	}
	return o.AutoApproveSubscription, true
}

// SetAutoApproveSubscription gets a reference to the given bool and assigns it to the AutoApproveSubscription field.
func (o *TierVersionSet) SetAutoApproveSubscription(v bool) {
	o.AutoApproveSubscription = &v
}

// GetBaseVersion returns the BaseVersion field value
func (o *TierVersionSet) GetBaseVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseVersion
}

// GetBaseVersionOk returns a tuple with the BaseVersion field value
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetBaseVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseVersion, true
}

// SetBaseVersion sets field value
func (o *TierVersionSet) SetBaseVersion(v string) {
	o.BaseVersion = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *TierVersionSet) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TierVersionSet) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *TierVersionSet) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *TierVersionSet) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TierVersionSet) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TierVersionSet) SetDescription(v string) {
	o.Description = &v
}

// GetEnabledFeatures returns the EnabledFeatures field value
func (o *TierVersionSet) GetEnabledFeatures() []ProductTierFeatureDetail {
	if o == nil {
		var ret []ProductTierFeatureDetail
		return ret
	}

	return o.EnabledFeatures
}

// GetEnabledFeaturesOk returns a tuple with the EnabledFeatures field value
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetEnabledFeaturesOk() ([]ProductTierFeatureDetail, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnabledFeatures, true
}

// SetEnabledFeatures sets field value
func (o *TierVersionSet) SetEnabledFeatures(v []ProductTierFeatureDetail) {
	o.EnabledFeatures = v
}

// GetFeatures returns the Features field value
func (o *TierVersionSet) GetFeatures() map[string]bool {
	if o == nil {
		var ret map[string]bool
		return ret
	}

	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetFeaturesOk() (*map[string]bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Features, true
}

// SetFeatures sets field value
func (o *TierVersionSet) SetFeatures(v map[string]bool) {
	o.Features = v
}

// GetInstanceCount returns the InstanceCount field value if set, zero value otherwise.
func (o *TierVersionSet) GetInstanceCount() int64 {
	if o == nil || IsNil(o.InstanceCount) {
		var ret int64
		return ret
	}
	return *o.InstanceCount
}

// GetInstanceCountOk returns a tuple with the InstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetInstanceCountOk() (*int64, bool) {
	if o == nil || IsNil(o.InstanceCount) {
		return nil, false
	}
	return o.InstanceCount, true
}

// SetInstanceCount gets a reference to the given int64 and assigns it to the InstanceCount field.
func (o *TierVersionSet) SetInstanceCount(v int64) {
	o.InstanceCount = &v
}

// GetLatestUpgradePathId returns the LatestUpgradePathId field value if set, zero value otherwise.
func (o *TierVersionSet) GetLatestUpgradePathId() string {
	if o == nil || IsNil(o.LatestUpgradePathId) {
		var ret string
		return ret
	}
	return *o.LatestUpgradePathId
}

// GetLatestUpgradePathIdOk returns a tuple with the LatestUpgradePathId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetLatestUpgradePathIdOk() (*string, bool) {
	if o == nil || IsNil(o.LatestUpgradePathId) {
		return nil, false
	}
	return o.LatestUpgradePathId, true
}

// SetLatestUpgradePathId gets a reference to the given string and assigns it to the LatestUpgradePathId field.
func (o *TierVersionSet) SetLatestUpgradePathId(v string) {
	o.LatestUpgradePathId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TierVersionSet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TierVersionSet) SetName(v string) {
	o.Name = &v
}

// GetParentVersion returns the ParentVersion field value if set, zero value otherwise.
func (o *TierVersionSet) GetParentVersion() string {
	if o == nil || IsNil(o.ParentVersion) {
		var ret string
		return ret
	}
	return *o.ParentVersion
}

// GetParentVersionOk returns a tuple with the ParentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetParentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ParentVersion) {
		return nil, false
	}
	return o.ParentVersion, true
}

// SetParentVersion gets a reference to the given string and assigns it to the ParentVersion field.
func (o *TierVersionSet) SetParentVersion(v string) {
	o.ParentVersion = &v
}

// GetProductTierId returns the ProductTierId field value
func (o *TierVersionSet) GetProductTierId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetProductTierIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTierId, true
}

// SetProductTierId sets field value
func (o *TierVersionSet) SetProductTierId(v string) {
	o.ProductTierId = v
}

// GetReleasedAt returns the ReleasedAt field value
func (o *TierVersionSet) GetReleasedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleasedAt
}

// GetReleasedAtOk returns a tuple with the ReleasedAt field value
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetReleasedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleasedAt, true
}

// SetReleasedAt sets field value
func (o *TierVersionSet) SetReleasedAt(v string) {
	o.ReleasedAt = v
}

// GetReleasedBy returns the ReleasedBy field value if set, zero value otherwise.
func (o *TierVersionSet) GetReleasedBy() string {
	if o == nil || IsNil(o.ReleasedBy) {
		var ret string
		return ret
	}
	return *o.ReleasedBy
}

// GetReleasedByOk returns a tuple with the ReleasedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetReleasedByOk() (*string, bool) {
	if o == nil || IsNil(o.ReleasedBy) {
		return nil, false
	}
	return o.ReleasedBy, true
}

// SetReleasedBy gets a reference to the given string and assigns it to the ReleasedBy field.
func (o *TierVersionSet) SetReleasedBy(v string) {
	o.ReleasedBy = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *TierVersionSet) GetResources() []ResourceSummary {
	if o == nil || IsNil(o.Resources) {
		var ret []ResourceSummary
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetResourcesOk() ([]ResourceSummary, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// SetResources gets a reference to the given []ResourceSummary and assigns it to the Resources field.
func (o *TierVersionSet) SetResources(v []ResourceSummary) {
	o.Resources = v
}

// GetServiceId returns the ServiceId field value
func (o *TierVersionSet) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *TierVersionSet) SetServiceId(v string) {
	o.ServiceId = v
}

// GetServiceModelId returns the ServiceModelId field value
func (o *TierVersionSet) GetServiceModelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceModelId
}

// GetServiceModelIdOk returns a tuple with the ServiceModelId field value
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetServiceModelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceModelId, true
}

// SetServiceModelId sets field value
func (o *TierVersionSet) SetServiceModelId(v string) {
	o.ServiceModelId = v
}

// GetStatus returns the Status field value
func (o *TierVersionSet) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TierVersionSet) SetStatus(v string) {
	o.Status = v
}

// GetType returns the Type field value
func (o *TierVersionSet) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TierVersionSet) SetType(v string) {
	o.Type = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *TierVersionSet) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *TierVersionSet) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetVersion returns the Version field value
func (o *TierVersionSet) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *TierVersionSet) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *TierVersionSet) SetVersion(v string) {
	o.Version = v
}

func (o TierVersionSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TierVersionSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoApproveSubscription) {
		toSerialize["autoApproveSubscription"] = o.AutoApproveSubscription
	}
	toSerialize["baseVersion"] = o.BaseVersion
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabledFeatures"] = o.EnabledFeatures
	toSerialize["features"] = o.Features
	if !IsNil(o.InstanceCount) {
		toSerialize["instanceCount"] = o.InstanceCount
	}
	if !IsNil(o.LatestUpgradePathId) {
		toSerialize["latestUpgradePathId"] = o.LatestUpgradePathId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ParentVersion) {
		toSerialize["parentVersion"] = o.ParentVersion
	}
	toSerialize["productTierId"] = o.ProductTierId
	toSerialize["releasedAt"] = o.ReleasedAt
	if !IsNil(o.ReleasedBy) {
		toSerialize["releasedBy"] = o.ReleasedBy
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	toSerialize["serviceId"] = o.ServiceId
	toSerialize["serviceModelId"] = o.ServiceModelId
	toSerialize["status"] = o.Status
	toSerialize["type"] = o.Type
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["version"] = o.Version

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TierVersionSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"baseVersion",
		"createdAt",
		"enabledFeatures",
		"features",
		"productTierId",
		"releasedAt",
		"serviceId",
		"serviceModelId",
		"status",
		"type",
		"updatedAt",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTierVersionSet := _TierVersionSet{}

	err = json.Unmarshal(data, &varTierVersionSet)

	if err != nil {
		return err
	}

	*o = TierVersionSet(varTierVersionSet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "autoApproveSubscription")
		delete(additionalProperties, "baseVersion")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "createdBy")
		delete(additionalProperties, "description")
		delete(additionalProperties, "enabledFeatures")
		delete(additionalProperties, "features")
		delete(additionalProperties, "instanceCount")
		delete(additionalProperties, "latestUpgradePathId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "parentVersion")
		delete(additionalProperties, "productTierId")
		delete(additionalProperties, "releasedAt")
		delete(additionalProperties, "releasedBy")
		delete(additionalProperties, "resources")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "serviceModelId")
		delete(additionalProperties, "status")
		delete(additionalProperties, "type")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTierVersionSet struct {
	value *TierVersionSet
	isSet bool
}

func (v NullableTierVersionSet) Get() *TierVersionSet {
	return v.value
}

func (v *NullableTierVersionSet) Set(val *TierVersionSet) {
	v.value = val
	v.isSet = true
}

func (v NullableTierVersionSet) IsSet() bool {
	return v.isSet
}

func (v *NullableTierVersionSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTierVersionSet(val *TierVersionSet) *NullableTierVersionSet {
	return &NullableTierVersionSet{value: val, isSet: true}
}

func (v NullableTierVersionSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTierVersionSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


