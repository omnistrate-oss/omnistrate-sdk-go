/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the FailoverResourceInstanceRequest2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailoverResourceInstanceRequest2{}

// FailoverResourceInstanceRequest2 struct for FailoverResourceInstanceRequest2
type FailoverResourceInstanceRequest2 struct {
	// The failed replica action
	FailedReplicaAction *string `json:"failedReplicaAction,omitempty"`
	// The failed replica ID
	FailedReplicaID string `json:"failedReplicaID"`
	AdditionalProperties map[string]interface{}
}

type _FailoverResourceInstanceRequest2 FailoverResourceInstanceRequest2

// NewFailoverResourceInstanceRequest2 instantiates a new FailoverResourceInstanceRequest2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailoverResourceInstanceRequest2(failedReplicaID string) *FailoverResourceInstanceRequest2 {
	this := FailoverResourceInstanceRequest2{}
	this.FailedReplicaID = failedReplicaID
	return &this
}

// NewFailoverResourceInstanceRequest2WithDefaults instantiates a new FailoverResourceInstanceRequest2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverResourceInstanceRequest2WithDefaults() *FailoverResourceInstanceRequest2 {
	this := FailoverResourceInstanceRequest2{}
	return &this
}

// GetFailedReplicaAction returns the FailedReplicaAction field value if set, zero value otherwise.
func (o *FailoverResourceInstanceRequest2) GetFailedReplicaAction() string {
	if o == nil || IsNil(o.FailedReplicaAction) {
		var ret string
		return ret
	}
	return *o.FailedReplicaAction
}

// GetFailedReplicaActionOk returns a tuple with the FailedReplicaAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailoverResourceInstanceRequest2) GetFailedReplicaActionOk() (*string, bool) {
	if o == nil || IsNil(o.FailedReplicaAction) {
		return nil, false
	}
	return o.FailedReplicaAction, true
}

// SetFailedReplicaAction gets a reference to the given string and assigns it to the FailedReplicaAction field.
func (o *FailoverResourceInstanceRequest2) SetFailedReplicaAction(v string) {
	o.FailedReplicaAction = &v
}

// GetFailedReplicaID returns the FailedReplicaID field value
func (o *FailoverResourceInstanceRequest2) GetFailedReplicaID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FailedReplicaID
}

// GetFailedReplicaIDOk returns a tuple with the FailedReplicaID field value
// and a boolean to check if the value has been set.
func (o *FailoverResourceInstanceRequest2) GetFailedReplicaIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailedReplicaID, true
}

// SetFailedReplicaID sets field value
func (o *FailoverResourceInstanceRequest2) SetFailedReplicaID(v string) {
	o.FailedReplicaID = v
}

func (o FailoverResourceInstanceRequest2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailoverResourceInstanceRequest2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FailedReplicaAction) {
		toSerialize["failedReplicaAction"] = o.FailedReplicaAction
	}
	toSerialize["failedReplicaID"] = o.FailedReplicaID

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FailoverResourceInstanceRequest2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"failedReplicaID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFailoverResourceInstanceRequest2 := _FailoverResourceInstanceRequest2{}

	err = json.Unmarshal(data, &varFailoverResourceInstanceRequest2)

	if err != nil {
		return err
	}

	*o = FailoverResourceInstanceRequest2(varFailoverResourceInstanceRequest2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "failedReplicaAction")
		delete(additionalProperties, "failedReplicaID")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFailoverResourceInstanceRequest2 struct {
	value *FailoverResourceInstanceRequest2
	isSet bool
}

func (v NullableFailoverResourceInstanceRequest2) Get() *FailoverResourceInstanceRequest2 {
	return v.value
}

func (v *NullableFailoverResourceInstanceRequest2) Set(val *FailoverResourceInstanceRequest2) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverResourceInstanceRequest2) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverResourceInstanceRequest2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverResourceInstanceRequest2(val *FailoverResourceInstanceRequest2) *NullableFailoverResourceInstanceRequest2 {
	return &NullableFailoverResourceInstanceRequest2{value: val, isSet: true}
}

func (v NullableFailoverResourceInstanceRequest2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverResourceInstanceRequest2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

