/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the OmnistrateError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OmnistrateError{}

// OmnistrateError struct for OmnistrateError
type OmnistrateError struct {
	// Application-specific error code
	Code string `json:"code"`
	// More context on the error that occurred
	Message string `json:"message"`
	// Name of the error
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _OmnistrateError OmnistrateError

// NewOmnistrateError instantiates a new OmnistrateError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOmnistrateError(code string, message string, name string) *OmnistrateError {
	this := OmnistrateError{}
	this.Code = code
	this.Message = message
	this.Name = name
	return &this
}

// NewOmnistrateErrorWithDefaults instantiates a new OmnistrateError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOmnistrateErrorWithDefaults() *OmnistrateError {
	this := OmnistrateError{}
	return &this
}

// GetCode returns the Code field value
func (o *OmnistrateError) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *OmnistrateError) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *OmnistrateError) SetCode(v string) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *OmnistrateError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *OmnistrateError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *OmnistrateError) SetMessage(v string) {
	o.Message = v
}

// GetName returns the Name field value
func (o *OmnistrateError) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OmnistrateError) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OmnistrateError) SetName(v string) {
	o.Name = v
}

func (o OmnistrateError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OmnistrateError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["message"] = o.Message
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OmnistrateError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"message",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOmnistrateError := _OmnistrateError{}

	err = json.Unmarshal(data, &varOmnistrateError)

	if err != nil {
		return err
	}

	*o = OmnistrateError(varOmnistrateError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "message")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOmnistrateError struct {
	value *OmnistrateError
	isSet bool
}

func (v NullableOmnistrateError) Get() *OmnistrateError {
	return v.value
}

func (v *NullableOmnistrateError) Set(val *OmnistrateError) {
	v.value = val
	v.isSet = true
}

func (v NullableOmnistrateError) IsSet() bool {
	return v.isSet
}

func (v *NullableOmnistrateError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOmnistrateError(val *OmnistrateError) *NullableOmnistrateError {
	return &NullableOmnistrateError{value: val, isSet: true}
}

func (v NullableOmnistrateError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOmnistrateError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


