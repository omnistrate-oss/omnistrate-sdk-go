/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the AcceleratorConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcceleratorConfiguration{}

// AcceleratorConfiguration Accelerator configuration for compute nodes
type AcceleratorConfiguration struct {
	// Number of accelerators to attach
	Count int64 `json:"count"`
	// Type of accelerator (GPU)
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _AcceleratorConfiguration AcceleratorConfiguration

// NewAcceleratorConfiguration instantiates a new AcceleratorConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcceleratorConfiguration(count int64, type_ string) *AcceleratorConfiguration {
	this := AcceleratorConfiguration{}
	this.Count = count
	this.Type = type_
	return &this
}

// NewAcceleratorConfigurationWithDefaults instantiates a new AcceleratorConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcceleratorConfigurationWithDefaults() *AcceleratorConfiguration {
	this := AcceleratorConfiguration{}
	return &this
}

// GetCount returns the Count field value
func (o *AcceleratorConfiguration) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *AcceleratorConfiguration) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *AcceleratorConfiguration) SetCount(v int64) {
	o.Count = v
}

// GetType returns the Type field value
func (o *AcceleratorConfiguration) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AcceleratorConfiguration) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AcceleratorConfiguration) SetType(v string) {
	o.Type = v
}

func (o AcceleratorConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcceleratorConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AcceleratorConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAcceleratorConfiguration := _AcceleratorConfiguration{}

	err = json.Unmarshal(data, &varAcceleratorConfiguration)

	if err != nil {
		return err
	}

	*o = AcceleratorConfiguration(varAcceleratorConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAcceleratorConfiguration struct {
	value *AcceleratorConfiguration
	isSet bool
}

func (v NullableAcceleratorConfiguration) Get() *AcceleratorConfiguration {
	return v.value
}

func (v *NullableAcceleratorConfiguration) Set(val *AcceleratorConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableAcceleratorConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableAcceleratorConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcceleratorConfiguration(val *AcceleratorConfiguration) *NullableAcceleratorConfiguration {
	return &NullableAcceleratorConfiguration{value: val, isSet: true}
}

func (v NullableAcceleratorConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcceleratorConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

