/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the ValuesFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValuesFile{}

// ValuesFile struct for ValuesFile
type ValuesFile struct {
	GitConfiguration GitFileConfiguration `json:"gitConfiguration"`
	AdditionalProperties map[string]interface{}
}

type _ValuesFile ValuesFile

// NewValuesFile instantiates a new ValuesFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValuesFile(gitConfiguration GitFileConfiguration) *ValuesFile {
	this := ValuesFile{}
	this.GitConfiguration = gitConfiguration
	return &this
}

// NewValuesFileWithDefaults instantiates a new ValuesFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValuesFileWithDefaults() *ValuesFile {
	this := ValuesFile{}
	return &this
}

// GetGitConfiguration returns the GitConfiguration field value
func (o *ValuesFile) GetGitConfiguration() GitFileConfiguration {
	if o == nil {
		var ret GitFileConfiguration
		return ret
	}

	return o.GitConfiguration
}

// GetGitConfigurationOk returns a tuple with the GitConfiguration field value
// and a boolean to check if the value has been set.
func (o *ValuesFile) GetGitConfigurationOk() (*GitFileConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitConfiguration, true
}

// SetGitConfiguration sets field value
func (o *ValuesFile) SetGitConfiguration(v GitFileConfiguration) {
	o.GitConfiguration = v
}

func (o ValuesFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValuesFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gitConfiguration"] = o.GitConfiguration

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ValuesFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gitConfiguration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValuesFile := _ValuesFile{}

	err = json.Unmarshal(data, &varValuesFile)

	if err != nil {
		return err
	}

	*o = ValuesFile(varValuesFile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "gitConfiguration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableValuesFile struct {
	value *ValuesFile
	isSet bool
}

func (v NullableValuesFile) Get() *ValuesFile {
	return v.value
}

func (v *NullableValuesFile) Set(val *ValuesFile) {
	v.value = val
	v.isSet = true
}

func (v NullableValuesFile) IsSet() bool {
	return v.isSet
}

func (v *NullableValuesFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValuesFile(val *ValuesFile) *NullableValuesFile {
	return &NullableValuesFile{value: val, isSet: true}
}

func (v NullableValuesFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValuesFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


