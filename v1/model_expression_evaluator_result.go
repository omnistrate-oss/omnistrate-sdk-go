/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the ExpressionEvaluatorResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpressionEvaluatorResult{}

// ExpressionEvaluatorResult struct for ExpressionEvaluatorResult
type ExpressionEvaluatorResult struct {
	// Error message if the evaluation failed
	Error *string `json:"error,omitempty"`
	// The evaluated result of the expression
	Result interface{} `json:"result,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExpressionEvaluatorResult ExpressionEvaluatorResult

// NewExpressionEvaluatorResult instantiates a new ExpressionEvaluatorResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpressionEvaluatorResult() *ExpressionEvaluatorResult {
	this := ExpressionEvaluatorResult{}
	return &this
}

// NewExpressionEvaluatorResultWithDefaults instantiates a new ExpressionEvaluatorResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpressionEvaluatorResultWithDefaults() *ExpressionEvaluatorResult {
	this := ExpressionEvaluatorResult{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ExpressionEvaluatorResult) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpressionEvaluatorResult) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ExpressionEvaluatorResult) SetError(v string) {
	o.Error = &v
}

// GetResult returns the Result field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpressionEvaluatorResult) GetResult() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpressionEvaluatorResult) GetResultOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return &o.Result, true
}

// SetResult gets a reference to the given interface{} and assigns it to the Result field.
func (o *ExpressionEvaluatorResult) SetResult(v interface{}) {
	o.Result = v
}

func (o ExpressionEvaluatorResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpressionEvaluatorResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExpressionEvaluatorResult) UnmarshalJSON(data []byte) (err error) {
	varExpressionEvaluatorResult := _ExpressionEvaluatorResult{}

	err = json.Unmarshal(data, &varExpressionEvaluatorResult)

	if err != nil {
		return err
	}

	*o = ExpressionEvaluatorResult(varExpressionEvaluatorResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "error")
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExpressionEvaluatorResult struct {
	value *ExpressionEvaluatorResult
	isSet bool
}

func (v NullableExpressionEvaluatorResult) Get() *ExpressionEvaluatorResult {
	return v.value
}

func (v *NullableExpressionEvaluatorResult) Set(val *ExpressionEvaluatorResult) {
	v.value = val
	v.isSet = true
}

func (v NullableExpressionEvaluatorResult) IsSet() bool {
	return v.isSet
}

func (v *NullableExpressionEvaluatorResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpressionEvaluatorResult(val *ExpressionEvaluatorResult) *NullableExpressionEvaluatorResult {
	return &NullableExpressionEvaluatorResult{value: val, isSet: true}
}

func (v NullableExpressionEvaluatorResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpressionEvaluatorResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

