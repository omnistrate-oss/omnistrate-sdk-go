/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the ReleaseInfraConfigRequest2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseInfraConfigRequest2{}

// ReleaseInfraConfigRequest2 struct for ReleaseInfraConfigRequest2
type ReleaseInfraConfigRequest2 struct {
	// The product tier ID
	ProductTierId *string `json:"productTierId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReleaseInfraConfigRequest2 ReleaseInfraConfigRequest2

// NewReleaseInfraConfigRequest2 instantiates a new ReleaseInfraConfigRequest2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseInfraConfigRequest2() *ReleaseInfraConfigRequest2 {
	this := ReleaseInfraConfigRequest2{}
	return &this
}

// NewReleaseInfraConfigRequest2WithDefaults instantiates a new ReleaseInfraConfigRequest2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseInfraConfigRequest2WithDefaults() *ReleaseInfraConfigRequest2 {
	this := ReleaseInfraConfigRequest2{}
	return &this
}

// GetProductTierId returns the ProductTierId field value if set, zero value otherwise.
func (o *ReleaseInfraConfigRequest2) GetProductTierId() string {
	if o == nil || IsNil(o.ProductTierId) {
		var ret string
		return ret
	}
	return *o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseInfraConfigRequest2) GetProductTierIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTierId) {
		return nil, false
	}
	return o.ProductTierId, true
}

// SetProductTierId gets a reference to the given string and assigns it to the ProductTierId field.
func (o *ReleaseInfraConfigRequest2) SetProductTierId(v string) {
	o.ProductTierId = &v
}

func (o ReleaseInfraConfigRequest2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseInfraConfigRequest2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductTierId) {
		toSerialize["productTierId"] = o.ProductTierId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReleaseInfraConfigRequest2) UnmarshalJSON(data []byte) (err error) {
	varReleaseInfraConfigRequest2 := _ReleaseInfraConfigRequest2{}

	err = json.Unmarshal(data, &varReleaseInfraConfigRequest2)

	if err != nil {
		return err
	}

	*o = ReleaseInfraConfigRequest2(varReleaseInfraConfigRequest2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "productTierId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReleaseInfraConfigRequest2 struct {
	value *ReleaseInfraConfigRequest2
	isSet bool
}

func (v NullableReleaseInfraConfigRequest2) Get() *ReleaseInfraConfigRequest2 {
	return v.value
}

func (v *NullableReleaseInfraConfigRequest2) Set(val *ReleaseInfraConfigRequest2) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseInfraConfigRequest2) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseInfraConfigRequest2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseInfraConfigRequest2(val *ReleaseInfraConfigRequest2) *NullableReleaseInfraConfigRequest2 {
	return &NullableReleaseInfraConfigRequest2{value: val, isSet: true}
}

func (v NullableReleaseInfraConfigRequest2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseInfraConfigRequest2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

