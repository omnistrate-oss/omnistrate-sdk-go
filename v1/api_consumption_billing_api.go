/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type ConsumptionBillingApiAPI interface {

	/*
	ConsumptionBillingApiDescribeConsumptionBillingDetails DescribeConsumptionBillingDetails consumption-billing-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiConsumptionBillingApiDescribeConsumptionBillingDetailsRequest
	*/
	ConsumptionBillingApiDescribeConsumptionBillingDetails(ctx context.Context) ApiConsumptionBillingApiDescribeConsumptionBillingDetailsRequest

	// ConsumptionBillingApiDescribeConsumptionBillingDetailsExecute executes the request
	//  @return DescribeConsumptionBillingDetailsResult
	ConsumptionBillingApiDescribeConsumptionBillingDetailsExecute(r ApiConsumptionBillingApiDescribeConsumptionBillingDetailsRequest) (*DescribeConsumptionBillingDetailsResult, *http.Response, error)

	/*
	ConsumptionBillingApiDescribeConsumptionBillingStatus DescribeConsumptionBillingStatus consumption-billing-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiConsumptionBillingApiDescribeConsumptionBillingStatusRequest
	*/
	ConsumptionBillingApiDescribeConsumptionBillingStatus(ctx context.Context) ApiConsumptionBillingApiDescribeConsumptionBillingStatusRequest

	// ConsumptionBillingApiDescribeConsumptionBillingStatusExecute executes the request
	//  @return DescribeConsumptionBillingStatusResult
	ConsumptionBillingApiDescribeConsumptionBillingStatusExecute(r ApiConsumptionBillingApiDescribeConsumptionBillingStatusRequest) (*DescribeConsumptionBillingStatusResult, *http.Response, error)
}

// ConsumptionBillingApiAPIService ConsumptionBillingApiAPI service
type ConsumptionBillingApiAPIService service

type ApiConsumptionBillingApiDescribeConsumptionBillingDetailsRequest struct {
	ctx context.Context
	ApiService ConsumptionBillingApiAPI
	returnUrl *string
}

// Return Url used to configure payment methods links
func (r ApiConsumptionBillingApiDescribeConsumptionBillingDetailsRequest) ReturnUrl(returnUrl string) ApiConsumptionBillingApiDescribeConsumptionBillingDetailsRequest {
	r.returnUrl = &returnUrl
	return r
}

func (r ApiConsumptionBillingApiDescribeConsumptionBillingDetailsRequest) Execute() (*DescribeConsumptionBillingDetailsResult, *http.Response, error) {
	return r.ApiService.ConsumptionBillingApiDescribeConsumptionBillingDetailsExecute(r)
}

/*
ConsumptionBillingApiDescribeConsumptionBillingDetails DescribeConsumptionBillingDetails consumption-billing-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConsumptionBillingApiDescribeConsumptionBillingDetailsRequest
*/
func (a *ConsumptionBillingApiAPIService) ConsumptionBillingApiDescribeConsumptionBillingDetails(ctx context.Context) ApiConsumptionBillingApiDescribeConsumptionBillingDetailsRequest {
	return ApiConsumptionBillingApiDescribeConsumptionBillingDetailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DescribeConsumptionBillingDetailsResult
func (a *ConsumptionBillingApiAPIService) ConsumptionBillingApiDescribeConsumptionBillingDetailsExecute(r ApiConsumptionBillingApiDescribeConsumptionBillingDetailsRequest) (*DescribeConsumptionBillingDetailsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DescribeConsumptionBillingDetailsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsumptionBillingApiAPIService.ConsumptionBillingApiDescribeConsumptionBillingDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/billing-details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.returnUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "returnUrl", r.returnUrl, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsumptionBillingApiDescribeConsumptionBillingStatusRequest struct {
	ctx context.Context
	ApiService ConsumptionBillingApiAPI
}

func (r ApiConsumptionBillingApiDescribeConsumptionBillingStatusRequest) Execute() (*DescribeConsumptionBillingStatusResult, *http.Response, error) {
	return r.ApiService.ConsumptionBillingApiDescribeConsumptionBillingStatusExecute(r)
}

/*
ConsumptionBillingApiDescribeConsumptionBillingStatus DescribeConsumptionBillingStatus consumption-billing-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConsumptionBillingApiDescribeConsumptionBillingStatusRequest
*/
func (a *ConsumptionBillingApiAPIService) ConsumptionBillingApiDescribeConsumptionBillingStatus(ctx context.Context) ApiConsumptionBillingApiDescribeConsumptionBillingStatusRequest {
	return ApiConsumptionBillingApiDescribeConsumptionBillingStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DescribeConsumptionBillingStatusResult
func (a *ConsumptionBillingApiAPIService) ConsumptionBillingApiDescribeConsumptionBillingStatusExecute(r ApiConsumptionBillingApiDescribeConsumptionBillingStatusRequest) (*DescribeConsumptionBillingStatusResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DescribeConsumptionBillingStatusResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsumptionBillingApiAPIService.ConsumptionBillingApiDescribeConsumptionBillingStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/billing-status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
