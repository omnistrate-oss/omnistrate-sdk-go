/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the ListServicePlansResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListServicePlansResult{}

// ListServicePlansResult struct for ListServicePlansResult
type ListServicePlansResult struct {
	// Token to use for the next page
	NextPageToken *string `json:"nextPageToken,omitempty"`
	// List of service plans
	ServicePlans []GetServicePlanResult `json:"servicePlans"`
	AdditionalProperties map[string]interface{}
}

type _ListServicePlansResult ListServicePlansResult

// NewListServicePlansResult instantiates a new ListServicePlansResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListServicePlansResult(servicePlans []GetServicePlanResult) *ListServicePlansResult {
	this := ListServicePlansResult{}
	this.ServicePlans = servicePlans
	return &this
}

// NewListServicePlansResultWithDefaults instantiates a new ListServicePlansResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListServicePlansResultWithDefaults() *ListServicePlansResult {
	this := ListServicePlansResult{}
	return &this
}

// GetNextPageToken returns the NextPageToken field value if set, zero value otherwise.
func (o *ListServicePlansResult) GetNextPageToken() string {
	if o == nil || IsNil(o.NextPageToken) {
		var ret string
		return ret
	}
	return *o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListServicePlansResult) GetNextPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageToken) {
		return nil, false
	}
	return o.NextPageToken, true
}

// SetNextPageToken gets a reference to the given string and assigns it to the NextPageToken field.
func (o *ListServicePlansResult) SetNextPageToken(v string) {
	o.NextPageToken = &v
}

// GetServicePlans returns the ServicePlans field value
func (o *ListServicePlansResult) GetServicePlans() []GetServicePlanResult {
	if o == nil {
		var ret []GetServicePlanResult
		return ret
	}

	return o.ServicePlans
}

// GetServicePlansOk returns a tuple with the ServicePlans field value
// and a boolean to check if the value has been set.
func (o *ListServicePlansResult) GetServicePlansOk() ([]GetServicePlanResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServicePlans, true
}

// SetServicePlans sets field value
func (o *ListServicePlansResult) SetServicePlans(v []GetServicePlanResult) {
	o.ServicePlans = v
}

func (o ListServicePlansResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListServicePlansResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextPageToken) {
		toSerialize["nextPageToken"] = o.NextPageToken
	}
	toSerialize["servicePlans"] = o.ServicePlans

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListServicePlansResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"servicePlans",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListServicePlansResult := _ListServicePlansResult{}

	err = json.Unmarshal(data, &varListServicePlansResult)

	if err != nil {
		return err
	}

	*o = ListServicePlansResult(varListServicePlansResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "nextPageToken")
		delete(additionalProperties, "servicePlans")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListServicePlansResult struct {
	value *ListServicePlansResult
	isSet bool
}

func (v NullableListServicePlansResult) Get() *ListServicePlansResult {
	return v.value
}

func (v *NullableListServicePlansResult) Set(val *ListServicePlansResult) {
	v.value = val
	v.isSet = true
}

func (v NullableListServicePlansResult) IsSet() bool {
	return v.isSet
}

func (v *NullableListServicePlansResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListServicePlansResult(val *ListServicePlansResult) *NullableListServicePlansResult {
	return &NullableListServicePlansResult{value: val, isSet: true}
}

func (v NullableListServicePlansResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListServicePlansResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

