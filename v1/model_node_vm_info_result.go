/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the NodeVMInfoResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeVMInfoResult{}

// NodeVMInfoResult struct for NodeVMInfoResult
type NodeVMInfoResult struct {
	// The architecture of the VM
	Architecture string `json:"architecture"`
	// The availability zone code of the VM
	AzCode string `json:"azCode"`
	// The availability zone ID of the VM
	AzID *string `json:"azID,omitempty"`
	// The external IP of the VM
	ExternalIP *string `json:"externalIP,omitempty"`
	// The instance type of the VM
	InstanceType string `json:"instanceType"`
	// The internal IP of the VM
	InternalIP string `json:"internalIP"`
	// The k8s node name of the VM
	K8sNodeName string `json:"k8sNodeName"`
	// The kernel version of the VM
	KernelVersion *string `json:"kernelVersion,omitempty"`
	// The kubelet version of the VM
	KubeletVersion string `json:"kubeletVersion"`
	// The operating system of the VM
	Os string `json:"os"`
	// The provider ID of the VM
	ProviderID string `json:"providerID"`
	AdditionalProperties map[string]interface{}
}

type _NodeVMInfoResult NodeVMInfoResult

// NewNodeVMInfoResult instantiates a new NodeVMInfoResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeVMInfoResult(architecture string, azCode string, instanceType string, internalIP string, k8sNodeName string, kubeletVersion string, os string, providerID string) *NodeVMInfoResult {
	this := NodeVMInfoResult{}
	this.Architecture = architecture
	this.AzCode = azCode
	this.InstanceType = instanceType
	this.InternalIP = internalIP
	this.K8sNodeName = k8sNodeName
	this.KubeletVersion = kubeletVersion
	this.Os = os
	this.ProviderID = providerID
	return &this
}

// NewNodeVMInfoResultWithDefaults instantiates a new NodeVMInfoResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeVMInfoResultWithDefaults() *NodeVMInfoResult {
	this := NodeVMInfoResult{}
	return &this
}

// GetArchitecture returns the Architecture field value
func (o *NodeVMInfoResult) GetArchitecture() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Architecture
}

// GetArchitectureOk returns a tuple with the Architecture field value
// and a boolean to check if the value has been set.
func (o *NodeVMInfoResult) GetArchitectureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Architecture, true
}

// SetArchitecture sets field value
func (o *NodeVMInfoResult) SetArchitecture(v string) {
	o.Architecture = v
}

// GetAzCode returns the AzCode field value
func (o *NodeVMInfoResult) GetAzCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AzCode
}

// GetAzCodeOk returns a tuple with the AzCode field value
// and a boolean to check if the value has been set.
func (o *NodeVMInfoResult) GetAzCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AzCode, true
}

// SetAzCode sets field value
func (o *NodeVMInfoResult) SetAzCode(v string) {
	o.AzCode = v
}

// GetAzID returns the AzID field value if set, zero value otherwise.
func (o *NodeVMInfoResult) GetAzID() string {
	if o == nil || IsNil(o.AzID) {
		var ret string
		return ret
	}
	return *o.AzID
}

// GetAzIDOk returns a tuple with the AzID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeVMInfoResult) GetAzIDOk() (*string, bool) {
	if o == nil || IsNil(o.AzID) {
		return nil, false
	}
	return o.AzID, true
}

// SetAzID gets a reference to the given string and assigns it to the AzID field.
func (o *NodeVMInfoResult) SetAzID(v string) {
	o.AzID = &v
}

// GetExternalIP returns the ExternalIP field value if set, zero value otherwise.
func (o *NodeVMInfoResult) GetExternalIP() string {
	if o == nil || IsNil(o.ExternalIP) {
		var ret string
		return ret
	}
	return *o.ExternalIP
}

// GetExternalIPOk returns a tuple with the ExternalIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeVMInfoResult) GetExternalIPOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalIP) {
		return nil, false
	}
	return o.ExternalIP, true
}

// SetExternalIP gets a reference to the given string and assigns it to the ExternalIP field.
func (o *NodeVMInfoResult) SetExternalIP(v string) {
	o.ExternalIP = &v
}

// GetInstanceType returns the InstanceType field value
func (o *NodeVMInfoResult) GetInstanceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value
// and a boolean to check if the value has been set.
func (o *NodeVMInfoResult) GetInstanceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceType, true
}

// SetInstanceType sets field value
func (o *NodeVMInfoResult) SetInstanceType(v string) {
	o.InstanceType = v
}

// GetInternalIP returns the InternalIP field value
func (o *NodeVMInfoResult) GetInternalIP() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InternalIP
}

// GetInternalIPOk returns a tuple with the InternalIP field value
// and a boolean to check if the value has been set.
func (o *NodeVMInfoResult) GetInternalIPOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InternalIP, true
}

// SetInternalIP sets field value
func (o *NodeVMInfoResult) SetInternalIP(v string) {
	o.InternalIP = v
}

// GetK8sNodeName returns the K8sNodeName field value
func (o *NodeVMInfoResult) GetK8sNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.K8sNodeName
}

// GetK8sNodeNameOk returns a tuple with the K8sNodeName field value
// and a boolean to check if the value has been set.
func (o *NodeVMInfoResult) GetK8sNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.K8sNodeName, true
}

// SetK8sNodeName sets field value
func (o *NodeVMInfoResult) SetK8sNodeName(v string) {
	o.K8sNodeName = v
}

// GetKernelVersion returns the KernelVersion field value if set, zero value otherwise.
func (o *NodeVMInfoResult) GetKernelVersion() string {
	if o == nil || IsNil(o.KernelVersion) {
		var ret string
		return ret
	}
	return *o.KernelVersion
}

// GetKernelVersionOk returns a tuple with the KernelVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeVMInfoResult) GetKernelVersionOk() (*string, bool) {
	if o == nil || IsNil(o.KernelVersion) {
		return nil, false
	}
	return o.KernelVersion, true
}

// SetKernelVersion gets a reference to the given string and assigns it to the KernelVersion field.
func (o *NodeVMInfoResult) SetKernelVersion(v string) {
	o.KernelVersion = &v
}

// GetKubeletVersion returns the KubeletVersion field value
func (o *NodeVMInfoResult) GetKubeletVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KubeletVersion
}

// GetKubeletVersionOk returns a tuple with the KubeletVersion field value
// and a boolean to check if the value has been set.
func (o *NodeVMInfoResult) GetKubeletVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KubeletVersion, true
}

// SetKubeletVersion sets field value
func (o *NodeVMInfoResult) SetKubeletVersion(v string) {
	o.KubeletVersion = v
}

// GetOs returns the Os field value
func (o *NodeVMInfoResult) GetOs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *NodeVMInfoResult) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *NodeVMInfoResult) SetOs(v string) {
	o.Os = v
}

// GetProviderID returns the ProviderID field value
func (o *NodeVMInfoResult) GetProviderID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderID
}

// GetProviderIDOk returns a tuple with the ProviderID field value
// and a boolean to check if the value has been set.
func (o *NodeVMInfoResult) GetProviderIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderID, true
}

// SetProviderID sets field value
func (o *NodeVMInfoResult) SetProviderID(v string) {
	o.ProviderID = v
}

func (o NodeVMInfoResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeVMInfoResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["architecture"] = o.Architecture
	toSerialize["azCode"] = o.AzCode
	if !IsNil(o.AzID) {
		toSerialize["azID"] = o.AzID
	}
	if !IsNil(o.ExternalIP) {
		toSerialize["externalIP"] = o.ExternalIP
	}
	toSerialize["instanceType"] = o.InstanceType
	toSerialize["internalIP"] = o.InternalIP
	toSerialize["k8sNodeName"] = o.K8sNodeName
	if !IsNil(o.KernelVersion) {
		toSerialize["kernelVersion"] = o.KernelVersion
	}
	toSerialize["kubeletVersion"] = o.KubeletVersion
	toSerialize["os"] = o.Os
	toSerialize["providerID"] = o.ProviderID

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NodeVMInfoResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"architecture",
		"azCode",
		"instanceType",
		"internalIP",
		"k8sNodeName",
		"kubeletVersion",
		"os",
		"providerID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeVMInfoResult := _NodeVMInfoResult{}

	err = json.Unmarshal(data, &varNodeVMInfoResult)

	if err != nil {
		return err
	}

	*o = NodeVMInfoResult(varNodeVMInfoResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "architecture")
		delete(additionalProperties, "azCode")
		delete(additionalProperties, "azID")
		delete(additionalProperties, "externalIP")
		delete(additionalProperties, "instanceType")
		delete(additionalProperties, "internalIP")
		delete(additionalProperties, "k8sNodeName")
		delete(additionalProperties, "kernelVersion")
		delete(additionalProperties, "kubeletVersion")
		delete(additionalProperties, "os")
		delete(additionalProperties, "providerID")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNodeVMInfoResult struct {
	value *NodeVMInfoResult
	isSet bool
}

func (v NullableNodeVMInfoResult) Get() *NodeVMInfoResult {
	return v.value
}

func (v *NullableNodeVMInfoResult) Set(val *NodeVMInfoResult) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeVMInfoResult) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeVMInfoResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeVMInfoResult(val *NodeVMInfoResult) *NullableNodeVMInfoResult {
	return &NullableNodeVMInfoResult{value: val, isSet: true}
}

func (v NullableNodeVMInfoResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeVMInfoResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

