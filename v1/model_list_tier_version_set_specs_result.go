/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the ListTierVersionSetSpecsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListTierVersionSetSpecsResult{}

// ListTierVersionSetSpecsResult struct for ListTierVersionSetSpecsResult
type ListTierVersionSetSpecsResult struct {
	// List of tier version set specification versions
	Specs []TierVersionSetSpecSummary `json:"specs"`
	AdditionalProperties map[string]interface{}
}

type _ListTierVersionSetSpecsResult ListTierVersionSetSpecsResult

// NewListTierVersionSetSpecsResult instantiates a new ListTierVersionSetSpecsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTierVersionSetSpecsResult(specs []TierVersionSetSpecSummary) *ListTierVersionSetSpecsResult {
	this := ListTierVersionSetSpecsResult{}
	this.Specs = specs
	return &this
}

// NewListTierVersionSetSpecsResultWithDefaults instantiates a new ListTierVersionSetSpecsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTierVersionSetSpecsResultWithDefaults() *ListTierVersionSetSpecsResult {
	this := ListTierVersionSetSpecsResult{}
	return &this
}

// GetSpecs returns the Specs field value
func (o *ListTierVersionSetSpecsResult) GetSpecs() []TierVersionSetSpecSummary {
	if o == nil {
		var ret []TierVersionSetSpecSummary
		return ret
	}

	return o.Specs
}

// GetSpecsOk returns a tuple with the Specs field value
// and a boolean to check if the value has been set.
func (o *ListTierVersionSetSpecsResult) GetSpecsOk() ([]TierVersionSetSpecSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.Specs, true
}

// SetSpecs sets field value
func (o *ListTierVersionSetSpecsResult) SetSpecs(v []TierVersionSetSpecSummary) {
	o.Specs = v
}

func (o ListTierVersionSetSpecsResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListTierVersionSetSpecsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["specs"] = o.Specs

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListTierVersionSetSpecsResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"specs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListTierVersionSetSpecsResult := _ListTierVersionSetSpecsResult{}

	err = json.Unmarshal(data, &varListTierVersionSetSpecsResult)

	if err != nil {
		return err
	}

	*o = ListTierVersionSetSpecsResult(varListTierVersionSetSpecsResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "specs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListTierVersionSetSpecsResult struct {
	value *ListTierVersionSetSpecsResult
	isSet bool
}

func (v NullableListTierVersionSetSpecsResult) Get() *ListTierVersionSetSpecsResult {
	return v.value
}

func (v *NullableListTierVersionSetSpecsResult) Set(val *ListTierVersionSetSpecsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableListTierVersionSetSpecsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableListTierVersionSetSpecsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTierVersionSetSpecsResult(val *ListTierVersionSetSpecsResult) *NullableListTierVersionSetSpecsResult {
	return &NullableListTierVersionSetSpecsResult{value: val, isSet: true}
}

func (v NullableListTierVersionSetSpecsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTierVersionSetSpecsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


