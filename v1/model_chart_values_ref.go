/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the ChartValuesRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChartValuesRef{}

// ChartValuesRef struct for ChartValuesRef
type ChartValuesRef struct {
	// Scope condition for applying these chart values (can be used with either values or valuesFile). Key is the parameter name which supports template expressions like '{{ $sys.cloudProviderName }}', value is the expected value. 
	Scope *map[string]string `json:"scope,omitempty"`
	// Inline chart values as a map (mutually exclusive with valuesFile)
	Values interface{} `json:"values,omitempty"`
	ValuesFile *ValuesFile `json:"valuesFile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChartValuesRef ChartValuesRef

// NewChartValuesRef instantiates a new ChartValuesRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChartValuesRef() *ChartValuesRef {
	this := ChartValuesRef{}
	return &this
}

// NewChartValuesRefWithDefaults instantiates a new ChartValuesRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChartValuesRefWithDefaults() *ChartValuesRef {
	this := ChartValuesRef{}
	return &this
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ChartValuesRef) GetScope() map[string]string {
	if o == nil || IsNil(o.Scope) {
		var ret map[string]string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartValuesRef) GetScopeOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// SetScope gets a reference to the given map[string]string and assigns it to the Scope field.
func (o *ChartValuesRef) SetScope(v map[string]string) {
	o.Scope = &v
}

// GetValues returns the Values field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChartValuesRef) GetValues() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChartValuesRef) GetValuesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return &o.Values, true
}

// SetValues gets a reference to the given interface{} and assigns it to the Values field.
func (o *ChartValuesRef) SetValues(v interface{}) {
	o.Values = v
}

// GetValuesFile returns the ValuesFile field value if set, zero value otherwise.
func (o *ChartValuesRef) GetValuesFile() ValuesFile {
	if o == nil || IsNil(o.ValuesFile) {
		var ret ValuesFile
		return ret
	}
	return *o.ValuesFile
}

// GetValuesFileOk returns a tuple with the ValuesFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartValuesRef) GetValuesFileOk() (*ValuesFile, bool) {
	if o == nil || IsNil(o.ValuesFile) {
		return nil, false
	}
	return o.ValuesFile, true
}

// SetValuesFile gets a reference to the given ValuesFile and assigns it to the ValuesFile field.
func (o *ChartValuesRef) SetValuesFile(v ValuesFile) {
	o.ValuesFile = &v
}

func (o ChartValuesRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChartValuesRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.ValuesFile) {
		toSerialize["valuesFile"] = o.ValuesFile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChartValuesRef) UnmarshalJSON(data []byte) (err error) {
	varChartValuesRef := _ChartValuesRef{}

	err = json.Unmarshal(data, &varChartValuesRef)

	if err != nil {
		return err
	}

	*o = ChartValuesRef(varChartValuesRef)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "scope")
		delete(additionalProperties, "values")
		delete(additionalProperties, "valuesFile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChartValuesRef struct {
	value *ChartValuesRef
	isSet bool
}

func (v NullableChartValuesRef) Get() *ChartValuesRef {
	return v.value
}

func (v *NullableChartValuesRef) Set(val *ChartValuesRef) {
	v.value = val
	v.isSet = true
}

func (v NullableChartValuesRef) IsSet() bool {
	return v.isSet
}

func (v *NullableChartValuesRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChartValuesRef(val *ChartValuesRef) *NullableChartValuesRef {
	return &NullableChartValuesRef{value: val, isSet: true}
}

func (v NullableChartValuesRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChartValuesRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


