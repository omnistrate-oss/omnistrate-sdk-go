/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the InviteUserRequest2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InviteUserRequest2{}

// InviteUserRequest2 struct for InviteUserRequest2
type InviteUserRequest2 struct {
	Email string `json:"email"`
	RoleType string `json:"roleType"`
	AdditionalProperties map[string]interface{}
}

type _InviteUserRequest2 InviteUserRequest2

// NewInviteUserRequest2 instantiates a new InviteUserRequest2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteUserRequest2(email string, roleType string) *InviteUserRequest2 {
	this := InviteUserRequest2{}
	this.Email = email
	this.RoleType = roleType
	return &this
}

// NewInviteUserRequest2WithDefaults instantiates a new InviteUserRequest2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteUserRequest2WithDefaults() *InviteUserRequest2 {
	this := InviteUserRequest2{}
	return &this
}

// GetEmail returns the Email field value
func (o *InviteUserRequest2) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *InviteUserRequest2) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *InviteUserRequest2) SetEmail(v string) {
	o.Email = v
}

// GetRoleType returns the RoleType field value
func (o *InviteUserRequest2) GetRoleType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleType
}

// GetRoleTypeOk returns a tuple with the RoleType field value
// and a boolean to check if the value has been set.
func (o *InviteUserRequest2) GetRoleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleType, true
}

// SetRoleType sets field value
func (o *InviteUserRequest2) SetRoleType(v string) {
	o.RoleType = v
}

func (o InviteUserRequest2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InviteUserRequest2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["roleType"] = o.RoleType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InviteUserRequest2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"roleType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInviteUserRequest2 := _InviteUserRequest2{}

	err = json.Unmarshal(data, &varInviteUserRequest2)

	if err != nil {
		return err
	}

	*o = InviteUserRequest2(varInviteUserRequest2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		delete(additionalProperties, "roleType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInviteUserRequest2 struct {
	value *InviteUserRequest2
	isSet bool
}

func (v NullableInviteUserRequest2) Get() *InviteUserRequest2 {
	return v.value
}

func (v *NullableInviteUserRequest2) Set(val *InviteUserRequest2) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteUserRequest2) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteUserRequest2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteUserRequest2(val *InviteUserRequest2) *NullableInviteUserRequest2 {
	return &NullableInviteUserRequest2{value: val, isSet: true}
}

func (v NullableInviteUserRequest2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteUserRequest2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

