/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the TierVersionSetSpecSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TierVersionSetSpecSummary{}

// TierVersionSetSpecSummary struct for TierVersionSetSpecSummary
type TierVersionSetSpecSummary struct {
	// When the version was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Whether this version has a stored YAML spec file
	HasSpecFile bool `json:"hasSpecFile"`
	// ID of a Product Tier
	ProductTierId string `json:"productTierId"`
	// ID of a Service
	ServiceId string `json:"serviceId"`
	// Status of the version set
	Status string `json:"status"`
	// When the version was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Version of the tier version set spec
	Version string `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _TierVersionSetSpecSummary TierVersionSetSpecSummary

// NewTierVersionSetSpecSummary instantiates a new TierVersionSetSpecSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTierVersionSetSpecSummary(hasSpecFile bool, productTierId string, serviceId string, status string, version string) *TierVersionSetSpecSummary {
	this := TierVersionSetSpecSummary{}
	this.HasSpecFile = hasSpecFile
	this.ProductTierId = productTierId
	this.ServiceId = serviceId
	this.Status = status
	this.Version = version
	return &this
}

// NewTierVersionSetSpecSummaryWithDefaults instantiates a new TierVersionSetSpecSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTierVersionSetSpecSummaryWithDefaults() *TierVersionSetSpecSummary {
	this := TierVersionSetSpecSummary{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TierVersionSetSpecSummary) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierVersionSetSpecSummary) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TierVersionSetSpecSummary) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetHasSpecFile returns the HasSpecFile field value
func (o *TierVersionSetSpecSummary) GetHasSpecFile() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasSpecFile
}

// GetHasSpecFileOk returns a tuple with the HasSpecFile field value
// and a boolean to check if the value has been set.
func (o *TierVersionSetSpecSummary) GetHasSpecFileOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasSpecFile, true
}

// SetHasSpecFile sets field value
func (o *TierVersionSetSpecSummary) SetHasSpecFile(v bool) {
	o.HasSpecFile = v
}

// GetProductTierId returns the ProductTierId field value
func (o *TierVersionSetSpecSummary) GetProductTierId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value
// and a boolean to check if the value has been set.
func (o *TierVersionSetSpecSummary) GetProductTierIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTierId, true
}

// SetProductTierId sets field value
func (o *TierVersionSetSpecSummary) SetProductTierId(v string) {
	o.ProductTierId = v
}

// GetServiceId returns the ServiceId field value
func (o *TierVersionSetSpecSummary) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *TierVersionSetSpecSummary) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *TierVersionSetSpecSummary) SetServiceId(v string) {
	o.ServiceId = v
}

// GetStatus returns the Status field value
func (o *TierVersionSetSpecSummary) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TierVersionSetSpecSummary) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TierVersionSetSpecSummary) SetStatus(v string) {
	o.Status = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TierVersionSetSpecSummary) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierVersionSetSpecSummary) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *TierVersionSetSpecSummary) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetVersion returns the Version field value
func (o *TierVersionSetSpecSummary) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *TierVersionSetSpecSummary) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *TierVersionSetSpecSummary) SetVersion(v string) {
	o.Version = v
}

func (o TierVersionSetSpecSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TierVersionSetSpecSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	toSerialize["hasSpecFile"] = o.HasSpecFile
	toSerialize["productTierId"] = o.ProductTierId
	toSerialize["serviceId"] = o.ServiceId
	toSerialize["status"] = o.Status
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	toSerialize["version"] = o.Version

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TierVersionSetSpecSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hasSpecFile",
		"productTierId",
		"serviceId",
		"status",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTierVersionSetSpecSummary := _TierVersionSetSpecSummary{}

	err = json.Unmarshal(data, &varTierVersionSetSpecSummary)

	if err != nil {
		return err
	}

	*o = TierVersionSetSpecSummary(varTierVersionSetSpecSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "hasSpecFile")
		delete(additionalProperties, "productTierId")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "status")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTierVersionSetSpecSummary struct {
	value *TierVersionSetSpecSummary
	isSet bool
}

func (v NullableTierVersionSetSpecSummary) Get() *TierVersionSetSpecSummary {
	return v.value
}

func (v *NullableTierVersionSetSpecSummary) Set(val *TierVersionSetSpecSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableTierVersionSetSpecSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableTierVersionSetSpecSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTierVersionSetSpecSummary(val *TierVersionSetSpecSummary) *NullableTierVersionSetSpecSummary {
	return &NullableTierVersionSetSpecSummary{value: val, isSet: true}
}

func (v NullableTierVersionSetSpecSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTierVersionSetSpecSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

