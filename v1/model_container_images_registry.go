/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the ContainerImagesRegistry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerImagesRegistry{}

// ContainerImagesRegistry struct for ContainerImagesRegistry
type ContainerImagesRegistry struct {
	Credentials *ContainerImageRegistryCredentials `json:"credentials,omitempty"`
	// The URL of the container image registry (if not provided, defaults to the DockerHub)
	RegistryURL string `json:"registryURL"`
	// The name of the container image repository
	RepositoryName string `json:"repositoryName"`
	AdditionalProperties map[string]interface{}
}

type _ContainerImagesRegistry ContainerImagesRegistry

// NewContainerImagesRegistry instantiates a new ContainerImagesRegistry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerImagesRegistry(registryURL string, repositoryName string) *ContainerImagesRegistry {
	this := ContainerImagesRegistry{}
	this.RegistryURL = registryURL
	this.RepositoryName = repositoryName
	return &this
}

// NewContainerImagesRegistryWithDefaults instantiates a new ContainerImagesRegistry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerImagesRegistryWithDefaults() *ContainerImagesRegistry {
	this := ContainerImagesRegistry{}
	return &this
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *ContainerImagesRegistry) GetCredentials() ContainerImageRegistryCredentials {
	if o == nil || IsNil(o.Credentials) {
		var ret ContainerImageRegistryCredentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImagesRegistry) GetCredentialsOk() (*ContainerImageRegistryCredentials, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// SetCredentials gets a reference to the given ContainerImageRegistryCredentials and assigns it to the Credentials field.
func (o *ContainerImagesRegistry) SetCredentials(v ContainerImageRegistryCredentials) {
	o.Credentials = &v
}

// GetRegistryURL returns the RegistryURL field value
func (o *ContainerImagesRegistry) GetRegistryURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistryURL
}

// GetRegistryURLOk returns a tuple with the RegistryURL field value
// and a boolean to check if the value has been set.
func (o *ContainerImagesRegistry) GetRegistryURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistryURL, true
}

// SetRegistryURL sets field value
func (o *ContainerImagesRegistry) SetRegistryURL(v string) {
	o.RegistryURL = v
}

// GetRepositoryName returns the RepositoryName field value
func (o *ContainerImagesRegistry) GetRepositoryName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositoryName
}

// GetRepositoryNameOk returns a tuple with the RepositoryName field value
// and a boolean to check if the value has been set.
func (o *ContainerImagesRegistry) GetRepositoryNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoryName, true
}

// SetRepositoryName sets field value
func (o *ContainerImagesRegistry) SetRepositoryName(v string) {
	o.RepositoryName = v
}

func (o ContainerImagesRegistry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerImagesRegistry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	toSerialize["registryURL"] = o.RegistryURL
	toSerialize["repositoryName"] = o.RepositoryName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContainerImagesRegistry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registryURL",
		"repositoryName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainerImagesRegistry := _ContainerImagesRegistry{}

	err = json.Unmarshal(data, &varContainerImagesRegistry)

	if err != nil {
		return err
	}

	*o = ContainerImagesRegistry(varContainerImagesRegistry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "credentials")
		delete(additionalProperties, "registryURL")
		delete(additionalProperties, "repositoryName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContainerImagesRegistry struct {
	value *ContainerImagesRegistry
	isSet bool
}

func (v NullableContainerImagesRegistry) Get() *ContainerImagesRegistry {
	return v.value
}

func (v *NullableContainerImagesRegistry) Set(val *ContainerImagesRegistry) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerImagesRegistry) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerImagesRegistry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerImagesRegistry(val *ContainerImagesRegistry) *NullableContainerImagesRegistry {
	return &NullableContainerImagesRegistry{value: val, isSet: true}
}

func (v NullableContainerImagesRegistry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerImagesRegistry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

