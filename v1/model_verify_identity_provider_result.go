/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the VerifyIdentityProviderResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifyIdentityProviderResult{}

// VerifyIdentityProviderResult struct for VerifyIdentityProviderResult
type VerifyIdentityProviderResult struct {
	// The Client ID of the Identity Provider
	ClientId string `json:"clientId"`
	// The Client Secret of the Identity Provider
	ClientSecret *string `json:"clientSecret,omitempty"`
	// ID of an Identity Provider
	Id string `json:"id"`
	// The name of the identity provider
	IdentityProviderName string `json:"identityProviderName"`
	// The name of the Identity Provider
	Name *string `json:"name,omitempty"`
	// The status of an operation
	Status string `json:"status"`
	AdditionalProperties map[string]interface{}
}

type _VerifyIdentityProviderResult VerifyIdentityProviderResult

// NewVerifyIdentityProviderResult instantiates a new VerifyIdentityProviderResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyIdentityProviderResult(clientId string, id string, identityProviderName string, status string) *VerifyIdentityProviderResult {
	this := VerifyIdentityProviderResult{}
	this.ClientId = clientId
	this.Id = id
	this.IdentityProviderName = identityProviderName
	this.Status = status
	return &this
}

// NewVerifyIdentityProviderResultWithDefaults instantiates a new VerifyIdentityProviderResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyIdentityProviderResultWithDefaults() *VerifyIdentityProviderResult {
	this := VerifyIdentityProviderResult{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *VerifyIdentityProviderResult) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *VerifyIdentityProviderResult) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *VerifyIdentityProviderResult) SetClientId(v string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *VerifyIdentityProviderResult) GetClientSecret() string {
	if o == nil || IsNil(o.ClientSecret) {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyIdentityProviderResult) GetClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.ClientSecret) {
		return nil, false
	}
	return o.ClientSecret, true
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *VerifyIdentityProviderResult) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetId returns the Id field value
func (o *VerifyIdentityProviderResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VerifyIdentityProviderResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VerifyIdentityProviderResult) SetId(v string) {
	o.Id = v
}

// GetIdentityProviderName returns the IdentityProviderName field value
func (o *VerifyIdentityProviderResult) GetIdentityProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentityProviderName
}

// GetIdentityProviderNameOk returns a tuple with the IdentityProviderName field value
// and a boolean to check if the value has been set.
func (o *VerifyIdentityProviderResult) GetIdentityProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentityProviderName, true
}

// SetIdentityProviderName sets field value
func (o *VerifyIdentityProviderResult) SetIdentityProviderName(v string) {
	o.IdentityProviderName = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VerifyIdentityProviderResult) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyIdentityProviderResult) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VerifyIdentityProviderResult) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value
func (o *VerifyIdentityProviderResult) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VerifyIdentityProviderResult) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VerifyIdentityProviderResult) SetStatus(v string) {
	o.Status = v
}

func (o VerifyIdentityProviderResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifyIdentityProviderResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clientId"] = o.ClientId
	if !IsNil(o.ClientSecret) {
		toSerialize["clientSecret"] = o.ClientSecret
	}
	toSerialize["id"] = o.Id
	toSerialize["identityProviderName"] = o.IdentityProviderName
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["status"] = o.Status

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VerifyIdentityProviderResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clientId",
		"id",
		"identityProviderName",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerifyIdentityProviderResult := _VerifyIdentityProviderResult{}

	err = json.Unmarshal(data, &varVerifyIdentityProviderResult)

	if err != nil {
		return err
	}

	*o = VerifyIdentityProviderResult(varVerifyIdentityProviderResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "clientId")
		delete(additionalProperties, "clientSecret")
		delete(additionalProperties, "id")
		delete(additionalProperties, "identityProviderName")
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVerifyIdentityProviderResult struct {
	value *VerifyIdentityProviderResult
	isSet bool
}

func (v NullableVerifyIdentityProviderResult) Get() *VerifyIdentityProviderResult {
	return v.value
}

func (v *NullableVerifyIdentityProviderResult) Set(val *VerifyIdentityProviderResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyIdentityProviderResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyIdentityProviderResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyIdentityProviderResult(val *VerifyIdentityProviderResult) *NullableVerifyIdentityProviderResult {
	return &NullableVerifyIdentityProviderResult{value: val, isSet: true}
}

func (v NullableVerifyIdentityProviderResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyIdentityProviderResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

