/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type TierVersionSetApiAPI interface {

	/*
	TierVersionSetApiCreateTierVersionSet CreateTierVersionSet tier-version-set-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId ID of the Service
	@param productTierId The product tier ID that this version set belongs to.
	@return ApiTierVersionSetApiCreateTierVersionSetRequest
	*/
	TierVersionSetApiCreateTierVersionSet(ctx context.Context, serviceId string, productTierId string) ApiTierVersionSetApiCreateTierVersionSetRequest

	// TierVersionSetApiCreateTierVersionSetExecute executes the request
	//  @return CreateTierVersionSetResult
	TierVersionSetApiCreateTierVersionSetExecute(r ApiTierVersionSetApiCreateTierVersionSetRequest) (*CreateTierVersionSetResult, *http.Response, error)

	/*
	TierVersionSetApiDeprecateTierVersionSet DeprecateTierVersionSet tier-version-set-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId ID of the Service
	@param productTierId The product tier ID that this version set belongs to.
	@param version The version number for the specific version set.
	@return ApiTierVersionSetApiDeprecateTierVersionSetRequest
	*/
	TierVersionSetApiDeprecateTierVersionSet(ctx context.Context, serviceId string, productTierId string, version string) ApiTierVersionSetApiDeprecateTierVersionSetRequest

	// TierVersionSetApiDeprecateTierVersionSetExecute executes the request
	//  @return TierVersionSet
	TierVersionSetApiDeprecateTierVersionSetExecute(r ApiTierVersionSetApiDeprecateTierVersionSetRequest) (*TierVersionSet, *http.Response, error)

	/*
	TierVersionSetApiDescribeTierVersionSet DescribeTierVersionSet tier-version-set-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId ID of the Service
	@param productTierId The product tier ID that this version set belongs to.
	@param version The version number for the specific version set.
	@return ApiTierVersionSetApiDescribeTierVersionSetRequest
	*/
	TierVersionSetApiDescribeTierVersionSet(ctx context.Context, serviceId string, productTierId string, version string) ApiTierVersionSetApiDescribeTierVersionSetRequest

	// TierVersionSetApiDescribeTierVersionSetExecute executes the request
	//  @return TierVersionSet
	TierVersionSetApiDescribeTierVersionSetExecute(r ApiTierVersionSetApiDescribeTierVersionSetRequest) (*TierVersionSet, *http.Response, error)

	/*
	TierVersionSetApiDiffTierVersionSets DiffTierVersionSets tier-version-set-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId ID of the Service
	@param productTierId The product tier ID that this version set belongs to.
	@param version The version number for the version set.
	@param anotherVersion The target version to compare against.
	@return ApiTierVersionSetApiDiffTierVersionSetsRequest
	*/
	TierVersionSetApiDiffTierVersionSets(ctx context.Context, serviceId string, productTierId string, version string, anotherVersion string) ApiTierVersionSetApiDiffTierVersionSetsRequest

	// TierVersionSetApiDiffTierVersionSetsExecute executes the request
	//  @return DiffTierVersionSetsResult
	TierVersionSetApiDiffTierVersionSetsExecute(r ApiTierVersionSetApiDiffTierVersionSetsRequest) (*DiffTierVersionSetsResult, *http.Response, error)

	/*
	TierVersionSetApiListTierVersionSets ListTierVersionSets tier-version-set-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId ID of the Service
	@param productTierId The product tier ID that this version set belongs to.
	@return ApiTierVersionSetApiListTierVersionSetsRequest
	*/
	TierVersionSetApiListTierVersionSets(ctx context.Context, serviceId string, productTierId string) ApiTierVersionSetApiListTierVersionSetsRequest

	// TierVersionSetApiListTierVersionSetsExecute executes the request
	//  @return ListTierVersionSetsResult
	TierVersionSetApiListTierVersionSetsExecute(r ApiTierVersionSetApiListTierVersionSetsRequest) (*ListTierVersionSetsResult, *http.Response, error)

	/*
	TierVersionSetApiPromoteTierVersionSet PromoteTierVersionSet tier-version-set-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId ID of the Service
	@param productTierId The product tier ID that this version set belongs to.
	@param version The version number for the specific version set.
	@return ApiTierVersionSetApiPromoteTierVersionSetRequest
	*/
	TierVersionSetApiPromoteTierVersionSet(ctx context.Context, serviceId string, productTierId string, version string) ApiTierVersionSetApiPromoteTierVersionSetRequest

	// TierVersionSetApiPromoteTierVersionSetExecute executes the request
	//  @return TierVersionSet
	TierVersionSetApiPromoteTierVersionSetExecute(r ApiTierVersionSetApiPromoteTierVersionSetRequest) (*TierVersionSet, *http.Response, error)

	/*
	TierVersionSetApiReleaseTierVersionSet ReleaseTierVersionSet tier-version-set-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId ID of the Service
	@param productTierId The product tier ID that this version set belongs to.
	@param version The version number for the specific version set.
	@return ApiTierVersionSetApiReleaseTierVersionSetRequest
	*/
	TierVersionSetApiReleaseTierVersionSet(ctx context.Context, serviceId string, productTierId string, version string) ApiTierVersionSetApiReleaseTierVersionSetRequest

	// TierVersionSetApiReleaseTierVersionSetExecute executes the request
	//  @return TierVersionSet
	TierVersionSetApiReleaseTierVersionSetExecute(r ApiTierVersionSetApiReleaseTierVersionSetRequest) (*TierVersionSet, *http.Response, error)

	/*
	TierVersionSetApiUpdateTierVersionSet UpdateTierVersionSet tier-version-set-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceId ID of the Service
	@param productTierId The product tier ID that this version set belongs to.
	@param version The version number for the specific version set.
	@return ApiTierVersionSetApiUpdateTierVersionSetRequest
	*/
	TierVersionSetApiUpdateTierVersionSet(ctx context.Context, serviceId string, productTierId string, version string) ApiTierVersionSetApiUpdateTierVersionSetRequest

	// TierVersionSetApiUpdateTierVersionSetExecute executes the request
	//  @return TierVersionSet
	TierVersionSetApiUpdateTierVersionSetExecute(r ApiTierVersionSetApiUpdateTierVersionSetRequest) (*TierVersionSet, *http.Response, error)
}

// TierVersionSetApiAPIService TierVersionSetApiAPI service
type TierVersionSetApiAPIService service

type ApiTierVersionSetApiCreateTierVersionSetRequest struct {
	ctx context.Context
	ApiService TierVersionSetApiAPI
	serviceId string
	productTierId string
	createTierVersionSetRequest2 *CreateTierVersionSetRequest2
}

func (r ApiTierVersionSetApiCreateTierVersionSetRequest) CreateTierVersionSetRequest2(createTierVersionSetRequest2 CreateTierVersionSetRequest2) ApiTierVersionSetApiCreateTierVersionSetRequest {
	r.createTierVersionSetRequest2 = &createTierVersionSetRequest2
	return r
}

func (r ApiTierVersionSetApiCreateTierVersionSetRequest) Execute() (*CreateTierVersionSetResult, *http.Response, error) {
	return r.ApiService.TierVersionSetApiCreateTierVersionSetExecute(r)
}

/*
TierVersionSetApiCreateTierVersionSet CreateTierVersionSet tier-version-set-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId ID of the Service
 @param productTierId The product tier ID that this version set belongs to.
 @return ApiTierVersionSetApiCreateTierVersionSetRequest
*/
func (a *TierVersionSetApiAPIService) TierVersionSetApiCreateTierVersionSet(ctx context.Context, serviceId string, productTierId string) ApiTierVersionSetApiCreateTierVersionSetRequest {
	return ApiTierVersionSetApiCreateTierVersionSetRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		productTierId: productTierId,
	}
}

// Execute executes the request
//  @return CreateTierVersionSetResult
func (a *TierVersionSetApiAPIService) TierVersionSetApiCreateTierVersionSetExecute(r ApiTierVersionSetApiCreateTierVersionSetRequest) (*CreateTierVersionSetResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTierVersionSetResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TierVersionSetApiAPIService.TierVersionSetApiCreateTierVersionSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierId"+"}", url.PathEscape(parameterValueToString(r.productTierId, "productTierId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTierVersionSetRequest2 == nil {
		return localVarReturnValue, nil, reportError("createTierVersionSetRequest2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTierVersionSetRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTierVersionSetApiDeprecateTierVersionSetRequest struct {
	ctx context.Context
	ApiService TierVersionSetApiAPI
	serviceId string
	productTierId string
	version string
}

func (r ApiTierVersionSetApiDeprecateTierVersionSetRequest) Execute() (*TierVersionSet, *http.Response, error) {
	return r.ApiService.TierVersionSetApiDeprecateTierVersionSetExecute(r)
}

/*
TierVersionSetApiDeprecateTierVersionSet DeprecateTierVersionSet tier-version-set-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId ID of the Service
 @param productTierId The product tier ID that this version set belongs to.
 @param version The version number for the specific version set.
 @return ApiTierVersionSetApiDeprecateTierVersionSetRequest
*/
func (a *TierVersionSetApiAPIService) TierVersionSetApiDeprecateTierVersionSet(ctx context.Context, serviceId string, productTierId string, version string) ApiTierVersionSetApiDeprecateTierVersionSetRequest {
	return ApiTierVersionSetApiDeprecateTierVersionSetRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		productTierId: productTierId,
		version: version,
	}
}

// Execute executes the request
//  @return TierVersionSet
func (a *TierVersionSetApiAPIService) TierVersionSetApiDeprecateTierVersionSetExecute(r ApiTierVersionSetApiDeprecateTierVersionSetRequest) (*TierVersionSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TierVersionSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TierVersionSetApiAPIService.TierVersionSetApiDeprecateTierVersionSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}/deprecate"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierId"+"}", url.PathEscape(parameterValueToString(r.productTierId, "productTierId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterValueToString(r.version, "version")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTierVersionSetApiDescribeTierVersionSetRequest struct {
	ctx context.Context
	ApiService TierVersionSetApiAPI
	serviceId string
	productTierId string
	version string
}

func (r ApiTierVersionSetApiDescribeTierVersionSetRequest) Execute() (*TierVersionSet, *http.Response, error) {
	return r.ApiService.TierVersionSetApiDescribeTierVersionSetExecute(r)
}

/*
TierVersionSetApiDescribeTierVersionSet DescribeTierVersionSet tier-version-set-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId ID of the Service
 @param productTierId The product tier ID that this version set belongs to.
 @param version The version number for the specific version set.
 @return ApiTierVersionSetApiDescribeTierVersionSetRequest
*/
func (a *TierVersionSetApiAPIService) TierVersionSetApiDescribeTierVersionSet(ctx context.Context, serviceId string, productTierId string, version string) ApiTierVersionSetApiDescribeTierVersionSetRequest {
	return ApiTierVersionSetApiDescribeTierVersionSetRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		productTierId: productTierId,
		version: version,
	}
}

// Execute executes the request
//  @return TierVersionSet
func (a *TierVersionSetApiAPIService) TierVersionSetApiDescribeTierVersionSetExecute(r ApiTierVersionSetApiDescribeTierVersionSetRequest) (*TierVersionSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TierVersionSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TierVersionSetApiAPIService.TierVersionSetApiDescribeTierVersionSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierId"+"}", url.PathEscape(parameterValueToString(r.productTierId, "productTierId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterValueToString(r.version, "version")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTierVersionSetApiDiffTierVersionSetsRequest struct {
	ctx context.Context
	ApiService TierVersionSetApiAPI
	serviceId string
	productTierId string
	version string
	anotherVersion string
}

func (r ApiTierVersionSetApiDiffTierVersionSetsRequest) Execute() (*DiffTierVersionSetsResult, *http.Response, error) {
	return r.ApiService.TierVersionSetApiDiffTierVersionSetsExecute(r)
}

/*
TierVersionSetApiDiffTierVersionSets DiffTierVersionSets tier-version-set-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId ID of the Service
 @param productTierId The product tier ID that this version set belongs to.
 @param version The version number for the version set.
 @param anotherVersion The target version to compare against.
 @return ApiTierVersionSetApiDiffTierVersionSetsRequest
*/
func (a *TierVersionSetApiAPIService) TierVersionSetApiDiffTierVersionSets(ctx context.Context, serviceId string, productTierId string, version string, anotherVersion string) ApiTierVersionSetApiDiffTierVersionSetsRequest {
	return ApiTierVersionSetApiDiffTierVersionSetsRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		productTierId: productTierId,
		version: version,
		anotherVersion: anotherVersion,
	}
}

// Execute executes the request
//  @return DiffTierVersionSetsResult
func (a *TierVersionSetApiAPIService) TierVersionSetApiDiffTierVersionSetsExecute(r ApiTierVersionSetApiDiffTierVersionSetsRequest) (*DiffTierVersionSetsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DiffTierVersionSetsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TierVersionSetApiAPIService.TierVersionSetApiDiffTierVersionSets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}/diff/{anotherVersion}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierId"+"}", url.PathEscape(parameterValueToString(r.productTierId, "productTierId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterValueToString(r.version, "version")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherVersion"+"}", url.PathEscape(parameterValueToString(r.anotherVersion, "anotherVersion")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTierVersionSetApiListTierVersionSetsRequest struct {
	ctx context.Context
	ApiService TierVersionSetApiAPI
	serviceId string
	productTierId string
	latestMajorVersionOnly *bool
	latestIncrementalVersionForMajorVersion *string
	nextPageToken *string
	pageSize *int64
}

// If true, the latest major version is returned. The parameter needs to be specified in isolation.
func (r ApiTierVersionSetApiListTierVersionSetsRequest) LatestMajorVersionOnly(latestMajorVersionOnly bool) ApiTierVersionSetApiListTierVersionSetsRequest {
	r.latestMajorVersionOnly = &latestMajorVersionOnly
	return r
}

// Returns the latest incremental version for the given major version. The paramenter needs to be specified in isolation.
func (r ApiTierVersionSetApiListTierVersionSetsRequest) LatestIncrementalVersionForMajorVersion(latestIncrementalVersionForMajorVersion string) ApiTierVersionSetApiListTierVersionSetsRequest {
	r.latestIncrementalVersionForMajorVersion = &latestIncrementalVersionForMajorVersion
	return r
}

func (r ApiTierVersionSetApiListTierVersionSetsRequest) NextPageToken(nextPageToken string) ApiTierVersionSetApiListTierVersionSetsRequest {
	r.nextPageToken = &nextPageToken
	return r
}

func (r ApiTierVersionSetApiListTierVersionSetsRequest) PageSize(pageSize int64) ApiTierVersionSetApiListTierVersionSetsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiTierVersionSetApiListTierVersionSetsRequest) Execute() (*ListTierVersionSetsResult, *http.Response, error) {
	return r.ApiService.TierVersionSetApiListTierVersionSetsExecute(r)
}

/*
TierVersionSetApiListTierVersionSets ListTierVersionSets tier-version-set-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId ID of the Service
 @param productTierId The product tier ID that this version set belongs to.
 @return ApiTierVersionSetApiListTierVersionSetsRequest
*/
func (a *TierVersionSetApiAPIService) TierVersionSetApiListTierVersionSets(ctx context.Context, serviceId string, productTierId string) ApiTierVersionSetApiListTierVersionSetsRequest {
	return ApiTierVersionSetApiListTierVersionSetsRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		productTierId: productTierId,
	}
}

// Execute executes the request
//  @return ListTierVersionSetsResult
func (a *TierVersionSetApiAPIService) TierVersionSetApiListTierVersionSetsExecute(r ApiTierVersionSetApiListTierVersionSetsRequest) (*ListTierVersionSetsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListTierVersionSetsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TierVersionSetApiAPIService.TierVersionSetApiListTierVersionSets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierId"+"}", url.PathEscape(parameterValueToString(r.productTierId, "productTierId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.latestMajorVersionOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "latestMajorVersionOnly", r.latestMajorVersionOnly, "form", "")
	}
	if r.latestIncrementalVersionForMajorVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "latestIncrementalVersionForMajorVersion", r.latestIncrementalVersionForMajorVersion, "form", "")
	}
	if r.nextPageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextPageToken", r.nextPageToken, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTierVersionSetApiPromoteTierVersionSetRequest struct {
	ctx context.Context
	ApiService TierVersionSetApiAPI
	serviceId string
	productTierId string
	version string
}

func (r ApiTierVersionSetApiPromoteTierVersionSetRequest) Execute() (*TierVersionSet, *http.Response, error) {
	return r.ApiService.TierVersionSetApiPromoteTierVersionSetExecute(r)
}

/*
TierVersionSetApiPromoteTierVersionSet PromoteTierVersionSet tier-version-set-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId ID of the Service
 @param productTierId The product tier ID that this version set belongs to.
 @param version The version number for the specific version set.
 @return ApiTierVersionSetApiPromoteTierVersionSetRequest
*/
func (a *TierVersionSetApiAPIService) TierVersionSetApiPromoteTierVersionSet(ctx context.Context, serviceId string, productTierId string, version string) ApiTierVersionSetApiPromoteTierVersionSetRequest {
	return ApiTierVersionSetApiPromoteTierVersionSetRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		productTierId: productTierId,
		version: version,
	}
}

// Execute executes the request
//  @return TierVersionSet
func (a *TierVersionSetApiAPIService) TierVersionSetApiPromoteTierVersionSetExecute(r ApiTierVersionSetApiPromoteTierVersionSetRequest) (*TierVersionSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TierVersionSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TierVersionSetApiAPIService.TierVersionSetApiPromoteTierVersionSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}/promote"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierId"+"}", url.PathEscape(parameterValueToString(r.productTierId, "productTierId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterValueToString(r.version, "version")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTierVersionSetApiReleaseTierVersionSetRequest struct {
	ctx context.Context
	ApiService TierVersionSetApiAPI
	serviceId string
	productTierId string
	version string
	releaseTierVersionSetRequest2 *ReleaseTierVersionSetRequest2
}

func (r ApiTierVersionSetApiReleaseTierVersionSetRequest) ReleaseTierVersionSetRequest2(releaseTierVersionSetRequest2 ReleaseTierVersionSetRequest2) ApiTierVersionSetApiReleaseTierVersionSetRequest {
	r.releaseTierVersionSetRequest2 = &releaseTierVersionSetRequest2
	return r
}

func (r ApiTierVersionSetApiReleaseTierVersionSetRequest) Execute() (*TierVersionSet, *http.Response, error) {
	return r.ApiService.TierVersionSetApiReleaseTierVersionSetExecute(r)
}

/*
TierVersionSetApiReleaseTierVersionSet ReleaseTierVersionSet tier-version-set-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId ID of the Service
 @param productTierId The product tier ID that this version set belongs to.
 @param version The version number for the specific version set.
 @return ApiTierVersionSetApiReleaseTierVersionSetRequest
*/
func (a *TierVersionSetApiAPIService) TierVersionSetApiReleaseTierVersionSet(ctx context.Context, serviceId string, productTierId string, version string) ApiTierVersionSetApiReleaseTierVersionSetRequest {
	return ApiTierVersionSetApiReleaseTierVersionSetRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		productTierId: productTierId,
		version: version,
	}
}

// Execute executes the request
//  @return TierVersionSet
func (a *TierVersionSetApiAPIService) TierVersionSetApiReleaseTierVersionSetExecute(r ApiTierVersionSetApiReleaseTierVersionSetRequest) (*TierVersionSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TierVersionSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TierVersionSetApiAPIService.TierVersionSetApiReleaseTierVersionSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}/release"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierId"+"}", url.PathEscape(parameterValueToString(r.productTierId, "productTierId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterValueToString(r.version, "version")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.releaseTierVersionSetRequest2 == nil {
		return localVarReturnValue, nil, reportError("releaseTierVersionSetRequest2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.releaseTierVersionSetRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTierVersionSetApiUpdateTierVersionSetRequest struct {
	ctx context.Context
	ApiService TierVersionSetApiAPI
	serviceId string
	productTierId string
	version string
	updateTierVersionSetRequest2 *UpdateTierVersionSetRequest2
}

func (r ApiTierVersionSetApiUpdateTierVersionSetRequest) UpdateTierVersionSetRequest2(updateTierVersionSetRequest2 UpdateTierVersionSetRequest2) ApiTierVersionSetApiUpdateTierVersionSetRequest {
	r.updateTierVersionSetRequest2 = &updateTierVersionSetRequest2
	return r
}

func (r ApiTierVersionSetApiUpdateTierVersionSetRequest) Execute() (*TierVersionSet, *http.Response, error) {
	return r.ApiService.TierVersionSetApiUpdateTierVersionSetExecute(r)
}

/*
TierVersionSetApiUpdateTierVersionSet UpdateTierVersionSet tier-version-set-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceId ID of the Service
 @param productTierId The product tier ID that this version set belongs to.
 @param version The version number for the specific version set.
 @return ApiTierVersionSetApiUpdateTierVersionSetRequest
*/
func (a *TierVersionSetApiAPIService) TierVersionSetApiUpdateTierVersionSet(ctx context.Context, serviceId string, productTierId string, version string) ApiTierVersionSetApiUpdateTierVersionSetRequest {
	return ApiTierVersionSetApiUpdateTierVersionSetRequest{
		ApiService: a,
		ctx: ctx,
		serviceId: serviceId,
		productTierId: productTierId,
		version: version,
	}
}

// Execute executes the request
//  @return TierVersionSet
func (a *TierVersionSetApiAPIService) TierVersionSetApiUpdateTierVersionSetExecute(r ApiTierVersionSetApiUpdateTierVersionSetRequest) (*TierVersionSet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TierVersionSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TierVersionSetApiAPIService.TierVersionSetApiUpdateTierVersionSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", url.PathEscape(parameterValueToString(r.serviceId, "serviceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierId"+"}", url.PathEscape(parameterValueToString(r.productTierId, "productTierId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterValueToString(r.version, "version")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateTierVersionSetRequest2 == nil {
		return localVarReturnValue, nil, reportError("updateTierVersionSetRequest2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateTierVersionSetRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
