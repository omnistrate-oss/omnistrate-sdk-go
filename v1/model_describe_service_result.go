/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the DescribeServiceResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeServiceResult{}

// DescribeServiceResult struct for DescribeServiceResult
type DescribeServiceResult struct {
	// The time the service was created
	CreatedAt string `json:"createdAt"`
	// A brief description of the service
	Description string `json:"description"`
	// The service ID to operate on
	Id string `json:"id"`
	// Unique key of the service
	Key string `json:"key"`
	// Name of the Service
	Name string `json:"name"`
	// The role type of the caller user
	RoleType *string `json:"roleType,omitempty"`
	// List of service environments
	ServiceEnvironments []ServiceEnvironment `json:"serviceEnvironments"`
	// The logo for the service
	ServiceLogoURL *string `json:"serviceLogoURL,omitempty"`
	// The ID of the service provider owning the service
	ServiceProviderID string `json:"serviceProviderID"`
	// The name of the service provider
	ServiceProviderName string `json:"serviceProviderName"`
	AdditionalProperties map[string]interface{}
}

type _DescribeServiceResult DescribeServiceResult

// NewDescribeServiceResult instantiates a new DescribeServiceResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeServiceResult(createdAt string, description string, id string, key string, name string, serviceEnvironments []ServiceEnvironment, serviceProviderID string, serviceProviderName string) *DescribeServiceResult {
	this := DescribeServiceResult{}
	this.CreatedAt = createdAt
	this.Description = description
	this.Id = id
	this.Key = key
	this.Name = name
	this.ServiceEnvironments = serviceEnvironments
	this.ServiceProviderID = serviceProviderID
	this.ServiceProviderName = serviceProviderName
	return &this
}

// NewDescribeServiceResultWithDefaults instantiates a new DescribeServiceResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeServiceResultWithDefaults() *DescribeServiceResult {
	this := DescribeServiceResult{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *DescribeServiceResult) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DescribeServiceResult) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DescribeServiceResult) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value
func (o *DescribeServiceResult) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DescribeServiceResult) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DescribeServiceResult) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *DescribeServiceResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DescribeServiceResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DescribeServiceResult) SetId(v string) {
	o.Id = v
}

// GetKey returns the Key field value
func (o *DescribeServiceResult) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *DescribeServiceResult) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *DescribeServiceResult) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *DescribeServiceResult) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DescribeServiceResult) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DescribeServiceResult) SetName(v string) {
	o.Name = v
}

// GetRoleType returns the RoleType field value if set, zero value otherwise.
func (o *DescribeServiceResult) GetRoleType() string {
	if o == nil || IsNil(o.RoleType) {
		var ret string
		return ret
	}
	return *o.RoleType
}

// GetRoleTypeOk returns a tuple with the RoleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeServiceResult) GetRoleTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoleType) {
		return nil, false
	}
	return o.RoleType, true
}

// SetRoleType gets a reference to the given string and assigns it to the RoleType field.
func (o *DescribeServiceResult) SetRoleType(v string) {
	o.RoleType = &v
}

// GetServiceEnvironments returns the ServiceEnvironments field value
func (o *DescribeServiceResult) GetServiceEnvironments() []ServiceEnvironment {
	if o == nil {
		var ret []ServiceEnvironment
		return ret
	}

	return o.ServiceEnvironments
}

// GetServiceEnvironmentsOk returns a tuple with the ServiceEnvironments field value
// and a boolean to check if the value has been set.
func (o *DescribeServiceResult) GetServiceEnvironmentsOk() ([]ServiceEnvironment, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceEnvironments, true
}

// SetServiceEnvironments sets field value
func (o *DescribeServiceResult) SetServiceEnvironments(v []ServiceEnvironment) {
	o.ServiceEnvironments = v
}

// GetServiceLogoURL returns the ServiceLogoURL field value if set, zero value otherwise.
func (o *DescribeServiceResult) GetServiceLogoURL() string {
	if o == nil || IsNil(o.ServiceLogoURL) {
		var ret string
		return ret
	}
	return *o.ServiceLogoURL
}

// GetServiceLogoURLOk returns a tuple with the ServiceLogoURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeServiceResult) GetServiceLogoURLOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceLogoURL) {
		return nil, false
	}
	return o.ServiceLogoURL, true
}

// SetServiceLogoURL gets a reference to the given string and assigns it to the ServiceLogoURL field.
func (o *DescribeServiceResult) SetServiceLogoURL(v string) {
	o.ServiceLogoURL = &v
}

// GetServiceProviderID returns the ServiceProviderID field value
func (o *DescribeServiceResult) GetServiceProviderID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceProviderID
}

// GetServiceProviderIDOk returns a tuple with the ServiceProviderID field value
// and a boolean to check if the value has been set.
func (o *DescribeServiceResult) GetServiceProviderIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceProviderID, true
}

// SetServiceProviderID sets field value
func (o *DescribeServiceResult) SetServiceProviderID(v string) {
	o.ServiceProviderID = v
}

// GetServiceProviderName returns the ServiceProviderName field value
func (o *DescribeServiceResult) GetServiceProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceProviderName
}

// GetServiceProviderNameOk returns a tuple with the ServiceProviderName field value
// and a boolean to check if the value has been set.
func (o *DescribeServiceResult) GetServiceProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceProviderName, true
}

// SetServiceProviderName sets field value
func (o *DescribeServiceResult) SetServiceProviderName(v string) {
	o.ServiceProviderName = v
}

func (o DescribeServiceResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeServiceResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	if !IsNil(o.RoleType) {
		toSerialize["roleType"] = o.RoleType
	}
	toSerialize["serviceEnvironments"] = o.ServiceEnvironments
	if !IsNil(o.ServiceLogoURL) {
		toSerialize["serviceLogoURL"] = o.ServiceLogoURL
	}
	toSerialize["serviceProviderID"] = o.ServiceProviderID
	toSerialize["serviceProviderName"] = o.ServiceProviderName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DescribeServiceResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"description",
		"id",
		"key",
		"name",
		"serviceEnvironments",
		"serviceProviderID",
		"serviceProviderName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeServiceResult := _DescribeServiceResult{}

	err = json.Unmarshal(data, &varDescribeServiceResult)

	if err != nil {
		return err
	}

	*o = DescribeServiceResult(varDescribeServiceResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		delete(additionalProperties, "key")
		delete(additionalProperties, "name")
		delete(additionalProperties, "roleType")
		delete(additionalProperties, "serviceEnvironments")
		delete(additionalProperties, "serviceLogoURL")
		delete(additionalProperties, "serviceProviderID")
		delete(additionalProperties, "serviceProviderName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDescribeServiceResult struct {
	value *DescribeServiceResult
	isSet bool
}

func (v NullableDescribeServiceResult) Get() *DescribeServiceResult {
	return v.value
}

func (v *NullableDescribeServiceResult) Set(val *DescribeServiceResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeServiceResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeServiceResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeServiceResult(val *DescribeServiceResult) *NullableDescribeServiceResult {
	return &NullableDescribeServiceResult{value: val, isSet: true}
}

func (v NullableDescribeServiceResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeServiceResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


