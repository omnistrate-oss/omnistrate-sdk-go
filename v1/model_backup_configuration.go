/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the BackupConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupConfiguration{}

// BackupConfiguration struct for BackupConfiguration
type BackupConfiguration struct {
	// The period in hours to take backups
	BackupPeriodInHours int64 `json:"backupPeriodInHours"`
	// The number of days to retain backups
	BackupRetentionInDays int64 `json:"backupRetentionInDays"`
	AdditionalProperties map[string]interface{}
}

type _BackupConfiguration BackupConfiguration

// NewBackupConfiguration instantiates a new BackupConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupConfiguration(backupPeriodInHours int64, backupRetentionInDays int64) *BackupConfiguration {
	this := BackupConfiguration{}
	this.BackupPeriodInHours = backupPeriodInHours
	this.BackupRetentionInDays = backupRetentionInDays
	return &this
}

// NewBackupConfigurationWithDefaults instantiates a new BackupConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupConfigurationWithDefaults() *BackupConfiguration {
	this := BackupConfiguration{}
	return &this
}

// GetBackupPeriodInHours returns the BackupPeriodInHours field value
func (o *BackupConfiguration) GetBackupPeriodInHours() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BackupPeriodInHours
}

// GetBackupPeriodInHoursOk returns a tuple with the BackupPeriodInHours field value
// and a boolean to check if the value has been set.
func (o *BackupConfiguration) GetBackupPeriodInHoursOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupPeriodInHours, true
}

// SetBackupPeriodInHours sets field value
func (o *BackupConfiguration) SetBackupPeriodInHours(v int64) {
	o.BackupPeriodInHours = v
}

// GetBackupRetentionInDays returns the BackupRetentionInDays field value
func (o *BackupConfiguration) GetBackupRetentionInDays() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BackupRetentionInDays
}

// GetBackupRetentionInDaysOk returns a tuple with the BackupRetentionInDays field value
// and a boolean to check if the value has been set.
func (o *BackupConfiguration) GetBackupRetentionInDaysOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupRetentionInDays, true
}

// SetBackupRetentionInDays sets field value
func (o *BackupConfiguration) SetBackupRetentionInDays(v int64) {
	o.BackupRetentionInDays = v
}

func (o BackupConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backupPeriodInHours"] = o.BackupPeriodInHours
	toSerialize["backupRetentionInDays"] = o.BackupRetentionInDays

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BackupConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"backupPeriodInHours",
		"backupRetentionInDays",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupConfiguration := _BackupConfiguration{}

	err = json.Unmarshal(data, &varBackupConfiguration)

	if err != nil {
		return err
	}

	*o = BackupConfiguration(varBackupConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "backupPeriodInHours")
		delete(additionalProperties, "backupRetentionInDays")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBackupConfiguration struct {
	value *BackupConfiguration
	isSet bool
}

func (v NullableBackupConfiguration) Get() *BackupConfiguration {
	return v.value
}

func (v *NullableBackupConfiguration) Set(val *BackupConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupConfiguration(val *BackupConfiguration) *NullableBackupConfiguration {
	return &NullableBackupConfiguration{value: val, isSet: true}
}

func (v NullableBackupConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


