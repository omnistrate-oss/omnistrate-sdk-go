/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the JobConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobConfig{}

// JobConfig struct for JobConfig
type JobConfig struct {
	// The duration in seconds relative to the startTime that the job may be active before the system tries to terminate it
	ActiveDeadlineSeconds *int64 `json:"activeDeadlineSeconds,omitempty"`
	// The number of retries before marking the job as failed
	BackoffLimit *int32 `json:"backoffLimit,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JobConfig JobConfig

// NewJobConfig instantiates a new JobConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobConfig() *JobConfig {
	this := JobConfig{}
	var activeDeadlineSeconds int64 = 3600
	this.ActiveDeadlineSeconds = &activeDeadlineSeconds
	var backoffLimit int32 = 5
	this.BackoffLimit = &backoffLimit
	return &this
}

// NewJobConfigWithDefaults instantiates a new JobConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobConfigWithDefaults() *JobConfig {
	this := JobConfig{}
	var activeDeadlineSeconds int64 = 3600
	this.ActiveDeadlineSeconds = &activeDeadlineSeconds
	var backoffLimit int32 = 5
	this.BackoffLimit = &backoffLimit
	return &this
}

// GetActiveDeadlineSeconds returns the ActiveDeadlineSeconds field value if set, zero value otherwise.
func (o *JobConfig) GetActiveDeadlineSeconds() int64 {
	if o == nil || IsNil(o.ActiveDeadlineSeconds) {
		var ret int64
		return ret
	}
	return *o.ActiveDeadlineSeconds
}

// GetActiveDeadlineSecondsOk returns a tuple with the ActiveDeadlineSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfig) GetActiveDeadlineSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.ActiveDeadlineSeconds) {
		return nil, false
	}
	return o.ActiveDeadlineSeconds, true
}

// SetActiveDeadlineSeconds gets a reference to the given int64 and assigns it to the ActiveDeadlineSeconds field.
func (o *JobConfig) SetActiveDeadlineSeconds(v int64) {
	o.ActiveDeadlineSeconds = &v
}

// GetBackoffLimit returns the BackoffLimit field value if set, zero value otherwise.
func (o *JobConfig) GetBackoffLimit() int32 {
	if o == nil || IsNil(o.BackoffLimit) {
		var ret int32
		return ret
	}
	return *o.BackoffLimit
}

// GetBackoffLimitOk returns a tuple with the BackoffLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobConfig) GetBackoffLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.BackoffLimit) {
		return nil, false
	}
	return o.BackoffLimit, true
}

// SetBackoffLimit gets a reference to the given int32 and assigns it to the BackoffLimit field.
func (o *JobConfig) SetBackoffLimit(v int32) {
	o.BackoffLimit = &v
}

func (o JobConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActiveDeadlineSeconds) {
		toSerialize["activeDeadlineSeconds"] = o.ActiveDeadlineSeconds
	}
	if !IsNil(o.BackoffLimit) {
		toSerialize["backoffLimit"] = o.BackoffLimit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobConfig) UnmarshalJSON(data []byte) (err error) {
	varJobConfig := _JobConfig{}

	err = json.Unmarshal(data, &varJobConfig)

	if err != nil {
		return err
	}

	*o = JobConfig(varJobConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "activeDeadlineSeconds")
		delete(additionalProperties, "backoffLimit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobConfig struct {
	value *JobConfig
	isSet bool
}

func (v NullableJobConfig) Get() *JobConfig {
	return v.value
}

func (v *NullableJobConfig) Set(val *JobConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableJobConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableJobConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobConfig(val *JobConfig) *NullableJobConfig {
	return &NullableJobConfig{value: val, isSet: true}
}

func (v NullableJobConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


