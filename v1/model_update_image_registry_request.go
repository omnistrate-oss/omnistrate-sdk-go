/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateImageRegistryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateImageRegistryRequest{}

// UpdateImageRegistryRequest Update an HTTP API v2 Docker Image Registry
type UpdateImageRegistryRequest struct {
	// A brief description of the Image Registry
	Description *string `json:"description,omitempty"`
	// The Image Registry host
	Host *string `json:"host,omitempty"`
	// ID of an Image Registry
	Id string `json:"id"`
	// Name of the Image Registry
	Name *string `json:"name,omitempty"`
	// The password to use when authenticating to the Image Registry
	Password *string `json:"password,omitempty"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	// The username to use when authenticating to the Image Registry
	Username *string `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateImageRegistryRequest UpdateImageRegistryRequest

// NewUpdateImageRegistryRequest instantiates a new UpdateImageRegistryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateImageRegistryRequest(id string, token string) *UpdateImageRegistryRequest {
	this := UpdateImageRegistryRequest{}
	this.Id = id
	this.Token = token
	return &this
}

// NewUpdateImageRegistryRequestWithDefaults instantiates a new UpdateImageRegistryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateImageRegistryRequestWithDefaults() *UpdateImageRegistryRequest {
	this := UpdateImageRegistryRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateImageRegistryRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateImageRegistryRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateImageRegistryRequest) SetDescription(v string) {
	o.Description = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *UpdateImageRegistryRequest) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateImageRegistryRequest) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *UpdateImageRegistryRequest) SetHost(v string) {
	o.Host = &v
}

// GetId returns the Id field value
func (o *UpdateImageRegistryRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateImageRegistryRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateImageRegistryRequest) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateImageRegistryRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateImageRegistryRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateImageRegistryRequest) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UpdateImageRegistryRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateImageRegistryRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UpdateImageRegistryRequest) SetPassword(v string) {
	o.Password = &v
}

// GetToken returns the Token field value
func (o *UpdateImageRegistryRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *UpdateImageRegistryRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *UpdateImageRegistryRequest) SetToken(v string) {
	o.Token = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UpdateImageRegistryRequest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateImageRegistryRequest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UpdateImageRegistryRequest) SetUsername(v string) {
	o.Username = &v
}

func (o UpdateImageRegistryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateImageRegistryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	toSerialize["token"] = o.Token
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateImageRegistryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateImageRegistryRequest := _UpdateImageRegistryRequest{}

	err = json.Unmarshal(data, &varUpdateImageRegistryRequest)

	if err != nil {
		return err
	}

	*o = UpdateImageRegistryRequest(varUpdateImageRegistryRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "host")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "password")
		delete(additionalProperties, "token")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateImageRegistryRequest struct {
	value *UpdateImageRegistryRequest
	isSet bool
}

func (v NullableUpdateImageRegistryRequest) Get() *UpdateImageRegistryRequest {
	return v.value
}

func (v *NullableUpdateImageRegistryRequest) Set(val *UpdateImageRegistryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateImageRegistryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateImageRegistryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateImageRegistryRequest(val *UpdateImageRegistryRequest) *NullableUpdateImageRegistryRequest {
	return &NullableUpdateImageRegistryRequest{value: val, isSet: true}
}

func (v NullableUpdateImageRegistryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateImageRegistryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

