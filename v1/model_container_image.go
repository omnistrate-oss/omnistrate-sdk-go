/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the ContainerImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerImage{}

// ContainerImage struct for ContainerImage
type ContainerImage struct {
	// The name of the container image
	ImageName string `json:"imageName"`
	// The tag of the container image
	ImageTag string `json:"imageTag"`
	AdditionalProperties map[string]interface{}
}

type _ContainerImage ContainerImage

// NewContainerImage instantiates a new ContainerImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerImage(imageName string, imageTag string) *ContainerImage {
	this := ContainerImage{}
	this.ImageName = imageName
	this.ImageTag = imageTag
	return &this
}

// NewContainerImageWithDefaults instantiates a new ContainerImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerImageWithDefaults() *ContainerImage {
	this := ContainerImage{}
	return &this
}

// GetImageName returns the ImageName field value
func (o *ContainerImage) GetImageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value
// and a boolean to check if the value has been set.
func (o *ContainerImage) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageName, true
}

// SetImageName sets field value
func (o *ContainerImage) SetImageName(v string) {
	o.ImageName = v
}

// GetImageTag returns the ImageTag field value
func (o *ContainerImage) GetImageTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageTag
}

// GetImageTagOk returns a tuple with the ImageTag field value
// and a boolean to check if the value has been set.
func (o *ContainerImage) GetImageTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageTag, true
}

// SetImageTag sets field value
func (o *ContainerImage) SetImageTag(v string) {
	o.ImageTag = v
}

func (o ContainerImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["imageName"] = o.ImageName
	toSerialize["imageTag"] = o.ImageTag

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContainerImage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageName",
		"imageTag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainerImage := _ContainerImage{}

	err = json.Unmarshal(data, &varContainerImage)

	if err != nil {
		return err
	}

	*o = ContainerImage(varContainerImage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "imageName")
		delete(additionalProperties, "imageTag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContainerImage struct {
	value *ContainerImage
	isSet bool
}

func (v NullableContainerImage) Get() *ContainerImage {
	return v.value
}

func (v *NullableContainerImage) Set(val *ContainerImage) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerImage) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerImage(val *ContainerImage) *NullableContainerImage {
	return &NullableContainerImage{value: val, isSet: true}
}

func (v NullableContainerImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

