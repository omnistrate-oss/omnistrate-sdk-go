/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the ActionHook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionHook{}

// ActionHook struct for ActionHook
type ActionHook struct {
	// The Base64 encoded command template to execute
	CommandTemplate string `json:"commandTemplate"`
	// The custom command to execute the hook with
	CustomCommand []string `json:"customCommand,omitempty"`
	// The custom image to execute the hook
	CustomImage *string `json:"customImage,omitempty"`
	// The scope of the hook
	Scope string `json:"scope"`
	// The type of hook to execute
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _ActionHook ActionHook

// NewActionHook instantiates a new ActionHook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionHook(commandTemplate string, scope string, type_ string) *ActionHook {
	this := ActionHook{}
	this.CommandTemplate = commandTemplate
	this.Scope = scope
	this.Type = type_
	return &this
}

// NewActionHookWithDefaults instantiates a new ActionHook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionHookWithDefaults() *ActionHook {
	this := ActionHook{}
	return &this
}

// GetCommandTemplate returns the CommandTemplate field value
func (o *ActionHook) GetCommandTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommandTemplate
}

// GetCommandTemplateOk returns a tuple with the CommandTemplate field value
// and a boolean to check if the value has been set.
func (o *ActionHook) GetCommandTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandTemplate, true
}

// SetCommandTemplate sets field value
func (o *ActionHook) SetCommandTemplate(v string) {
	o.CommandTemplate = v
}

// GetCustomCommand returns the CustomCommand field value if set, zero value otherwise.
func (o *ActionHook) GetCustomCommand() []string {
	if o == nil || IsNil(o.CustomCommand) {
		var ret []string
		return ret
	}
	return o.CustomCommand
}

// GetCustomCommandOk returns a tuple with the CustomCommand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionHook) GetCustomCommandOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomCommand) {
		return nil, false
	}
	return o.CustomCommand, true
}

// SetCustomCommand gets a reference to the given []string and assigns it to the CustomCommand field.
func (o *ActionHook) SetCustomCommand(v []string) {
	o.CustomCommand = v
}

// GetCustomImage returns the CustomImage field value if set, zero value otherwise.
func (o *ActionHook) GetCustomImage() string {
	if o == nil || IsNil(o.CustomImage) {
		var ret string
		return ret
	}
	return *o.CustomImage
}

// GetCustomImageOk returns a tuple with the CustomImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionHook) GetCustomImageOk() (*string, bool) {
	if o == nil || IsNil(o.CustomImage) {
		return nil, false
	}
	return o.CustomImage, true
}

// SetCustomImage gets a reference to the given string and assigns it to the CustomImage field.
func (o *ActionHook) SetCustomImage(v string) {
	o.CustomImage = &v
}

// GetScope returns the Scope field value
func (o *ActionHook) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *ActionHook) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *ActionHook) SetScope(v string) {
	o.Scope = v
}

// GetType returns the Type field value
func (o *ActionHook) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ActionHook) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ActionHook) SetType(v string) {
	o.Type = v
}

func (o ActionHook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionHook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commandTemplate"] = o.CommandTemplate
	if !IsNil(o.CustomCommand) {
		toSerialize["customCommand"] = o.CustomCommand
	}
	if !IsNil(o.CustomImage) {
		toSerialize["customImage"] = o.CustomImage
	}
	toSerialize["scope"] = o.Scope
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ActionHook) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"commandTemplate",
		"scope",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActionHook := _ActionHook{}

	err = json.Unmarshal(data, &varActionHook)

	if err != nil {
		return err
	}

	*o = ActionHook(varActionHook)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "commandTemplate")
		delete(additionalProperties, "customCommand")
		delete(additionalProperties, "customImage")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableActionHook struct {
	value *ActionHook
	isSet bool
}

func (v NullableActionHook) Get() *ActionHook {
	return v.value
}

func (v *NullableActionHook) Set(val *ActionHook) {
	v.value = val
	v.isSet = true
}

func (v NullableActionHook) IsSet() bool {
	return v.isSet
}

func (v *NullableActionHook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionHook(val *ActionHook) *NullableActionHook {
	return &NullableActionHook{value: val, isSet: true}
}

func (v NullableActionHook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionHook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

