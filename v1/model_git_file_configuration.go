/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the GitFileConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitFileConfiguration{}

// GitFileConfiguration struct for GitFileConfiguration
type GitFileConfiguration struct {
	// The access token
	AccessToken *string `json:"accessToken,omitempty"`
	// The commit SHA to checkout
	CommitSHA *string `json:"commitSHA,omitempty"`
	// The relative file path from repository root
	Path string `json:"path"`
	// The reference name of the repository
	ReferenceName string `json:"referenceName"`
	// The URL of the repository
	RepositoryUrl string `json:"repositoryUrl"`
	// The name of github user
	UserName *string `json:"userName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GitFileConfiguration GitFileConfiguration

// NewGitFileConfiguration instantiates a new GitFileConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitFileConfiguration(path string, referenceName string, repositoryUrl string) *GitFileConfiguration {
	this := GitFileConfiguration{}
	this.Path = path
	this.ReferenceName = referenceName
	this.RepositoryUrl = repositoryUrl
	return &this
}

// NewGitFileConfigurationWithDefaults instantiates a new GitFileConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitFileConfigurationWithDefaults() *GitFileConfiguration {
	this := GitFileConfiguration{}
	return &this
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *GitFileConfiguration) GetAccessToken() string {
	if o == nil || IsNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitFileConfiguration) GetAccessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *GitFileConfiguration) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetCommitSHA returns the CommitSHA field value if set, zero value otherwise.
func (o *GitFileConfiguration) GetCommitSHA() string {
	if o == nil || IsNil(o.CommitSHA) {
		var ret string
		return ret
	}
	return *o.CommitSHA
}

// GetCommitSHAOk returns a tuple with the CommitSHA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitFileConfiguration) GetCommitSHAOk() (*string, bool) {
	if o == nil || IsNil(o.CommitSHA) {
		return nil, false
	}
	return o.CommitSHA, true
}

// SetCommitSHA gets a reference to the given string and assigns it to the CommitSHA field.
func (o *GitFileConfiguration) SetCommitSHA(v string) {
	o.CommitSHA = &v
}

// GetPath returns the Path field value
func (o *GitFileConfiguration) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *GitFileConfiguration) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *GitFileConfiguration) SetPath(v string) {
	o.Path = v
}

// GetReferenceName returns the ReferenceName field value
func (o *GitFileConfiguration) GetReferenceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceName
}

// GetReferenceNameOk returns a tuple with the ReferenceName field value
// and a boolean to check if the value has been set.
func (o *GitFileConfiguration) GetReferenceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceName, true
}

// SetReferenceName sets field value
func (o *GitFileConfiguration) SetReferenceName(v string) {
	o.ReferenceName = v
}

// GetRepositoryUrl returns the RepositoryUrl field value
func (o *GitFileConfiguration) GetRepositoryUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositoryUrl
}

// GetRepositoryUrlOk returns a tuple with the RepositoryUrl field value
// and a boolean to check if the value has been set.
func (o *GitFileConfiguration) GetRepositoryUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoryUrl, true
}

// SetRepositoryUrl sets field value
func (o *GitFileConfiguration) SetRepositoryUrl(v string) {
	o.RepositoryUrl = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *GitFileConfiguration) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitFileConfiguration) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *GitFileConfiguration) SetUserName(v string) {
	o.UserName = &v
}

func (o GitFileConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitFileConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessToken) {
		toSerialize["accessToken"] = o.AccessToken
	}
	if !IsNil(o.CommitSHA) {
		toSerialize["commitSHA"] = o.CommitSHA
	}
	toSerialize["path"] = o.Path
	toSerialize["referenceName"] = o.ReferenceName
	toSerialize["repositoryUrl"] = o.RepositoryUrl
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GitFileConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
		"referenceName",
		"repositoryUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitFileConfiguration := _GitFileConfiguration{}

	err = json.Unmarshal(data, &varGitFileConfiguration)

	if err != nil {
		return err
	}

	*o = GitFileConfiguration(varGitFileConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accessToken")
		delete(additionalProperties, "commitSHA")
		delete(additionalProperties, "path")
		delete(additionalProperties, "referenceName")
		delete(additionalProperties, "repositoryUrl")
		delete(additionalProperties, "userName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGitFileConfiguration struct {
	value *GitFileConfiguration
	isSet bool
}

func (v NullableGitFileConfiguration) Get() *GitFileConfiguration {
	return v.value
}

func (v *NullableGitFileConfiguration) Set(val *GitFileConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableGitFileConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableGitFileConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitFileConfiguration(val *GitFileConfiguration) *NullableGitFileConfiguration {
	return &NullableGitFileConfiguration{value: val, isSet: true}
}

func (v NullableGitFileConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitFileConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


