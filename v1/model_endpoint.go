/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the Endpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Endpoint{}

// Endpoint struct for Endpoint
type Endpoint struct {
	// The host of the endpoint
	Host *string `json:"host,omitempty"`
	// The networking type of the endpoint
	NetworkingType *string `json:"networkingType,omitempty"`
	// The ports of the endpoint
	Ports []int64 `json:"ports,omitempty"`
	// Whether this is the primary endpoint to highlight
	Primary *bool `json:"primary,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Endpoint Endpoint

// NewEndpoint instantiates a new Endpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpoint() *Endpoint {
	this := Endpoint{}
	var host string = ""
	this.Host = &host
	var networkingType string = "PUBLIC"
	this.NetworkingType = &networkingType
	var primary bool = false
	this.Primary = &primary
	return &this
}

// NewEndpointWithDefaults instantiates a new Endpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointWithDefaults() *Endpoint {
	this := Endpoint{}
	var host string = ""
	this.Host = &host
	var networkingType string = "PUBLIC"
	this.NetworkingType = &networkingType
	var primary bool = false
	this.Primary = &primary
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *Endpoint) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Endpoint) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *Endpoint) SetHost(v string) {
	o.Host = &v
}

// GetNetworkingType returns the NetworkingType field value if set, zero value otherwise.
func (o *Endpoint) GetNetworkingType() string {
	if o == nil || IsNil(o.NetworkingType) {
		var ret string
		return ret
	}
	return *o.NetworkingType
}

// GetNetworkingTypeOk returns a tuple with the NetworkingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Endpoint) GetNetworkingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkingType) {
		return nil, false
	}
	return o.NetworkingType, true
}

// SetNetworkingType gets a reference to the given string and assigns it to the NetworkingType field.
func (o *Endpoint) SetNetworkingType(v string) {
	o.NetworkingType = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *Endpoint) GetPorts() []int64 {
	if o == nil || IsNil(o.Ports) {
		var ret []int64
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Endpoint) GetPortsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// SetPorts gets a reference to the given []int64 and assigns it to the Ports field.
func (o *Endpoint) SetPorts(v []int64) {
	o.Ports = v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *Endpoint) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Endpoint) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *Endpoint) SetPrimary(v bool) {
	o.Primary = &v
}

func (o Endpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Endpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.NetworkingType) {
		toSerialize["networkingType"] = o.NetworkingType
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Endpoint) UnmarshalJSON(data []byte) (err error) {
	varEndpoint := _Endpoint{}

	err = json.Unmarshal(data, &varEndpoint)

	if err != nil {
		return err
	}

	*o = Endpoint(varEndpoint)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "host")
		delete(additionalProperties, "networkingType")
		delete(additionalProperties, "ports")
		delete(additionalProperties, "primary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEndpoint struct {
	value *Endpoint
	isSet bool
}

func (v NullableEndpoint) Get() *Endpoint {
	return v.value
}

func (v *NullableEndpoint) Set(val *Endpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpoint(val *Endpoint) *NullableEndpoint {
	return &NullableEndpoint{value: val, isSet: true}
}

func (v NullableEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


