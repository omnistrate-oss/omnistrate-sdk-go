/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the AgentEvaluation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgentEvaluation{}

// AgentEvaluation struct for AgentEvaluation
type AgentEvaluation struct {
	// Metrics to evaluate
	Metrics []string `json:"metrics"`
	// Name of the evaluation
	Name string `json:"name"`
	// Evaluation schedule
	Schedule string `json:"schedule"`
	AdditionalProperties map[string]interface{}
}

type _AgentEvaluation AgentEvaluation

// NewAgentEvaluation instantiates a new AgentEvaluation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentEvaluation(metrics []string, name string, schedule string) *AgentEvaluation {
	this := AgentEvaluation{}
	this.Metrics = metrics
	this.Name = name
	this.Schedule = schedule
	return &this
}

// NewAgentEvaluationWithDefaults instantiates a new AgentEvaluation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentEvaluationWithDefaults() *AgentEvaluation {
	this := AgentEvaluation{}
	return &this
}

// GetMetrics returns the Metrics field value
func (o *AgentEvaluation) GetMetrics() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value
// and a boolean to check if the value has been set.
func (o *AgentEvaluation) GetMetricsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metrics, true
}

// SetMetrics sets field value
func (o *AgentEvaluation) SetMetrics(v []string) {
	o.Metrics = v
}

// GetName returns the Name field value
func (o *AgentEvaluation) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AgentEvaluation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AgentEvaluation) SetName(v string) {
	o.Name = v
}

// GetSchedule returns the Schedule field value
func (o *AgentEvaluation) GetSchedule() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *AgentEvaluation) GetScheduleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *AgentEvaluation) SetSchedule(v string) {
	o.Schedule = v
}

func (o AgentEvaluation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgentEvaluation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metrics"] = o.Metrics
	toSerialize["name"] = o.Name
	toSerialize["schedule"] = o.Schedule

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AgentEvaluation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metrics",
		"name",
		"schedule",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgentEvaluation := _AgentEvaluation{}

	err = json.Unmarshal(data, &varAgentEvaluation)

	if err != nil {
		return err
	}

	*o = AgentEvaluation(varAgentEvaluation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "metrics")
		delete(additionalProperties, "name")
		delete(additionalProperties, "schedule")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAgentEvaluation struct {
	value *AgentEvaluation
	isSet bool
}

func (v NullableAgentEvaluation) Get() *AgentEvaluation {
	return v.value
}

func (v *NullableAgentEvaluation) Set(val *AgentEvaluation) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentEvaluation) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentEvaluation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentEvaluation(val *AgentEvaluation) *NullableAgentEvaluation {
	return &NullableAgentEvaluation{value: val, isSet: true}
}

func (v NullableAgentEvaluation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentEvaluation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


