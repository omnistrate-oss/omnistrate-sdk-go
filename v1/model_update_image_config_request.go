/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateImageConfigRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateImageConfigRequest{}

// UpdateImageConfigRequest Update the image configuration for an existing entity
type UpdateImageConfigRequest struct {
	CustomImageCommandsAndArgs *CustomImageCommandsAndArgs `json:"customImageCommandsAndArgs,omitempty"`
	// A brief description of the image configuration
	Description *string `json:"description,omitempty"`
	// ID of an Image Config
	Id string `json:"id"`
	// Name of the container image
	ImageName *string `json:"imageName,omitempty"`
	// ID of an Image Registry
	ImageRegistryId *string `json:"imageRegistryId,omitempty"`
	// PEM-encoded Public key part of the key used to sign the container image
	ImageSignaturePublicKeyPEM *string `json:"imageSignaturePublicKeyPEM,omitempty"`
	// Tag representing the software image version that is currently preferred
	ImageTag *string `json:"imageTag,omitempty"`
	// ID of a Service
	ServiceId string `json:"serviceId"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _UpdateImageConfigRequest UpdateImageConfigRequest

// NewUpdateImageConfigRequest instantiates a new UpdateImageConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateImageConfigRequest(id string, serviceId string, token string) *UpdateImageConfigRequest {
	this := UpdateImageConfigRequest{}
	this.Id = id
	this.ServiceId = serviceId
	this.Token = token
	return &this
}

// NewUpdateImageConfigRequestWithDefaults instantiates a new UpdateImageConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateImageConfigRequestWithDefaults() *UpdateImageConfigRequest {
	this := UpdateImageConfigRequest{}
	return &this
}

// GetCustomImageCommandsAndArgs returns the CustomImageCommandsAndArgs field value if set, zero value otherwise.
func (o *UpdateImageConfigRequest) GetCustomImageCommandsAndArgs() CustomImageCommandsAndArgs {
	if o == nil || IsNil(o.CustomImageCommandsAndArgs) {
		var ret CustomImageCommandsAndArgs
		return ret
	}
	return *o.CustomImageCommandsAndArgs
}

// GetCustomImageCommandsAndArgsOk returns a tuple with the CustomImageCommandsAndArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateImageConfigRequest) GetCustomImageCommandsAndArgsOk() (*CustomImageCommandsAndArgs, bool) {
	if o == nil || IsNil(o.CustomImageCommandsAndArgs) {
		return nil, false
	}
	return o.CustomImageCommandsAndArgs, true
}

// SetCustomImageCommandsAndArgs gets a reference to the given CustomImageCommandsAndArgs and assigns it to the CustomImageCommandsAndArgs field.
func (o *UpdateImageConfigRequest) SetCustomImageCommandsAndArgs(v CustomImageCommandsAndArgs) {
	o.CustomImageCommandsAndArgs = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateImageConfigRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateImageConfigRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateImageConfigRequest) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value
func (o *UpdateImageConfigRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateImageConfigRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateImageConfigRequest) SetId(v string) {
	o.Id = v
}

// GetImageName returns the ImageName field value if set, zero value otherwise.
func (o *UpdateImageConfigRequest) GetImageName() string {
	if o == nil || IsNil(o.ImageName) {
		var ret string
		return ret
	}
	return *o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateImageConfigRequest) GetImageNameOk() (*string, bool) {
	if o == nil || IsNil(o.ImageName) {
		return nil, false
	}
	return o.ImageName, true
}

// SetImageName gets a reference to the given string and assigns it to the ImageName field.
func (o *UpdateImageConfigRequest) SetImageName(v string) {
	o.ImageName = &v
}

// GetImageRegistryId returns the ImageRegistryId field value if set, zero value otherwise.
func (o *UpdateImageConfigRequest) GetImageRegistryId() string {
	if o == nil || IsNil(o.ImageRegistryId) {
		var ret string
		return ret
	}
	return *o.ImageRegistryId
}

// GetImageRegistryIdOk returns a tuple with the ImageRegistryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateImageConfigRequest) GetImageRegistryIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImageRegistryId) {
		return nil, false
	}
	return o.ImageRegistryId, true
}

// SetImageRegistryId gets a reference to the given string and assigns it to the ImageRegistryId field.
func (o *UpdateImageConfigRequest) SetImageRegistryId(v string) {
	o.ImageRegistryId = &v
}

// GetImageSignaturePublicKeyPEM returns the ImageSignaturePublicKeyPEM field value if set, zero value otherwise.
func (o *UpdateImageConfigRequest) GetImageSignaturePublicKeyPEM() string {
	if o == nil || IsNil(o.ImageSignaturePublicKeyPEM) {
		var ret string
		return ret
	}
	return *o.ImageSignaturePublicKeyPEM
}

// GetImageSignaturePublicKeyPEMOk returns a tuple with the ImageSignaturePublicKeyPEM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateImageConfigRequest) GetImageSignaturePublicKeyPEMOk() (*string, bool) {
	if o == nil || IsNil(o.ImageSignaturePublicKeyPEM) {
		return nil, false
	}
	return o.ImageSignaturePublicKeyPEM, true
}

// SetImageSignaturePublicKeyPEM gets a reference to the given string and assigns it to the ImageSignaturePublicKeyPEM field.
func (o *UpdateImageConfigRequest) SetImageSignaturePublicKeyPEM(v string) {
	o.ImageSignaturePublicKeyPEM = &v
}

// GetImageTag returns the ImageTag field value if set, zero value otherwise.
func (o *UpdateImageConfigRequest) GetImageTag() string {
	if o == nil || IsNil(o.ImageTag) {
		var ret string
		return ret
	}
	return *o.ImageTag
}

// GetImageTagOk returns a tuple with the ImageTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateImageConfigRequest) GetImageTagOk() (*string, bool) {
	if o == nil || IsNil(o.ImageTag) {
		return nil, false
	}
	return o.ImageTag, true
}

// SetImageTag gets a reference to the given string and assigns it to the ImageTag field.
func (o *UpdateImageConfigRequest) SetImageTag(v string) {
	o.ImageTag = &v
}

// GetServiceId returns the ServiceId field value
func (o *UpdateImageConfigRequest) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *UpdateImageConfigRequest) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *UpdateImageConfigRequest) SetServiceId(v string) {
	o.ServiceId = v
}

// GetToken returns the Token field value
func (o *UpdateImageConfigRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *UpdateImageConfigRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *UpdateImageConfigRequest) SetToken(v string) {
	o.Token = v
}

func (o UpdateImageConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateImageConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomImageCommandsAndArgs) {
		toSerialize["customImageCommandsAndArgs"] = o.CustomImageCommandsAndArgs
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.ImageName) {
		toSerialize["imageName"] = o.ImageName
	}
	if !IsNil(o.ImageRegistryId) {
		toSerialize["imageRegistryId"] = o.ImageRegistryId
	}
	if !IsNil(o.ImageSignaturePublicKeyPEM) {
		toSerialize["imageSignaturePublicKeyPEM"] = o.ImageSignaturePublicKeyPEM
	}
	if !IsNil(o.ImageTag) {
		toSerialize["imageTag"] = o.ImageTag
	}
	toSerialize["serviceId"] = o.ServiceId
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateImageConfigRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"serviceId",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateImageConfigRequest := _UpdateImageConfigRequest{}

	err = json.Unmarshal(data, &varUpdateImageConfigRequest)

	if err != nil {
		return err
	}

	*o = UpdateImageConfigRequest(varUpdateImageConfigRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "customImageCommandsAndArgs")
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		delete(additionalProperties, "imageName")
		delete(additionalProperties, "imageRegistryId")
		delete(additionalProperties, "imageSignaturePublicKeyPEM")
		delete(additionalProperties, "imageTag")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateImageConfigRequest struct {
	value *UpdateImageConfigRequest
	isSet bool
}

func (v NullableUpdateImageConfigRequest) Get() *UpdateImageConfigRequest {
	return v.value
}

func (v *NullableUpdateImageConfigRequest) Set(val *UpdateImageConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateImageConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateImageConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateImageConfigRequest(val *UpdateImageConfigRequest) *NullableUpdateImageConfigRequest {
	return &NullableUpdateImageConfigRequest{value: val, isSet: true}
}

func (v NullableUpdateImageConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateImageConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

