/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the HelmRuntimeConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmRuntimeConfiguration{}

// HelmRuntimeConfiguration struct for HelmRuntimeConfiguration
type HelmRuntimeConfiguration struct {
	// Disable Helm hooks
	DisableHooks *bool `json:"disableHooks,omitempty"`
	// Flag to disable drift reconciliation for the Helm package
	DisableReconciliation *bool `json:"disableReconciliation,omitempty"`
	// Recreate the Helm package if it already exists
	Recreate *bool `json:"recreate,omitempty"`
	// Reset then reuse values for the Helm package before applying
	ResetThenReuseValues *bool `json:"resetThenReuseValues,omitempty"`
	// Reset values for the Helm package before applying
	ResetValues *bool `json:"resetValues,omitempty"`
	// Reuse values for the Helm package before applying
	ReuseValues *bool `json:"reuseValues,omitempty"`
	// Skip CRDs for the Helm package
	SkipCRDs *bool `json:"skipCRDs,omitempty"`
	// Timeout (nanos) for the Helm package to be deployed
	TimeoutNanos *int64 `json:"timeoutNanos,omitempty"`
	// Upgrade CRDs for the Helm package
	UpgradeCRDs *bool `json:"upgradeCRDs,omitempty"`
	// Wait for the Helm package to be deployed
	Wait *bool `json:"wait,omitempty"`
	// Wait for all jobs to be completed
	WaitForJobs *bool `json:"waitForJobs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HelmRuntimeConfiguration HelmRuntimeConfiguration

// NewHelmRuntimeConfiguration instantiates a new HelmRuntimeConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmRuntimeConfiguration() *HelmRuntimeConfiguration {
	this := HelmRuntimeConfiguration{}
	return &this
}

// NewHelmRuntimeConfigurationWithDefaults instantiates a new HelmRuntimeConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmRuntimeConfigurationWithDefaults() *HelmRuntimeConfiguration {
	this := HelmRuntimeConfiguration{}
	return &this
}

// GetDisableHooks returns the DisableHooks field value if set, zero value otherwise.
func (o *HelmRuntimeConfiguration) GetDisableHooks() bool {
	if o == nil || IsNil(o.DisableHooks) {
		var ret bool
		return ret
	}
	return *o.DisableHooks
}

// GetDisableHooksOk returns a tuple with the DisableHooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRuntimeConfiguration) GetDisableHooksOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableHooks) {
		return nil, false
	}
	return o.DisableHooks, true
}

// SetDisableHooks gets a reference to the given bool and assigns it to the DisableHooks field.
func (o *HelmRuntimeConfiguration) SetDisableHooks(v bool) {
	o.DisableHooks = &v
}

// GetDisableReconciliation returns the DisableReconciliation field value if set, zero value otherwise.
func (o *HelmRuntimeConfiguration) GetDisableReconciliation() bool {
	if o == nil || IsNil(o.DisableReconciliation) {
		var ret bool
		return ret
	}
	return *o.DisableReconciliation
}

// GetDisableReconciliationOk returns a tuple with the DisableReconciliation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRuntimeConfiguration) GetDisableReconciliationOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableReconciliation) {
		return nil, false
	}
	return o.DisableReconciliation, true
}

// SetDisableReconciliation gets a reference to the given bool and assigns it to the DisableReconciliation field.
func (o *HelmRuntimeConfiguration) SetDisableReconciliation(v bool) {
	o.DisableReconciliation = &v
}

// GetRecreate returns the Recreate field value if set, zero value otherwise.
func (o *HelmRuntimeConfiguration) GetRecreate() bool {
	if o == nil || IsNil(o.Recreate) {
		var ret bool
		return ret
	}
	return *o.Recreate
}

// GetRecreateOk returns a tuple with the Recreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRuntimeConfiguration) GetRecreateOk() (*bool, bool) {
	if o == nil || IsNil(o.Recreate) {
		return nil, false
	}
	return o.Recreate, true
}

// SetRecreate gets a reference to the given bool and assigns it to the Recreate field.
func (o *HelmRuntimeConfiguration) SetRecreate(v bool) {
	o.Recreate = &v
}

// GetResetThenReuseValues returns the ResetThenReuseValues field value if set, zero value otherwise.
func (o *HelmRuntimeConfiguration) GetResetThenReuseValues() bool {
	if o == nil || IsNil(o.ResetThenReuseValues) {
		var ret bool
		return ret
	}
	return *o.ResetThenReuseValues
}

// GetResetThenReuseValuesOk returns a tuple with the ResetThenReuseValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRuntimeConfiguration) GetResetThenReuseValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.ResetThenReuseValues) {
		return nil, false
	}
	return o.ResetThenReuseValues, true
}

// SetResetThenReuseValues gets a reference to the given bool and assigns it to the ResetThenReuseValues field.
func (o *HelmRuntimeConfiguration) SetResetThenReuseValues(v bool) {
	o.ResetThenReuseValues = &v
}

// GetResetValues returns the ResetValues field value if set, zero value otherwise.
func (o *HelmRuntimeConfiguration) GetResetValues() bool {
	if o == nil || IsNil(o.ResetValues) {
		var ret bool
		return ret
	}
	return *o.ResetValues
}

// GetResetValuesOk returns a tuple with the ResetValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRuntimeConfiguration) GetResetValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.ResetValues) {
		return nil, false
	}
	return o.ResetValues, true
}

// SetResetValues gets a reference to the given bool and assigns it to the ResetValues field.
func (o *HelmRuntimeConfiguration) SetResetValues(v bool) {
	o.ResetValues = &v
}

// GetReuseValues returns the ReuseValues field value if set, zero value otherwise.
func (o *HelmRuntimeConfiguration) GetReuseValues() bool {
	if o == nil || IsNil(o.ReuseValues) {
		var ret bool
		return ret
	}
	return *o.ReuseValues
}

// GetReuseValuesOk returns a tuple with the ReuseValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRuntimeConfiguration) GetReuseValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.ReuseValues) {
		return nil, false
	}
	return o.ReuseValues, true
}

// SetReuseValues gets a reference to the given bool and assigns it to the ReuseValues field.
func (o *HelmRuntimeConfiguration) SetReuseValues(v bool) {
	o.ReuseValues = &v
}

// GetSkipCRDs returns the SkipCRDs field value if set, zero value otherwise.
func (o *HelmRuntimeConfiguration) GetSkipCRDs() bool {
	if o == nil || IsNil(o.SkipCRDs) {
		var ret bool
		return ret
	}
	return *o.SkipCRDs
}

// GetSkipCRDsOk returns a tuple with the SkipCRDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRuntimeConfiguration) GetSkipCRDsOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipCRDs) {
		return nil, false
	}
	return o.SkipCRDs, true
}

// SetSkipCRDs gets a reference to the given bool and assigns it to the SkipCRDs field.
func (o *HelmRuntimeConfiguration) SetSkipCRDs(v bool) {
	o.SkipCRDs = &v
}

// GetTimeoutNanos returns the TimeoutNanos field value if set, zero value otherwise.
func (o *HelmRuntimeConfiguration) GetTimeoutNanos() int64 {
	if o == nil || IsNil(o.TimeoutNanos) {
		var ret int64
		return ret
	}
	return *o.TimeoutNanos
}

// GetTimeoutNanosOk returns a tuple with the TimeoutNanos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRuntimeConfiguration) GetTimeoutNanosOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeoutNanos) {
		return nil, false
	}
	return o.TimeoutNanos, true
}

// SetTimeoutNanos gets a reference to the given int64 and assigns it to the TimeoutNanos field.
func (o *HelmRuntimeConfiguration) SetTimeoutNanos(v int64) {
	o.TimeoutNanos = &v
}

// GetUpgradeCRDs returns the UpgradeCRDs field value if set, zero value otherwise.
func (o *HelmRuntimeConfiguration) GetUpgradeCRDs() bool {
	if o == nil || IsNil(o.UpgradeCRDs) {
		var ret bool
		return ret
	}
	return *o.UpgradeCRDs
}

// GetUpgradeCRDsOk returns a tuple with the UpgradeCRDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRuntimeConfiguration) GetUpgradeCRDsOk() (*bool, bool) {
	if o == nil || IsNil(o.UpgradeCRDs) {
		return nil, false
	}
	return o.UpgradeCRDs, true
}

// SetUpgradeCRDs gets a reference to the given bool and assigns it to the UpgradeCRDs field.
func (o *HelmRuntimeConfiguration) SetUpgradeCRDs(v bool) {
	o.UpgradeCRDs = &v
}

// GetWait returns the Wait field value if set, zero value otherwise.
func (o *HelmRuntimeConfiguration) GetWait() bool {
	if o == nil || IsNil(o.Wait) {
		var ret bool
		return ret
	}
	return *o.Wait
}

// GetWaitOk returns a tuple with the Wait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRuntimeConfiguration) GetWaitOk() (*bool, bool) {
	if o == nil || IsNil(o.Wait) {
		return nil, false
	}
	return o.Wait, true
}

// SetWait gets a reference to the given bool and assigns it to the Wait field.
func (o *HelmRuntimeConfiguration) SetWait(v bool) {
	o.Wait = &v
}

// GetWaitForJobs returns the WaitForJobs field value if set, zero value otherwise.
func (o *HelmRuntimeConfiguration) GetWaitForJobs() bool {
	if o == nil || IsNil(o.WaitForJobs) {
		var ret bool
		return ret
	}
	return *o.WaitForJobs
}

// GetWaitForJobsOk returns a tuple with the WaitForJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRuntimeConfiguration) GetWaitForJobsOk() (*bool, bool) {
	if o == nil || IsNil(o.WaitForJobs) {
		return nil, false
	}
	return o.WaitForJobs, true
}

// SetWaitForJobs gets a reference to the given bool and assigns it to the WaitForJobs field.
func (o *HelmRuntimeConfiguration) SetWaitForJobs(v bool) {
	o.WaitForJobs = &v
}

func (o HelmRuntimeConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmRuntimeConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableHooks) {
		toSerialize["disableHooks"] = o.DisableHooks
	}
	if !IsNil(o.DisableReconciliation) {
		toSerialize["disableReconciliation"] = o.DisableReconciliation
	}
	if !IsNil(o.Recreate) {
		toSerialize["recreate"] = o.Recreate
	}
	if !IsNil(o.ResetThenReuseValues) {
		toSerialize["resetThenReuseValues"] = o.ResetThenReuseValues
	}
	if !IsNil(o.ResetValues) {
		toSerialize["resetValues"] = o.ResetValues
	}
	if !IsNil(o.ReuseValues) {
		toSerialize["reuseValues"] = o.ReuseValues
	}
	if !IsNil(o.SkipCRDs) {
		toSerialize["skipCRDs"] = o.SkipCRDs
	}
	if !IsNil(o.TimeoutNanos) {
		toSerialize["timeoutNanos"] = o.TimeoutNanos
	}
	if !IsNil(o.UpgradeCRDs) {
		toSerialize["upgradeCRDs"] = o.UpgradeCRDs
	}
	if !IsNil(o.Wait) {
		toSerialize["wait"] = o.Wait
	}
	if !IsNil(o.WaitForJobs) {
		toSerialize["waitForJobs"] = o.WaitForJobs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmRuntimeConfiguration) UnmarshalJSON(data []byte) (err error) {
	varHelmRuntimeConfiguration := _HelmRuntimeConfiguration{}

	err = json.Unmarshal(data, &varHelmRuntimeConfiguration)

	if err != nil {
		return err
	}

	*o = HelmRuntimeConfiguration(varHelmRuntimeConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disableHooks")
		delete(additionalProperties, "disableReconciliation")
		delete(additionalProperties, "recreate")
		delete(additionalProperties, "resetThenReuseValues")
		delete(additionalProperties, "resetValues")
		delete(additionalProperties, "reuseValues")
		delete(additionalProperties, "skipCRDs")
		delete(additionalProperties, "timeoutNanos")
		delete(additionalProperties, "upgradeCRDs")
		delete(additionalProperties, "wait")
		delete(additionalProperties, "waitForJobs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmRuntimeConfiguration struct {
	value *HelmRuntimeConfiguration
	isSet bool
}

func (v NullableHelmRuntimeConfiguration) Get() *HelmRuntimeConfiguration {
	return v.value
}

func (v *NullableHelmRuntimeConfiguration) Set(val *HelmRuntimeConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmRuntimeConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmRuntimeConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmRuntimeConfiguration(val *HelmRuntimeConfiguration) *NullableHelmRuntimeConfiguration {
	return &NullableHelmRuntimeConfiguration{value: val, isSet: true}
}

func (v NullableHelmRuntimeConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmRuntimeConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

