/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the TerraformOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformOutput{}

// TerraformOutput struct for TerraformOutput
type TerraformOutput struct {
	// Whether the output is exported
	Exported bool `json:"exported"`
	// The key of the output
	Key string `json:"key"`
	AdditionalProperties map[string]interface{}
}

type _TerraformOutput TerraformOutput

// NewTerraformOutput instantiates a new TerraformOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformOutput(exported bool, key string) *TerraformOutput {
	this := TerraformOutput{}
	this.Exported = exported
	this.Key = key
	return &this
}

// NewTerraformOutputWithDefaults instantiates a new TerraformOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformOutputWithDefaults() *TerraformOutput {
	this := TerraformOutput{}
	return &this
}

// GetExported returns the Exported field value
func (o *TerraformOutput) GetExported() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Exported
}

// GetExportedOk returns a tuple with the Exported field value
// and a boolean to check if the value has been set.
func (o *TerraformOutput) GetExportedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exported, true
}

// SetExported sets field value
func (o *TerraformOutput) SetExported(v bool) {
	o.Exported = v
}

// GetKey returns the Key field value
func (o *TerraformOutput) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TerraformOutput) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TerraformOutput) SetKey(v string) {
	o.Key = v
}

func (o TerraformOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["exported"] = o.Exported
	toSerialize["key"] = o.Key

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TerraformOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"exported",
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTerraformOutput := _TerraformOutput{}

	err = json.Unmarshal(data, &varTerraformOutput)

	if err != nil {
		return err
	}

	*o = TerraformOutput(varTerraformOutput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "exported")
		delete(additionalProperties, "key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerraformOutput struct {
	value *TerraformOutput
	isSet bool
}

func (v NullableTerraformOutput) Get() *TerraformOutput {
	return v.value
}

func (v *NullableTerraformOutput) Set(val *TerraformOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformOutput(val *TerraformOutput) *NullableTerraformOutput {
	return &NullableTerraformOutput{value: val, isSet: true}
}

func (v NullableTerraformOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

