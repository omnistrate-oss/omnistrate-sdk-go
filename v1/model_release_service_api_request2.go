/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the ReleaseServiceAPIRequest2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseServiceAPIRequest2{}

// ReleaseServiceAPIRequest2 struct for ReleaseServiceAPIRequest2
type ReleaseServiceAPIRequest2 struct {
	// When true, performs a dry run of the release operation without making any actual changes to the current pending changes and the service API.
	DryRun *bool `json:"dryRun,omitempty"`
	// Indicates whether this version set is preferred.
	IsPreferred *bool `json:"isPreferred,omitempty"`
	// The product tier ID
	ProductTierId *string `json:"productTierId,omitempty"`
	// The name of the version set to release
	VersionSetName *string `json:"versionSetName,omitempty"`
	// The version-set type of the product-tier.
	VersionSetType *string `json:"versionSetType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReleaseServiceAPIRequest2 ReleaseServiceAPIRequest2

// NewReleaseServiceAPIRequest2 instantiates a new ReleaseServiceAPIRequest2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseServiceAPIRequest2() *ReleaseServiceAPIRequest2 {
	this := ReleaseServiceAPIRequest2{}
	var dryRun bool = false
	this.DryRun = &dryRun
	var isPreferred bool = false
	this.IsPreferred = &isPreferred
	return &this
}

// NewReleaseServiceAPIRequest2WithDefaults instantiates a new ReleaseServiceAPIRequest2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseServiceAPIRequest2WithDefaults() *ReleaseServiceAPIRequest2 {
	this := ReleaseServiceAPIRequest2{}
	var dryRun bool = false
	this.DryRun = &dryRun
	var isPreferred bool = false
	this.IsPreferred = &isPreferred
	return &this
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *ReleaseServiceAPIRequest2) GetDryRun() bool {
	if o == nil || IsNil(o.DryRun) {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseServiceAPIRequest2) GetDryRunOk() (*bool, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *ReleaseServiceAPIRequest2) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetIsPreferred returns the IsPreferred field value if set, zero value otherwise.
func (o *ReleaseServiceAPIRequest2) GetIsPreferred() bool {
	if o == nil || IsNil(o.IsPreferred) {
		var ret bool
		return ret
	}
	return *o.IsPreferred
}

// GetIsPreferredOk returns a tuple with the IsPreferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseServiceAPIRequest2) GetIsPreferredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPreferred) {
		return nil, false
	}
	return o.IsPreferred, true
}

// SetIsPreferred gets a reference to the given bool and assigns it to the IsPreferred field.
func (o *ReleaseServiceAPIRequest2) SetIsPreferred(v bool) {
	o.IsPreferred = &v
}

// GetProductTierId returns the ProductTierId field value if set, zero value otherwise.
func (o *ReleaseServiceAPIRequest2) GetProductTierId() string {
	if o == nil || IsNil(o.ProductTierId) {
		var ret string
		return ret
	}
	return *o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseServiceAPIRequest2) GetProductTierIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTierId) {
		return nil, false
	}
	return o.ProductTierId, true
}

// SetProductTierId gets a reference to the given string and assigns it to the ProductTierId field.
func (o *ReleaseServiceAPIRequest2) SetProductTierId(v string) {
	o.ProductTierId = &v
}

// GetVersionSetName returns the VersionSetName field value if set, zero value otherwise.
func (o *ReleaseServiceAPIRequest2) GetVersionSetName() string {
	if o == nil || IsNil(o.VersionSetName) {
		var ret string
		return ret
	}
	return *o.VersionSetName
}

// GetVersionSetNameOk returns a tuple with the VersionSetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseServiceAPIRequest2) GetVersionSetNameOk() (*string, bool) {
	if o == nil || IsNil(o.VersionSetName) {
		return nil, false
	}
	return o.VersionSetName, true
}

// SetVersionSetName gets a reference to the given string and assigns it to the VersionSetName field.
func (o *ReleaseServiceAPIRequest2) SetVersionSetName(v string) {
	o.VersionSetName = &v
}

// GetVersionSetType returns the VersionSetType field value if set, zero value otherwise.
func (o *ReleaseServiceAPIRequest2) GetVersionSetType() string {
	if o == nil || IsNil(o.VersionSetType) {
		var ret string
		return ret
	}
	return *o.VersionSetType
}

// GetVersionSetTypeOk returns a tuple with the VersionSetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseServiceAPIRequest2) GetVersionSetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VersionSetType) {
		return nil, false
	}
	return o.VersionSetType, true
}

// SetVersionSetType gets a reference to the given string and assigns it to the VersionSetType field.
func (o *ReleaseServiceAPIRequest2) SetVersionSetType(v string) {
	o.VersionSetType = &v
}

func (o ReleaseServiceAPIRequest2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseServiceAPIRequest2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DryRun) {
		toSerialize["dryRun"] = o.DryRun
	}
	if !IsNil(o.IsPreferred) {
		toSerialize["isPreferred"] = o.IsPreferred
	}
	if !IsNil(o.ProductTierId) {
		toSerialize["productTierId"] = o.ProductTierId
	}
	if !IsNil(o.VersionSetName) {
		toSerialize["versionSetName"] = o.VersionSetName
	}
	if !IsNil(o.VersionSetType) {
		toSerialize["versionSetType"] = o.VersionSetType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReleaseServiceAPIRequest2) UnmarshalJSON(data []byte) (err error) {
	varReleaseServiceAPIRequest2 := _ReleaseServiceAPIRequest2{}

	err = json.Unmarshal(data, &varReleaseServiceAPIRequest2)

	if err != nil {
		return err
	}

	*o = ReleaseServiceAPIRequest2(varReleaseServiceAPIRequest2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dryRun")
		delete(additionalProperties, "isPreferred")
		delete(additionalProperties, "productTierId")
		delete(additionalProperties, "versionSetName")
		delete(additionalProperties, "versionSetType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReleaseServiceAPIRequest2 struct {
	value *ReleaseServiceAPIRequest2
	isSet bool
}

func (v NullableReleaseServiceAPIRequest2) Get() *ReleaseServiceAPIRequest2 {
	return v.value
}

func (v *NullableReleaseServiceAPIRequest2) Set(val *ReleaseServiceAPIRequest2) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseServiceAPIRequest2) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseServiceAPIRequest2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseServiceAPIRequest2(val *ReleaseServiceAPIRequest2) *NullableReleaseServiceAPIRequest2 {
	return &NullableReleaseServiceAPIRequest2{value: val, isSet: true}
}

func (v NullableReleaseServiceAPIRequest2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseServiceAPIRequest2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


