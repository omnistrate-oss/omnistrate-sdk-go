/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the GCPFilestoreConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GCPFilestoreConfiguration{}

// GCPFilestoreConfiguration struct for GCPFilestoreConfiguration
type GCPFilestoreConfiguration struct {
	// The capacity of the GCP filestore in GB
	Capacity string `json:"Capacity"`
	// The maximum IOPS per TB for the performance tier
	MaxIopsPerTb *int64 `json:"MaxIopsPerTb,omitempty"`
	// The tier of the GCP filestore
	Tier string `json:"Tier"`
	AdditionalProperties map[string]interface{}
}

type _GCPFilestoreConfiguration GCPFilestoreConfiguration

// NewGCPFilestoreConfiguration instantiates a new GCPFilestoreConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGCPFilestoreConfiguration(capacity string, tier string) *GCPFilestoreConfiguration {
	this := GCPFilestoreConfiguration{}
	this.Capacity = capacity
	this.Tier = tier
	return &this
}

// NewGCPFilestoreConfigurationWithDefaults instantiates a new GCPFilestoreConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGCPFilestoreConfigurationWithDefaults() *GCPFilestoreConfiguration {
	this := GCPFilestoreConfiguration{}
	return &this
}

// GetCapacity returns the Capacity field value
func (o *GCPFilestoreConfiguration) GetCapacity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *GCPFilestoreConfiguration) GetCapacityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *GCPFilestoreConfiguration) SetCapacity(v string) {
	o.Capacity = v
}

// GetMaxIopsPerTb returns the MaxIopsPerTb field value if set, zero value otherwise.
func (o *GCPFilestoreConfiguration) GetMaxIopsPerTb() int64 {
	if o == nil || IsNil(o.MaxIopsPerTb) {
		var ret int64
		return ret
	}
	return *o.MaxIopsPerTb
}

// GetMaxIopsPerTbOk returns a tuple with the MaxIopsPerTb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCPFilestoreConfiguration) GetMaxIopsPerTbOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxIopsPerTb) {
		return nil, false
	}
	return o.MaxIopsPerTb, true
}

// SetMaxIopsPerTb gets a reference to the given int64 and assigns it to the MaxIopsPerTb field.
func (o *GCPFilestoreConfiguration) SetMaxIopsPerTb(v int64) {
	o.MaxIopsPerTb = &v
}

// GetTier returns the Tier field value
func (o *GCPFilestoreConfiguration) GetTier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tier
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
func (o *GCPFilestoreConfiguration) GetTierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tier, true
}

// SetTier sets field value
func (o *GCPFilestoreConfiguration) SetTier(v string) {
	o.Tier = v
}

func (o GCPFilestoreConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GCPFilestoreConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Capacity"] = o.Capacity
	if !IsNil(o.MaxIopsPerTb) {
		toSerialize["MaxIopsPerTb"] = o.MaxIopsPerTb
	}
	toSerialize["Tier"] = o.Tier

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GCPFilestoreConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Capacity",
		"Tier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGCPFilestoreConfiguration := _GCPFilestoreConfiguration{}

	err = json.Unmarshal(data, &varGCPFilestoreConfiguration)

	if err != nil {
		return err
	}

	*o = GCPFilestoreConfiguration(varGCPFilestoreConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "Capacity")
		delete(additionalProperties, "MaxIopsPerTb")
		delete(additionalProperties, "Tier")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGCPFilestoreConfiguration struct {
	value *GCPFilestoreConfiguration
	isSet bool
}

func (v NullableGCPFilestoreConfiguration) Get() *GCPFilestoreConfiguration {
	return v.value
}

func (v *NullableGCPFilestoreConfiguration) Set(val *GCPFilestoreConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableGCPFilestoreConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableGCPFilestoreConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCPFilestoreConfiguration(val *GCPFilestoreConfiguration) *NullableGCPFilestoreConfiguration {
	return &NullableGCPFilestoreConfiguration{value: val, isSet: true}
}

func (v NullableGCPFilestoreConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCPFilestoreConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


