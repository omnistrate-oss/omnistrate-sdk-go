/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceSnapshot{}

// InstanceSnapshot struct for InstanceSnapshot
type InstanceSnapshot struct {
	// The snapshot time
	CompleteTime string `json:"completeTime"`
	// The snapshot creation time
	CreatedTime string `json:"createdTime"`
	// Whether the snapshot is encrypted
	Encrypted bool `json:"encrypted"`
	// The backup progress. 0-100
	Progress int64 `json:"progress"`
	// The region name where the snapshot is stored
	Region string `json:"region"`
	// ID of a Resource Instance Snapshot
	SnapshotId string `json:"snapshotId"`
	// The snapshot type
	SnapshotType string `json:"snapshotType"`
	// The snapshot status
	Status string `json:"status"`
	AdditionalProperties map[string]interface{}
}

type _InstanceSnapshot InstanceSnapshot

// NewInstanceSnapshot instantiates a new InstanceSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceSnapshot(completeTime string, createdTime string, encrypted bool, progress int64, region string, snapshotId string, snapshotType string, status string) *InstanceSnapshot {
	this := InstanceSnapshot{}
	this.CompleteTime = completeTime
	this.CreatedTime = createdTime
	this.Encrypted = encrypted
	this.Progress = progress
	this.Region = region
	this.SnapshotId = snapshotId
	this.SnapshotType = snapshotType
	this.Status = status
	return &this
}

// NewInstanceSnapshotWithDefaults instantiates a new InstanceSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceSnapshotWithDefaults() *InstanceSnapshot {
	this := InstanceSnapshot{}
	return &this
}

// GetCompleteTime returns the CompleteTime field value
func (o *InstanceSnapshot) GetCompleteTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompleteTime
}

// GetCompleteTimeOk returns a tuple with the CompleteTime field value
// and a boolean to check if the value has been set.
func (o *InstanceSnapshot) GetCompleteTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompleteTime, true
}

// SetCompleteTime sets field value
func (o *InstanceSnapshot) SetCompleteTime(v string) {
	o.CompleteTime = v
}

// GetCreatedTime returns the CreatedTime field value
func (o *InstanceSnapshot) GetCreatedTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *InstanceSnapshot) GetCreatedTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *InstanceSnapshot) SetCreatedTime(v string) {
	o.CreatedTime = v
}

// GetEncrypted returns the Encrypted field value
func (o *InstanceSnapshot) GetEncrypted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Encrypted
}

// GetEncryptedOk returns a tuple with the Encrypted field value
// and a boolean to check if the value has been set.
func (o *InstanceSnapshot) GetEncryptedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Encrypted, true
}

// SetEncrypted sets field value
func (o *InstanceSnapshot) SetEncrypted(v bool) {
	o.Encrypted = v
}

// GetProgress returns the Progress field value
func (o *InstanceSnapshot) GetProgress() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Progress
}

// GetProgressOk returns a tuple with the Progress field value
// and a boolean to check if the value has been set.
func (o *InstanceSnapshot) GetProgressOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Progress, true
}

// SetProgress sets field value
func (o *InstanceSnapshot) SetProgress(v int64) {
	o.Progress = v
}

// GetRegion returns the Region field value
func (o *InstanceSnapshot) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *InstanceSnapshot) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *InstanceSnapshot) SetRegion(v string) {
	o.Region = v
}

// GetSnapshotId returns the SnapshotId field value
func (o *InstanceSnapshot) GetSnapshotId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *InstanceSnapshot) GetSnapshotIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *InstanceSnapshot) SetSnapshotId(v string) {
	o.SnapshotId = v
}

// GetSnapshotType returns the SnapshotType field value
func (o *InstanceSnapshot) GetSnapshotType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SnapshotType
}

// GetSnapshotTypeOk returns a tuple with the SnapshotType field value
// and a boolean to check if the value has been set.
func (o *InstanceSnapshot) GetSnapshotTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotType, true
}

// SetSnapshotType sets field value
func (o *InstanceSnapshot) SetSnapshotType(v string) {
	o.SnapshotType = v
}

// GetStatus returns the Status field value
func (o *InstanceSnapshot) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InstanceSnapshot) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InstanceSnapshot) SetStatus(v string) {
	o.Status = v
}

func (o InstanceSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["completeTime"] = o.CompleteTime
	toSerialize["createdTime"] = o.CreatedTime
	toSerialize["encrypted"] = o.Encrypted
	toSerialize["progress"] = o.Progress
	toSerialize["region"] = o.Region
	toSerialize["snapshotId"] = o.SnapshotId
	toSerialize["snapshotType"] = o.SnapshotType
	toSerialize["status"] = o.Status

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceSnapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"completeTime",
		"createdTime",
		"encrypted",
		"progress",
		"region",
		"snapshotId",
		"snapshotType",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceSnapshot := _InstanceSnapshot{}

	err = json.Unmarshal(data, &varInstanceSnapshot)

	if err != nil {
		return err
	}

	*o = InstanceSnapshot(varInstanceSnapshot)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "completeTime")
		delete(additionalProperties, "createdTime")
		delete(additionalProperties, "encrypted")
		delete(additionalProperties, "progress")
		delete(additionalProperties, "region")
		delete(additionalProperties, "snapshotId")
		delete(additionalProperties, "snapshotType")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceSnapshot struct {
	value *InstanceSnapshot
	isSet bool
}

func (v NullableInstanceSnapshot) Get() *InstanceSnapshot {
	return v.value
}

func (v *NullableInstanceSnapshot) Set(val *InstanceSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceSnapshot(val *InstanceSnapshot) *NullableInstanceSnapshot {
	return &NullableInstanceSnapshot{value: val, isSet: true}
}

func (v NullableInstanceSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

