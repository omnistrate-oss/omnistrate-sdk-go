/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateInputParameterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateInputParameterRequest{}

// UpdateInputParameterRequest struct for UpdateInputParameterRequest
type UpdateInputParameterRequest struct {
	// Default value to use for an optional input parameter represented as a string
	DefaultValue *string `json:"defaultValue,omitempty"`
	// A brief description of the input parameter
	Description *string `json:"description,omitempty"`
	// Marks the input parameter to be selectable from a list of values
	HasOptions *bool `json:"hasOptions,omitempty"`
	// ID of an Input Parameter
	Id string `json:"id"`
	// A map for labeled options. The key is the label and the value is the option. When the option is selected, the label will be displayed to the end customer. Specify either options or labeledOptions when defining the input parameter.
	LabeledOptions *map[string]string `json:"labeledOptions,omitempty"`
	Limits *Limits `json:"limits,omitempty"`
	// Marks the input parameter as immutable
	Modifiable *bool `json:"modifiable,omitempty"`
	// External name for the input parameter
	Name *string `json:"name,omitempty"`
	// A list of options to restrict the value of the input parameter to (represented as a string)
	Options []string `json:"options,omitempty"`
	// Regular expression pattern for validating the input parameter value
	Regex *string `json:"regex,omitempty"`
	// Enforces the input parameter as a required parameter
	Required *bool `json:"required,omitempty"`
	// ID of a Service
	ServiceId string `json:"serviceId"`
	// Index for parameter ordering in the SaaS portal
	TabIndex *int64 `json:"tabIndex,omitempty"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _UpdateInputParameterRequest UpdateInputParameterRequest

// NewUpdateInputParameterRequest instantiates a new UpdateInputParameterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateInputParameterRequest(id string, serviceId string, token string) *UpdateInputParameterRequest {
	this := UpdateInputParameterRequest{}
	this.Id = id
	this.ServiceId = serviceId
	var tabIndex int64 = 0
	this.TabIndex = &tabIndex
	this.Token = token
	return &this
}

// NewUpdateInputParameterRequestWithDefaults instantiates a new UpdateInputParameterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateInputParameterRequestWithDefaults() *UpdateInputParameterRequest {
	this := UpdateInputParameterRequest{}
	var tabIndex int64 = 0
	this.TabIndex = &tabIndex
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *UpdateInputParameterRequest) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *UpdateInputParameterRequest) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateInputParameterRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateInputParameterRequest) SetDescription(v string) {
	o.Description = &v
}

// GetHasOptions returns the HasOptions field value if set, zero value otherwise.
func (o *UpdateInputParameterRequest) GetHasOptions() bool {
	if o == nil || IsNil(o.HasOptions) {
		var ret bool
		return ret
	}
	return *o.HasOptions
}

// GetHasOptionsOk returns a tuple with the HasOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetHasOptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasOptions) {
		return nil, false
	}
	return o.HasOptions, true
}

// SetHasOptions gets a reference to the given bool and assigns it to the HasOptions field.
func (o *UpdateInputParameterRequest) SetHasOptions(v bool) {
	o.HasOptions = &v
}

// GetId returns the Id field value
func (o *UpdateInputParameterRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateInputParameterRequest) SetId(v string) {
	o.Id = v
}

// GetLabeledOptions returns the LabeledOptions field value if set, zero value otherwise.
func (o *UpdateInputParameterRequest) GetLabeledOptions() map[string]string {
	if o == nil || IsNil(o.LabeledOptions) {
		var ret map[string]string
		return ret
	}
	return *o.LabeledOptions
}

// GetLabeledOptionsOk returns a tuple with the LabeledOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetLabeledOptionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.LabeledOptions) {
		return nil, false
	}
	return o.LabeledOptions, true
}

// SetLabeledOptions gets a reference to the given map[string]string and assigns it to the LabeledOptions field.
func (o *UpdateInputParameterRequest) SetLabeledOptions(v map[string]string) {
	o.LabeledOptions = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *UpdateInputParameterRequest) GetLimits() Limits {
	if o == nil || IsNil(o.Limits) {
		var ret Limits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetLimitsOk() (*Limits, bool) {
	if o == nil || IsNil(o.Limits) {
		return nil, false
	}
	return o.Limits, true
}

// SetLimits gets a reference to the given Limits and assigns it to the Limits field.
func (o *UpdateInputParameterRequest) SetLimits(v Limits) {
	o.Limits = &v
}

// GetModifiable returns the Modifiable field value if set, zero value otherwise.
func (o *UpdateInputParameterRequest) GetModifiable() bool {
	if o == nil || IsNil(o.Modifiable) {
		var ret bool
		return ret
	}
	return *o.Modifiable
}

// GetModifiableOk returns a tuple with the Modifiable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetModifiableOk() (*bool, bool) {
	if o == nil || IsNil(o.Modifiable) {
		return nil, false
	}
	return o.Modifiable, true
}

// SetModifiable gets a reference to the given bool and assigns it to the Modifiable field.
func (o *UpdateInputParameterRequest) SetModifiable(v bool) {
	o.Modifiable = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateInputParameterRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateInputParameterRequest) SetName(v string) {
	o.Name = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *UpdateInputParameterRequest) GetOptions() []string {
	if o == nil || IsNil(o.Options) {
		var ret []string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *UpdateInputParameterRequest) SetOptions(v []string) {
	o.Options = v
}

// GetRegex returns the Regex field value if set, zero value otherwise.
func (o *UpdateInputParameterRequest) GetRegex() string {
	if o == nil || IsNil(o.Regex) {
		var ret string
		return ret
	}
	return *o.Regex
}

// GetRegexOk returns a tuple with the Regex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetRegexOk() (*string, bool) {
	if o == nil || IsNil(o.Regex) {
		return nil, false
	}
	return o.Regex, true
}

// SetRegex gets a reference to the given string and assigns it to the Regex field.
func (o *UpdateInputParameterRequest) SetRegex(v string) {
	o.Regex = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *UpdateInputParameterRequest) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *UpdateInputParameterRequest) SetRequired(v bool) {
	o.Required = &v
}

// GetServiceId returns the ServiceId field value
func (o *UpdateInputParameterRequest) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *UpdateInputParameterRequest) SetServiceId(v string) {
	o.ServiceId = v
}

// GetTabIndex returns the TabIndex field value if set, zero value otherwise.
func (o *UpdateInputParameterRequest) GetTabIndex() int64 {
	if o == nil || IsNil(o.TabIndex) {
		var ret int64
		return ret
	}
	return *o.TabIndex
}

// GetTabIndexOk returns a tuple with the TabIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetTabIndexOk() (*int64, bool) {
	if o == nil || IsNil(o.TabIndex) {
		return nil, false
	}
	return o.TabIndex, true
}

// SetTabIndex gets a reference to the given int64 and assigns it to the TabIndex field.
func (o *UpdateInputParameterRequest) SetTabIndex(v int64) {
	o.TabIndex = &v
}

// GetToken returns the Token field value
func (o *UpdateInputParameterRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *UpdateInputParameterRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *UpdateInputParameterRequest) SetToken(v string) {
	o.Token = v
}

func (o UpdateInputParameterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateInputParameterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HasOptions) {
		toSerialize["hasOptions"] = o.HasOptions
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.LabeledOptions) {
		toSerialize["labeledOptions"] = o.LabeledOptions
	}
	if !IsNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	if !IsNil(o.Modifiable) {
		toSerialize["modifiable"] = o.Modifiable
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Regex) {
		toSerialize["regex"] = o.Regex
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	toSerialize["serviceId"] = o.ServiceId
	if !IsNil(o.TabIndex) {
		toSerialize["tabIndex"] = o.TabIndex
	}
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateInputParameterRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"serviceId",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateInputParameterRequest := _UpdateInputParameterRequest{}

	err = json.Unmarshal(data, &varUpdateInputParameterRequest)

	if err != nil {
		return err
	}

	*o = UpdateInputParameterRequest(varUpdateInputParameterRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "defaultValue")
		delete(additionalProperties, "description")
		delete(additionalProperties, "hasOptions")
		delete(additionalProperties, "id")
		delete(additionalProperties, "labeledOptions")
		delete(additionalProperties, "limits")
		delete(additionalProperties, "modifiable")
		delete(additionalProperties, "name")
		delete(additionalProperties, "options")
		delete(additionalProperties, "regex")
		delete(additionalProperties, "required")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "tabIndex")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateInputParameterRequest struct {
	value *UpdateInputParameterRequest
	isSet bool
}

func (v NullableUpdateInputParameterRequest) Get() *UpdateInputParameterRequest {
	return v.value
}

func (v *NullableUpdateInputParameterRequest) Set(val *UpdateInputParameterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInputParameterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInputParameterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInputParameterRequest(val *UpdateInputParameterRequest) *NullableUpdateInputParameterRequest {
	return &NullableUpdateInputParameterRequest{value: val, isSet: true}
}

func (v NullableUpdateInputParameterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInputParameterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

