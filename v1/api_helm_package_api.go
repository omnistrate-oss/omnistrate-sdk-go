/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type HelmPackageApiAPI interface {

	/*
	HelmPackageApiDeleteHelmPackage DeleteHelmPackage helm-package-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chartName The chart name of the Helm package to delete
	@param chartVersion The chart version of the Helm package to delete
	@return ApiHelmPackageApiDeleteHelmPackageRequest
	*/
	HelmPackageApiDeleteHelmPackage(ctx context.Context, chartName string, chartVersion string) ApiHelmPackageApiDeleteHelmPackageRequest

	// HelmPackageApiDeleteHelmPackageExecute executes the request
	HelmPackageApiDeleteHelmPackageExecute(r ApiHelmPackageApiDeleteHelmPackageRequest) (*http.Response, error)

	/*
	HelmPackageApiDescribeHelmPackage DescribeHelmPackage helm-package-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chartName The chart name of the Helm package to describe
	@param chartVersion The chart version of the Helm package to describe
	@return ApiHelmPackageApiDescribeHelmPackageRequest
	*/
	HelmPackageApiDescribeHelmPackage(ctx context.Context, chartName string, chartVersion string) ApiHelmPackageApiDescribeHelmPackageRequest

	// HelmPackageApiDescribeHelmPackageExecute executes the request
	//  @return HelmPackage
	HelmPackageApiDescribeHelmPackageExecute(r ApiHelmPackageApiDescribeHelmPackageRequest) (*HelmPackage, *http.Response, error)

	/*
	HelmPackageApiListHelmPackages ListHelmPackages helm-package-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHelmPackageApiListHelmPackagesRequest
	*/
	HelmPackageApiListHelmPackages(ctx context.Context) ApiHelmPackageApiListHelmPackagesRequest

	// HelmPackageApiListHelmPackagesExecute executes the request
	//  @return ListHelmPackagesResult
	HelmPackageApiListHelmPackagesExecute(r ApiHelmPackageApiListHelmPackagesRequest) (*ListHelmPackagesResult, *http.Response, error)

	/*
	HelmPackageApiSaveHelmPackage SaveHelmPackage helm-package-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiHelmPackageApiSaveHelmPackageRequest
	*/
	HelmPackageApiSaveHelmPackage(ctx context.Context) ApiHelmPackageApiSaveHelmPackageRequest

	// HelmPackageApiSaveHelmPackageExecute executes the request
	HelmPackageApiSaveHelmPackageExecute(r ApiHelmPackageApiSaveHelmPackageRequest) (*http.Response, error)
}

// HelmPackageApiAPIService HelmPackageApiAPI service
type HelmPackageApiAPIService service

type ApiHelmPackageApiDeleteHelmPackageRequest struct {
	ctx context.Context
	ApiService HelmPackageApiAPI
	chartName string
	chartVersion string
}

func (r ApiHelmPackageApiDeleteHelmPackageRequest) Execute() (*http.Response, error) {
	return r.ApiService.HelmPackageApiDeleteHelmPackageExecute(r)
}

/*
HelmPackageApiDeleteHelmPackage DeleteHelmPackage helm-package-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chartName The chart name of the Helm package to delete
 @param chartVersion The chart version of the Helm package to delete
 @return ApiHelmPackageApiDeleteHelmPackageRequest
*/
func (a *HelmPackageApiAPIService) HelmPackageApiDeleteHelmPackage(ctx context.Context, chartName string, chartVersion string) ApiHelmPackageApiDeleteHelmPackageRequest {
	return ApiHelmPackageApiDeleteHelmPackageRequest{
		ApiService: a,
		ctx: ctx,
		chartName: chartName,
		chartVersion: chartVersion,
	}
}

// Execute executes the request
func (a *HelmPackageApiAPIService) HelmPackageApiDeleteHelmPackageExecute(r ApiHelmPackageApiDeleteHelmPackageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HelmPackageApiAPIService.HelmPackageApiDeleteHelmPackage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/helm-package/{chartName}/{chartVersion}"
	localVarPath = strings.Replace(localVarPath, "{"+"chartName"+"}", url.PathEscape(parameterValueToString(r.chartName, "chartName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"chartVersion"+"}", url.PathEscape(parameterValueToString(r.chartVersion, "chartVersion")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiHelmPackageApiDescribeHelmPackageRequest struct {
	ctx context.Context
	ApiService HelmPackageApiAPI
	chartName string
	chartVersion string
}

func (r ApiHelmPackageApiDescribeHelmPackageRequest) Execute() (*HelmPackage, *http.Response, error) {
	return r.ApiService.HelmPackageApiDescribeHelmPackageExecute(r)
}

/*
HelmPackageApiDescribeHelmPackage DescribeHelmPackage helm-package-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chartName The chart name of the Helm package to describe
 @param chartVersion The chart version of the Helm package to describe
 @return ApiHelmPackageApiDescribeHelmPackageRequest
*/
func (a *HelmPackageApiAPIService) HelmPackageApiDescribeHelmPackage(ctx context.Context, chartName string, chartVersion string) ApiHelmPackageApiDescribeHelmPackageRequest {
	return ApiHelmPackageApiDescribeHelmPackageRequest{
		ApiService: a,
		ctx: ctx,
		chartName: chartName,
		chartVersion: chartVersion,
	}
}

// Execute executes the request
//  @return HelmPackage
func (a *HelmPackageApiAPIService) HelmPackageApiDescribeHelmPackageExecute(r ApiHelmPackageApiDescribeHelmPackageRequest) (*HelmPackage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HelmPackage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HelmPackageApiAPIService.HelmPackageApiDescribeHelmPackage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/helm-package/{chartName}/{chartVersion}"
	localVarPath = strings.Replace(localVarPath, "{"+"chartName"+"}", url.PathEscape(parameterValueToString(r.chartName, "chartName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"chartVersion"+"}", url.PathEscape(parameterValueToString(r.chartVersion, "chartVersion")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHelmPackageApiListHelmPackagesRequest struct {
	ctx context.Context
	ApiService HelmPackageApiAPI
	chartName *string
}

// The chart name to filter by
func (r ApiHelmPackageApiListHelmPackagesRequest) ChartName(chartName string) ApiHelmPackageApiListHelmPackagesRequest {
	r.chartName = &chartName
	return r
}

func (r ApiHelmPackageApiListHelmPackagesRequest) Execute() (*ListHelmPackagesResult, *http.Response, error) {
	return r.ApiService.HelmPackageApiListHelmPackagesExecute(r)
}

/*
HelmPackageApiListHelmPackages ListHelmPackages helm-package-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiHelmPackageApiListHelmPackagesRequest
*/
func (a *HelmPackageApiAPIService) HelmPackageApiListHelmPackages(ctx context.Context) ApiHelmPackageApiListHelmPackagesRequest {
	return ApiHelmPackageApiListHelmPackagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListHelmPackagesResult
func (a *HelmPackageApiAPIService) HelmPackageApiListHelmPackagesExecute(r ApiHelmPackageApiListHelmPackagesRequest) (*ListHelmPackagesResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListHelmPackagesResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HelmPackageApiAPIService.HelmPackageApiListHelmPackages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/helm-package"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.chartName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chartName", r.chartName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHelmPackageApiSaveHelmPackageRequest struct {
	ctx context.Context
	ApiService HelmPackageApiAPI
	saveHelmPackageRequestBody *SaveHelmPackageRequestBody
}

func (r ApiHelmPackageApiSaveHelmPackageRequest) SaveHelmPackageRequestBody(saveHelmPackageRequestBody SaveHelmPackageRequestBody) ApiHelmPackageApiSaveHelmPackageRequest {
	r.saveHelmPackageRequestBody = &saveHelmPackageRequestBody
	return r
}

func (r ApiHelmPackageApiSaveHelmPackageRequest) Execute() (*http.Response, error) {
	return r.ApiService.HelmPackageApiSaveHelmPackageExecute(r)
}

/*
HelmPackageApiSaveHelmPackage SaveHelmPackage helm-package-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiHelmPackageApiSaveHelmPackageRequest
*/
func (a *HelmPackageApiAPIService) HelmPackageApiSaveHelmPackage(ctx context.Context) ApiHelmPackageApiSaveHelmPackageRequest {
	return ApiHelmPackageApiSaveHelmPackageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *HelmPackageApiAPIService) HelmPackageApiSaveHelmPackageExecute(r ApiHelmPackageApiSaveHelmPackageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HelmPackageApiAPIService.HelmPackageApiSaveHelmPackage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/helm-package"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.saveHelmPackageRequestBody == nil {
		return nil, reportError("saveHelmPackageRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.saveHelmPackageRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
