/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the EnableResourceCapabilityRequest2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnableResourceCapabilityRequest2{}

// EnableResourceCapabilityRequest2 struct for EnableResourceCapabilityRequest2
type EnableResourceCapabilityRequest2 struct {
	// The type of capability of a resource
	Capability string `json:"capability"`
	// The configuration parameters of a capability of a resource
	Configuration map[string]interface{} `json:"configuration,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnableResourceCapabilityRequest2 EnableResourceCapabilityRequest2

// NewEnableResourceCapabilityRequest2 instantiates a new EnableResourceCapabilityRequest2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnableResourceCapabilityRequest2(capability string) *EnableResourceCapabilityRequest2 {
	this := EnableResourceCapabilityRequest2{}
	this.Capability = capability
	return &this
}

// NewEnableResourceCapabilityRequest2WithDefaults instantiates a new EnableResourceCapabilityRequest2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnableResourceCapabilityRequest2WithDefaults() *EnableResourceCapabilityRequest2 {
	this := EnableResourceCapabilityRequest2{}
	return &this
}

// GetCapability returns the Capability field value
func (o *EnableResourceCapabilityRequest2) GetCapability() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Capability
}

// GetCapabilityOk returns a tuple with the Capability field value
// and a boolean to check if the value has been set.
func (o *EnableResourceCapabilityRequest2) GetCapabilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capability, true
}

// SetCapability sets field value
func (o *EnableResourceCapabilityRequest2) SetCapability(v string) {
	o.Capability = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *EnableResourceCapabilityRequest2) GetConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnableResourceCapabilityRequest2) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Configuration) {
		return map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// SetConfiguration gets a reference to the given map[string]interface{} and assigns it to the Configuration field.
func (o *EnableResourceCapabilityRequest2) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

func (o EnableResourceCapabilityRequest2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnableResourceCapabilityRequest2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capability"] = o.Capability
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnableResourceCapabilityRequest2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"capability",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnableResourceCapabilityRequest2 := _EnableResourceCapabilityRequest2{}

	err = json.Unmarshal(data, &varEnableResourceCapabilityRequest2)

	if err != nil {
		return err
	}

	*o = EnableResourceCapabilityRequest2(varEnableResourceCapabilityRequest2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "capability")
		delete(additionalProperties, "configuration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnableResourceCapabilityRequest2 struct {
	value *EnableResourceCapabilityRequest2
	isSet bool
}

func (v NullableEnableResourceCapabilityRequest2) Get() *EnableResourceCapabilityRequest2 {
	return v.value
}

func (v *NullableEnableResourceCapabilityRequest2) Set(val *EnableResourceCapabilityRequest2) {
	v.value = val
	v.isSet = true
}

func (v NullableEnableResourceCapabilityRequest2) IsSet() bool {
	return v.isSet
}

func (v *NullableEnableResourceCapabilityRequest2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnableResourceCapabilityRequest2(val *EnableResourceCapabilityRequest2) *NullableEnableResourceCapabilityRequest2 {
	return &NullableEnableResourceCapabilityRequest2{value: val, isSet: true}
}

func (v NullableEnableResourceCapabilityRequest2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnableResourceCapabilityRequest2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

