/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangePlanRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangePlanRequestBody{}

// ChangePlanRequestBody struct for ChangePlanRequestBody
type ChangePlanRequestBody struct {
	// The name of the plan this user is changing to
	PlanName string `json:"planName"`
}

type _ChangePlanRequestBody ChangePlanRequestBody

// NewChangePlanRequestBody instantiates a new ChangePlanRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangePlanRequestBody(planName string) *ChangePlanRequestBody {
	this := ChangePlanRequestBody{}
	this.PlanName = planName
	return &this
}

// NewChangePlanRequestBodyWithDefaults instantiates a new ChangePlanRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangePlanRequestBodyWithDefaults() *ChangePlanRequestBody {
	this := ChangePlanRequestBody{}
	return &this
}

// GetPlanName returns the PlanName field value
func (o *ChangePlanRequestBody) GetPlanName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlanName
}

// GetPlanNameOk returns a tuple with the PlanName field value
// and a boolean to check if the value has been set.
func (o *ChangePlanRequestBody) GetPlanNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanName, true
}

// SetPlanName sets field value
func (o *ChangePlanRequestBody) SetPlanName(v string) {
	o.PlanName = v
}

func (o ChangePlanRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangePlanRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["planName"] = o.PlanName
	return toSerialize, nil
}

func (o *ChangePlanRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"planName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangePlanRequestBody := _ChangePlanRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangePlanRequestBody)

	if err != nil {
		return err
	}

	*o = ChangePlanRequestBody(varChangePlanRequestBody)

	return err
}

type NullableChangePlanRequestBody struct {
	value *ChangePlanRequestBody
	isSet bool
}

func (v NullableChangePlanRequestBody) Get() *ChangePlanRequestBody {
	return v.value
}

func (v *NullableChangePlanRequestBody) Set(val *ChangePlanRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableChangePlanRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableChangePlanRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangePlanRequestBody(val *ChangePlanRequestBody) *NullableChangePlanRequestBody {
	return &NullableChangePlanRequestBody{value: val, isSet: true}
}

func (v NullableChangePlanRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangePlanRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


