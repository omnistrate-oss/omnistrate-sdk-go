/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeregisterActionHookRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeregisterActionHookRequestBody{}

// DeregisterActionHookRequestBody struct for DeregisterActionHookRequestBody
type DeregisterActionHookRequestBody struct {
	// The scope of the hook
	Scope string `json:"scope"`
	// The type of hook to execute
	Type string `json:"type"`
}

type _DeregisterActionHookRequestBody DeregisterActionHookRequestBody

// NewDeregisterActionHookRequestBody instantiates a new DeregisterActionHookRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeregisterActionHookRequestBody(scope string, type_ string) *DeregisterActionHookRequestBody {
	this := DeregisterActionHookRequestBody{}
	this.Scope = scope
	this.Type = type_
	return &this
}

// NewDeregisterActionHookRequestBodyWithDefaults instantiates a new DeregisterActionHookRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeregisterActionHookRequestBodyWithDefaults() *DeregisterActionHookRequestBody {
	this := DeregisterActionHookRequestBody{}
	return &this
}

// GetScope returns the Scope field value
func (o *DeregisterActionHookRequestBody) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *DeregisterActionHookRequestBody) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *DeregisterActionHookRequestBody) SetScope(v string) {
	o.Scope = v
}

// GetType returns the Type field value
func (o *DeregisterActionHookRequestBody) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DeregisterActionHookRequestBody) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DeregisterActionHookRequestBody) SetType(v string) {
	o.Type = v
}

func (o DeregisterActionHookRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeregisterActionHookRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scope"] = o.Scope
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *DeregisterActionHookRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scope",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeregisterActionHookRequestBody := _DeregisterActionHookRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeregisterActionHookRequestBody)

	if err != nil {
		return err
	}

	*o = DeregisterActionHookRequestBody(varDeregisterActionHookRequestBody)

	return err
}

type NullableDeregisterActionHookRequestBody struct {
	value *DeregisterActionHookRequestBody
	isSet bool
}

func (v NullableDeregisterActionHookRequestBody) Get() *DeregisterActionHookRequestBody {
	return v.value
}

func (v *NullableDeregisterActionHookRequestBody) Set(val *DeregisterActionHookRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableDeregisterActionHookRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableDeregisterActionHookRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeregisterActionHookRequestBody(val *DeregisterActionHookRequestBody) *NullableDeregisterActionHookRequestBody {
	return &NullableDeregisterActionHookRequestBody{value: val, isSet: true}
}

func (v NullableDeregisterActionHookRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeregisterActionHookRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


