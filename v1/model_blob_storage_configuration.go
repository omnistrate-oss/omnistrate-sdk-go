/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the BlobStorageConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlobStorageConfiguration{}

// BlobStorageConfiguration struct for BlobStorageConfiguration
type BlobStorageConfiguration struct {
	GCSConfiguration map[string]interface{} `json:"GCSConfiguration,omitempty"`
	S3Configuration map[string]interface{} `json:"S3Configuration,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BlobStorageConfiguration BlobStorageConfiguration

// NewBlobStorageConfiguration instantiates a new BlobStorageConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlobStorageConfiguration() *BlobStorageConfiguration {
	this := BlobStorageConfiguration{}
	return &this
}

// NewBlobStorageConfigurationWithDefaults instantiates a new BlobStorageConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlobStorageConfigurationWithDefaults() *BlobStorageConfiguration {
	this := BlobStorageConfiguration{}
	return &this
}

// GetGCSConfiguration returns the GCSConfiguration field value if set, zero value otherwise.
func (o *BlobStorageConfiguration) GetGCSConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.GCSConfiguration) {
		var ret map[string]interface{}
		return ret
	}
	return o.GCSConfiguration
}

// GetGCSConfigurationOk returns a tuple with the GCSConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobStorageConfiguration) GetGCSConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.GCSConfiguration) {
		return map[string]interface{}{}, false
	}
	return o.GCSConfiguration, true
}

// SetGCSConfiguration gets a reference to the given map[string]interface{} and assigns it to the GCSConfiguration field.
func (o *BlobStorageConfiguration) SetGCSConfiguration(v map[string]interface{}) {
	o.GCSConfiguration = v
}

// GetS3Configuration returns the S3Configuration field value if set, zero value otherwise.
func (o *BlobStorageConfiguration) GetS3Configuration() map[string]interface{} {
	if o == nil || IsNil(o.S3Configuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.S3Configuration
}

// GetS3ConfigurationOk returns a tuple with the S3Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobStorageConfiguration) GetS3ConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.S3Configuration) {
		return map[string]interface{}{}, false
	}
	return o.S3Configuration, true
}

// SetS3Configuration gets a reference to the given map[string]interface{} and assigns it to the S3Configuration field.
func (o *BlobStorageConfiguration) SetS3Configuration(v map[string]interface{}) {
	o.S3Configuration = v
}

func (o BlobStorageConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlobStorageConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GCSConfiguration) {
		toSerialize["GCSConfiguration"] = o.GCSConfiguration
	}
	if !IsNil(o.S3Configuration) {
		toSerialize["S3Configuration"] = o.S3Configuration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BlobStorageConfiguration) UnmarshalJSON(data []byte) (err error) {
	varBlobStorageConfiguration := _BlobStorageConfiguration{}

	err = json.Unmarshal(data, &varBlobStorageConfiguration)

	if err != nil {
		return err
	}

	*o = BlobStorageConfiguration(varBlobStorageConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "GCSConfiguration")
		delete(additionalProperties, "S3Configuration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBlobStorageConfiguration struct {
	value *BlobStorageConfiguration
	isSet bool
}

func (v NullableBlobStorageConfiguration) Get() *BlobStorageConfiguration {
	return v.value
}

func (v *NullableBlobStorageConfiguration) Set(val *BlobStorageConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableBlobStorageConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableBlobStorageConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlobStorageConfiguration(val *BlobStorageConfiguration) *NullableBlobStorageConfiguration {
	return &NullableBlobStorageConfiguration{value: val, isSet: true}
}

func (v NullableBlobStorageConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlobStorageConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

