/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the ComputePerformanceProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputePerformanceProfile{}

// ComputePerformanceProfile Performance profile for compute nodes per replica
type ComputePerformanceProfile struct {
	// Processor architecture
	Architecture string `json:"architecture"`
	// Max throughput (in MBps) aggregated across all network interfaces per compute node required
	MaxInstanceAggregateThroughputMBps int64 `json:"maxInstanceAggregateThroughputMBps"`
	// Max dedicated network throughput (in MBps) aggregated across all storage volumes per compute node required
	MaxSanAggregateThroughputMBps int64 `json:"maxSanAggregateThroughputMBps"`
	// Amount of memory (in Mi) per compute node required
	MemoryMiB int64 `json:"memoryMiB"`
	// Tune compute in a specific dimension
	Tuning *string `json:"tuning,omitempty"`
	// Number of virtual CPU cores required
	VirtualCores int64 `json:"virtualCores"`
	AdditionalProperties map[string]interface{}
}

type _ComputePerformanceProfile ComputePerformanceProfile

// NewComputePerformanceProfile instantiates a new ComputePerformanceProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputePerformanceProfile(architecture string, maxInstanceAggregateThroughputMBps int64, maxSanAggregateThroughputMBps int64, memoryMiB int64, virtualCores int64) *ComputePerformanceProfile {
	this := ComputePerformanceProfile{}
	this.Architecture = architecture
	this.MaxInstanceAggregateThroughputMBps = maxInstanceAggregateThroughputMBps
	this.MaxSanAggregateThroughputMBps = maxSanAggregateThroughputMBps
	this.MemoryMiB = memoryMiB
	var tuning string = "BALANCED"
	this.Tuning = &tuning
	this.VirtualCores = virtualCores
	return &this
}

// NewComputePerformanceProfileWithDefaults instantiates a new ComputePerformanceProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputePerformanceProfileWithDefaults() *ComputePerformanceProfile {
	this := ComputePerformanceProfile{}
	var tuning string = "BALANCED"
	this.Tuning = &tuning
	return &this
}

// GetArchitecture returns the Architecture field value
func (o *ComputePerformanceProfile) GetArchitecture() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Architecture
}

// GetArchitectureOk returns a tuple with the Architecture field value
// and a boolean to check if the value has been set.
func (o *ComputePerformanceProfile) GetArchitectureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Architecture, true
}

// SetArchitecture sets field value
func (o *ComputePerformanceProfile) SetArchitecture(v string) {
	o.Architecture = v
}

// GetMaxInstanceAggregateThroughputMBps returns the MaxInstanceAggregateThroughputMBps field value
func (o *ComputePerformanceProfile) GetMaxInstanceAggregateThroughputMBps() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxInstanceAggregateThroughputMBps
}

// GetMaxInstanceAggregateThroughputMBpsOk returns a tuple with the MaxInstanceAggregateThroughputMBps field value
// and a boolean to check if the value has been set.
func (o *ComputePerformanceProfile) GetMaxInstanceAggregateThroughputMBpsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxInstanceAggregateThroughputMBps, true
}

// SetMaxInstanceAggregateThroughputMBps sets field value
func (o *ComputePerformanceProfile) SetMaxInstanceAggregateThroughputMBps(v int64) {
	o.MaxInstanceAggregateThroughputMBps = v
}

// GetMaxSanAggregateThroughputMBps returns the MaxSanAggregateThroughputMBps field value
func (o *ComputePerformanceProfile) GetMaxSanAggregateThroughputMBps() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxSanAggregateThroughputMBps
}

// GetMaxSanAggregateThroughputMBpsOk returns a tuple with the MaxSanAggregateThroughputMBps field value
// and a boolean to check if the value has been set.
func (o *ComputePerformanceProfile) GetMaxSanAggregateThroughputMBpsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxSanAggregateThroughputMBps, true
}

// SetMaxSanAggregateThroughputMBps sets field value
func (o *ComputePerformanceProfile) SetMaxSanAggregateThroughputMBps(v int64) {
	o.MaxSanAggregateThroughputMBps = v
}

// GetMemoryMiB returns the MemoryMiB field value
func (o *ComputePerformanceProfile) GetMemoryMiB() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MemoryMiB
}

// GetMemoryMiBOk returns a tuple with the MemoryMiB field value
// and a boolean to check if the value has been set.
func (o *ComputePerformanceProfile) GetMemoryMiBOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryMiB, true
}

// SetMemoryMiB sets field value
func (o *ComputePerformanceProfile) SetMemoryMiB(v int64) {
	o.MemoryMiB = v
}

// GetTuning returns the Tuning field value if set, zero value otherwise.
func (o *ComputePerformanceProfile) GetTuning() string {
	if o == nil || IsNil(o.Tuning) {
		var ret string
		return ret
	}
	return *o.Tuning
}

// GetTuningOk returns a tuple with the Tuning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePerformanceProfile) GetTuningOk() (*string, bool) {
	if o == nil || IsNil(o.Tuning) {
		return nil, false
	}
	return o.Tuning, true
}

// SetTuning gets a reference to the given string and assigns it to the Tuning field.
func (o *ComputePerformanceProfile) SetTuning(v string) {
	o.Tuning = &v
}

// GetVirtualCores returns the VirtualCores field value
func (o *ComputePerformanceProfile) GetVirtualCores() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.VirtualCores
}

// GetVirtualCoresOk returns a tuple with the VirtualCores field value
// and a boolean to check if the value has been set.
func (o *ComputePerformanceProfile) GetVirtualCoresOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VirtualCores, true
}

// SetVirtualCores sets field value
func (o *ComputePerformanceProfile) SetVirtualCores(v int64) {
	o.VirtualCores = v
}

func (o ComputePerformanceProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputePerformanceProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["architecture"] = o.Architecture
	toSerialize["maxInstanceAggregateThroughputMBps"] = o.MaxInstanceAggregateThroughputMBps
	toSerialize["maxSanAggregateThroughputMBps"] = o.MaxSanAggregateThroughputMBps
	toSerialize["memoryMiB"] = o.MemoryMiB
	if !IsNil(o.Tuning) {
		toSerialize["tuning"] = o.Tuning
	}
	toSerialize["virtualCores"] = o.VirtualCores

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ComputePerformanceProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"architecture",
		"maxInstanceAggregateThroughputMBps",
		"maxSanAggregateThroughputMBps",
		"memoryMiB",
		"virtualCores",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComputePerformanceProfile := _ComputePerformanceProfile{}

	err = json.Unmarshal(data, &varComputePerformanceProfile)

	if err != nil {
		return err
	}

	*o = ComputePerformanceProfile(varComputePerformanceProfile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "architecture")
		delete(additionalProperties, "maxInstanceAggregateThroughputMBps")
		delete(additionalProperties, "maxSanAggregateThroughputMBps")
		delete(additionalProperties, "memoryMiB")
		delete(additionalProperties, "tuning")
		delete(additionalProperties, "virtualCores")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComputePerformanceProfile struct {
	value *ComputePerformanceProfile
	isSet bool
}

func (v NullableComputePerformanceProfile) Get() *ComputePerformanceProfile {
	return v.value
}

func (v *NullableComputePerformanceProfile) Set(val *ComputePerformanceProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableComputePerformanceProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableComputePerformanceProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputePerformanceProfile(val *ComputePerformanceProfile) *NullableComputePerformanceProfile {
	return &NullableComputePerformanceProfile{value: val, isSet: true}
}

func (v NullableComputePerformanceProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputePerformanceProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


