/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the Invoice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Invoice{}

// Invoice struct for Invoice
type Invoice struct {
	// The currency of the charge
	Currency *string `json:"currency,omitempty"`
	// Date of the invoice
	InvoiceDate *string `json:"invoiceDate,omitempty"`
	// ID of the invoice
	InvoiceId *string `json:"invoiceId,omitempty"`
	// Invoice Payment Term
	InvoicePaymentTerm *string `json:"invoicePaymentTerm,omitempty"`
	// This describes the status of the invoice and is set by the payment provider
	InvoiceStatus *string `json:"invoiceStatus,omitempty"`
	// URL for this invoice
	InvoiceUrl *string `json:"invoiceUrl,omitempty"`
	// Amount of tax, if any
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	// Amount of Invoice
	TotalAmount *float64 `json:"totalAmount,omitempty"`
	// Amount of Invoice without tax
	TotalAmountWithoutTax *float64 `json:"totalAmountWithoutTax,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Invoice Invoice

// NewInvoice instantiates a new Invoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoice() *Invoice {
	this := Invoice{}
	return &this
}

// NewInvoiceWithDefaults instantiates a new Invoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceWithDefaults() *Invoice {
	this := Invoice{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Invoice) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Invoice) SetCurrency(v string) {
	o.Currency = &v
}

// GetInvoiceDate returns the InvoiceDate field value if set, zero value otherwise.
func (o *Invoice) GetInvoiceDate() string {
	if o == nil || IsNil(o.InvoiceDate) {
		var ret string
		return ret
	}
	return *o.InvoiceDate
}

// GetInvoiceDateOk returns a tuple with the InvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetInvoiceDateOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDate) {
		return nil, false
	}
	return o.InvoiceDate, true
}

// SetInvoiceDate gets a reference to the given string and assigns it to the InvoiceDate field.
func (o *Invoice) SetInvoiceDate(v string) {
	o.InvoiceDate = &v
}

// GetInvoiceId returns the InvoiceId field value if set, zero value otherwise.
func (o *Invoice) GetInvoiceId() string {
	if o == nil || IsNil(o.InvoiceId) {
		var ret string
		return ret
	}
	return *o.InvoiceId
}

// GetInvoiceIdOk returns a tuple with the InvoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetInvoiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceId) {
		return nil, false
	}
	return o.InvoiceId, true
}

// SetInvoiceId gets a reference to the given string and assigns it to the InvoiceId field.
func (o *Invoice) SetInvoiceId(v string) {
	o.InvoiceId = &v
}

// GetInvoicePaymentTerm returns the InvoicePaymentTerm field value if set, zero value otherwise.
func (o *Invoice) GetInvoicePaymentTerm() string {
	if o == nil || IsNil(o.InvoicePaymentTerm) {
		var ret string
		return ret
	}
	return *o.InvoicePaymentTerm
}

// GetInvoicePaymentTermOk returns a tuple with the InvoicePaymentTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetInvoicePaymentTermOk() (*string, bool) {
	if o == nil || IsNil(o.InvoicePaymentTerm) {
		return nil, false
	}
	return o.InvoicePaymentTerm, true
}

// SetInvoicePaymentTerm gets a reference to the given string and assigns it to the InvoicePaymentTerm field.
func (o *Invoice) SetInvoicePaymentTerm(v string) {
	o.InvoicePaymentTerm = &v
}

// GetInvoiceStatus returns the InvoiceStatus field value if set, zero value otherwise.
func (o *Invoice) GetInvoiceStatus() string {
	if o == nil || IsNil(o.InvoiceStatus) {
		var ret string
		return ret
	}
	return *o.InvoiceStatus
}

// GetInvoiceStatusOk returns a tuple with the InvoiceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetInvoiceStatusOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceStatus) {
		return nil, false
	}
	return o.InvoiceStatus, true
}

// SetInvoiceStatus gets a reference to the given string and assigns it to the InvoiceStatus field.
func (o *Invoice) SetInvoiceStatus(v string) {
	o.InvoiceStatus = &v
}

// GetInvoiceUrl returns the InvoiceUrl field value if set, zero value otherwise.
func (o *Invoice) GetInvoiceUrl() string {
	if o == nil || IsNil(o.InvoiceUrl) {
		var ret string
		return ret
	}
	return *o.InvoiceUrl
}

// GetInvoiceUrlOk returns a tuple with the InvoiceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetInvoiceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceUrl) {
		return nil, false
	}
	return o.InvoiceUrl, true
}

// SetInvoiceUrl gets a reference to the given string and assigns it to the InvoiceUrl field.
func (o *Invoice) SetInvoiceUrl(v string) {
	o.InvoiceUrl = &v
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise.
func (o *Invoice) GetTaxAmount() float64 {
	if o == nil || IsNil(o.TaxAmount) {
		var ret float64
		return ret
	}
	return *o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTaxAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.TaxAmount) {
		return nil, false
	}
	return o.TaxAmount, true
}

// SetTaxAmount gets a reference to the given float64 and assigns it to the TaxAmount field.
func (o *Invoice) SetTaxAmount(v float64) {
	o.TaxAmount = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *Invoice) GetTotalAmount() float64 {
	if o == nil || IsNil(o.TotalAmount) {
		var ret float64
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTotalAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalAmount) {
		return nil, false
	}
	return o.TotalAmount, true
}

// SetTotalAmount gets a reference to the given float64 and assigns it to the TotalAmount field.
func (o *Invoice) SetTotalAmount(v float64) {
	o.TotalAmount = &v
}

// GetTotalAmountWithoutTax returns the TotalAmountWithoutTax field value if set, zero value otherwise.
func (o *Invoice) GetTotalAmountWithoutTax() float64 {
	if o == nil || IsNil(o.TotalAmountWithoutTax) {
		var ret float64
		return ret
	}
	return *o.TotalAmountWithoutTax
}

// GetTotalAmountWithoutTaxOk returns a tuple with the TotalAmountWithoutTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTotalAmountWithoutTaxOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalAmountWithoutTax) {
		return nil, false
	}
	return o.TotalAmountWithoutTax, true
}

// SetTotalAmountWithoutTax gets a reference to the given float64 and assigns it to the TotalAmountWithoutTax field.
func (o *Invoice) SetTotalAmountWithoutTax(v float64) {
	o.TotalAmountWithoutTax = &v
}

func (o Invoice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Invoice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.InvoiceDate) {
		toSerialize["invoiceDate"] = o.InvoiceDate
	}
	if !IsNil(o.InvoiceId) {
		toSerialize["invoiceId"] = o.InvoiceId
	}
	if !IsNil(o.InvoicePaymentTerm) {
		toSerialize["invoicePaymentTerm"] = o.InvoicePaymentTerm
	}
	if !IsNil(o.InvoiceStatus) {
		toSerialize["invoiceStatus"] = o.InvoiceStatus
	}
	if !IsNil(o.InvoiceUrl) {
		toSerialize["invoiceUrl"] = o.InvoiceUrl
	}
	if !IsNil(o.TaxAmount) {
		toSerialize["taxAmount"] = o.TaxAmount
	}
	if !IsNil(o.TotalAmount) {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	if !IsNil(o.TotalAmountWithoutTax) {
		toSerialize["totalAmountWithoutTax"] = o.TotalAmountWithoutTax
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Invoice) UnmarshalJSON(data []byte) (err error) {
	varInvoice := _Invoice{}

	err = json.Unmarshal(data, &varInvoice)

	if err != nil {
		return err
	}

	*o = Invoice(varInvoice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "currency")
		delete(additionalProperties, "invoiceDate")
		delete(additionalProperties, "invoiceId")
		delete(additionalProperties, "invoicePaymentTerm")
		delete(additionalProperties, "invoiceStatus")
		delete(additionalProperties, "invoiceUrl")
		delete(additionalProperties, "taxAmount")
		delete(additionalProperties, "totalAmount")
		delete(additionalProperties, "totalAmountWithoutTax")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInvoice struct {
	value *Invoice
	isSet bool
}

func (v NullableInvoice) Get() *Invoice {
	return v.value
}

func (v *NullableInvoice) Set(val *Invoice) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoice) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoice(val *Invoice) *NullableInvoice {
	return &NullableInvoice{value: val, isSet: true}
}

func (v NullableInvoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


