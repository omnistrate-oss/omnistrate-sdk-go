/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateLimitRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLimitRequest{}

// UpdateLimitRequest struct for UpdateLimitRequest
type UpdateLimitRequest struct {
	// A brief description of the limit
	Description *string `json:"description,omitempty"`
	// The limit family
	Family string `json:"family"`
	// Unique key to identify the limit
	Key string `json:"key"`
	// Name of the limit
	Name *string `json:"name,omitempty"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	// Value of the limit being enforced
	Value int64 `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _UpdateLimitRequest UpdateLimitRequest

// NewUpdateLimitRequest instantiates a new UpdateLimitRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLimitRequest(family string, key string, token string, value int64) *UpdateLimitRequest {
	this := UpdateLimitRequest{}
	this.Family = family
	this.Key = key
	this.Token = token
	this.Value = value
	return &this
}

// NewUpdateLimitRequestWithDefaults instantiates a new UpdateLimitRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLimitRequestWithDefaults() *UpdateLimitRequest {
	this := UpdateLimitRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateLimitRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLimitRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateLimitRequest) SetDescription(v string) {
	o.Description = &v
}

// GetFamily returns the Family field value
func (o *UpdateLimitRequest) GetFamily() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Family
}

// GetFamilyOk returns a tuple with the Family field value
// and a boolean to check if the value has been set.
func (o *UpdateLimitRequest) GetFamilyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Family, true
}

// SetFamily sets field value
func (o *UpdateLimitRequest) SetFamily(v string) {
	o.Family = v
}

// GetKey returns the Key field value
func (o *UpdateLimitRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *UpdateLimitRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *UpdateLimitRequest) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateLimitRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLimitRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateLimitRequest) SetName(v string) {
	o.Name = &v
}

// GetToken returns the Token field value
func (o *UpdateLimitRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *UpdateLimitRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *UpdateLimitRequest) SetToken(v string) {
	o.Token = v
}

// GetValue returns the Value field value
func (o *UpdateLimitRequest) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *UpdateLimitRequest) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *UpdateLimitRequest) SetValue(v int64) {
	o.Value = v
}

func (o UpdateLimitRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLimitRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["family"] = o.Family
	toSerialize["key"] = o.Key
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["token"] = o.Token
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateLimitRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"family",
		"key",
		"token",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateLimitRequest := _UpdateLimitRequest{}

	err = json.Unmarshal(data, &varUpdateLimitRequest)

	if err != nil {
		return err
	}

	*o = UpdateLimitRequest(varUpdateLimitRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "family")
		delete(additionalProperties, "key")
		delete(additionalProperties, "name")
		delete(additionalProperties, "token")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateLimitRequest struct {
	value *UpdateLimitRequest
	isSet bool
}

func (v NullableUpdateLimitRequest) Get() *UpdateLimitRequest {
	return v.value
}

func (v *NullableUpdateLimitRequest) Set(val *UpdateLimitRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLimitRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLimitRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLimitRequest(val *UpdateLimitRequest) *NullableUpdateLimitRequest {
	return &NullableUpdateLimitRequest{value: val, isSet: true}
}

func (v NullableUpdateLimitRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLimitRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

