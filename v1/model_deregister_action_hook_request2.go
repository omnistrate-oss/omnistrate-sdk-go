/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the DeregisterActionHookRequest2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeregisterActionHookRequest2{}

// DeregisterActionHookRequest2 struct for DeregisterActionHookRequest2
type DeregisterActionHookRequest2 struct {
	// The scope of the hook
	Scope string `json:"scope"`
	// The type of hook to execute
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _DeregisterActionHookRequest2 DeregisterActionHookRequest2

// NewDeregisterActionHookRequest2 instantiates a new DeregisterActionHookRequest2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeregisterActionHookRequest2(scope string, type_ string) *DeregisterActionHookRequest2 {
	this := DeregisterActionHookRequest2{}
	this.Scope = scope
	this.Type = type_
	return &this
}

// NewDeregisterActionHookRequest2WithDefaults instantiates a new DeregisterActionHookRequest2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeregisterActionHookRequest2WithDefaults() *DeregisterActionHookRequest2 {
	this := DeregisterActionHookRequest2{}
	return &this
}

// GetScope returns the Scope field value
func (o *DeregisterActionHookRequest2) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *DeregisterActionHookRequest2) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *DeregisterActionHookRequest2) SetScope(v string) {
	o.Scope = v
}

// GetType returns the Type field value
func (o *DeregisterActionHookRequest2) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DeregisterActionHookRequest2) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DeregisterActionHookRequest2) SetType(v string) {
	o.Type = v
}

func (o DeregisterActionHookRequest2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeregisterActionHookRequest2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scope"] = o.Scope
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeregisterActionHookRequest2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scope",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeregisterActionHookRequest2 := _DeregisterActionHookRequest2{}

	err = json.Unmarshal(data, &varDeregisterActionHookRequest2)

	if err != nil {
		return err
	}

	*o = DeregisterActionHookRequest2(varDeregisterActionHookRequest2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "scope")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeregisterActionHookRequest2 struct {
	value *DeregisterActionHookRequest2
	isSet bool
}

func (v NullableDeregisterActionHookRequest2) Get() *DeregisterActionHookRequest2 {
	return v.value
}

func (v *NullableDeregisterActionHookRequest2) Set(val *DeregisterActionHookRequest2) {
	v.value = val
	v.isSet = true
}

func (v NullableDeregisterActionHookRequest2) IsSet() bool {
	return v.isSet
}

func (v *NullableDeregisterActionHookRequest2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeregisterActionHookRequest2(val *DeregisterActionHookRequest2) *NullableDeregisterActionHookRequest2 {
	return &NullableDeregisterActionHookRequest2{value: val, isSet: true}
}

func (v NullableDeregisterActionHookRequest2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeregisterActionHookRequest2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


