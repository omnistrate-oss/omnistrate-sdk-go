/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the DescribeUpgradePathResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeUpgradePathResult{}

// DescribeUpgradePathResult struct for DescribeUpgradePathResult
type DescribeUpgradePathResult struct {
	// A brief description of the upgrade path
	Description *string `json:"description,omitempty"`
	// ID of an Upgrade Path
	Id *string `json:"id,omitempty"`
	// Name of the upgrade path
	Name *string `json:"name,omitempty"`
	// ID of a Service Environment
	ServiceEnvironmentId *string `json:"serviceEnvironmentId,omitempty"`
	// ID of a Service
	ServiceId *string `json:"serviceId,omitempty"`
	// Version of the Entity to operate on
	SourceVersion *string `json:"sourceVersion,omitempty"`
	// Version of the Entity to operate on
	TargetVersion *string `json:"targetVersion,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DescribeUpgradePathResult DescribeUpgradePathResult

// NewDescribeUpgradePathResult instantiates a new DescribeUpgradePathResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeUpgradePathResult() *DescribeUpgradePathResult {
	this := DescribeUpgradePathResult{}
	return &this
}

// NewDescribeUpgradePathResultWithDefaults instantiates a new DescribeUpgradePathResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeUpgradePathResultWithDefaults() *DescribeUpgradePathResult {
	this := DescribeUpgradePathResult{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DescribeUpgradePathResult) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUpgradePathResult) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DescribeUpgradePathResult) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DescribeUpgradePathResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUpgradePathResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DescribeUpgradePathResult) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DescribeUpgradePathResult) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUpgradePathResult) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DescribeUpgradePathResult) SetName(v string) {
	o.Name = &v
}

// GetServiceEnvironmentId returns the ServiceEnvironmentId field value if set, zero value otherwise.
func (o *DescribeUpgradePathResult) GetServiceEnvironmentId() string {
	if o == nil || IsNil(o.ServiceEnvironmentId) {
		var ret string
		return ret
	}
	return *o.ServiceEnvironmentId
}

// GetServiceEnvironmentIdOk returns a tuple with the ServiceEnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUpgradePathResult) GetServiceEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceEnvironmentId) {
		return nil, false
	}
	return o.ServiceEnvironmentId, true
}

// SetServiceEnvironmentId gets a reference to the given string and assigns it to the ServiceEnvironmentId field.
func (o *DescribeUpgradePathResult) SetServiceEnvironmentId(v string) {
	o.ServiceEnvironmentId = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *DescribeUpgradePathResult) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUpgradePathResult) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *DescribeUpgradePathResult) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetSourceVersion returns the SourceVersion field value if set, zero value otherwise.
func (o *DescribeUpgradePathResult) GetSourceVersion() string {
	if o == nil || IsNil(o.SourceVersion) {
		var ret string
		return ret
	}
	return *o.SourceVersion
}

// GetSourceVersionOk returns a tuple with the SourceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUpgradePathResult) GetSourceVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SourceVersion) {
		return nil, false
	}
	return o.SourceVersion, true
}

// SetSourceVersion gets a reference to the given string and assigns it to the SourceVersion field.
func (o *DescribeUpgradePathResult) SetSourceVersion(v string) {
	o.SourceVersion = &v
}

// GetTargetVersion returns the TargetVersion field value if set, zero value otherwise.
func (o *DescribeUpgradePathResult) GetTargetVersion() string {
	if o == nil || IsNil(o.TargetVersion) {
		var ret string
		return ret
	}
	return *o.TargetVersion
}

// GetTargetVersionOk returns a tuple with the TargetVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeUpgradePathResult) GetTargetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.TargetVersion) {
		return nil, false
	}
	return o.TargetVersion, true
}

// SetTargetVersion gets a reference to the given string and assigns it to the TargetVersion field.
func (o *DescribeUpgradePathResult) SetTargetVersion(v string) {
	o.TargetVersion = &v
}

func (o DescribeUpgradePathResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeUpgradePathResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ServiceEnvironmentId) {
		toSerialize["serviceEnvironmentId"] = o.ServiceEnvironmentId
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	if !IsNil(o.SourceVersion) {
		toSerialize["sourceVersion"] = o.SourceVersion
	}
	if !IsNil(o.TargetVersion) {
		toSerialize["targetVersion"] = o.TargetVersion
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DescribeUpgradePathResult) UnmarshalJSON(data []byte) (err error) {
	varDescribeUpgradePathResult := _DescribeUpgradePathResult{}

	err = json.Unmarshal(data, &varDescribeUpgradePathResult)

	if err != nil {
		return err
	}

	*o = DescribeUpgradePathResult(varDescribeUpgradePathResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "serviceEnvironmentId")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "sourceVersion")
		delete(additionalProperties, "targetVersion")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDescribeUpgradePathResult struct {
	value *DescribeUpgradePathResult
	isSet bool
}

func (v NullableDescribeUpgradePathResult) Get() *DescribeUpgradePathResult {
	return v.value
}

func (v *NullableDescribeUpgradePathResult) Set(val *DescribeUpgradePathResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeUpgradePathResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeUpgradePathResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeUpgradePathResult(val *DescribeUpgradePathResult) *NullableDescribeUpgradePathResult {
	return &NullableDescribeUpgradePathResult{value: val, isSet: true}
}

func (v NullableDescribeUpgradePathResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeUpgradePathResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

