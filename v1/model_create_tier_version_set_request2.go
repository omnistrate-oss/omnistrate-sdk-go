/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateTierVersionSetRequest2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTierVersionSetRequest2{}

// CreateTierVersionSetRequest2 struct for CreateTierVersionSetRequest2
type CreateTierVersionSetRequest2 struct {
	// A brief description of the product-tier version set.
	Description *string `json:"description,omitempty"`
	// The name of the product-tier version set.
	Name *string `json:"name,omitempty"`
	// The parent version of this version set.
	ParentVersion *string `json:"parentVersion,omitempty"`
	// The version-set type of the product-tier.
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _CreateTierVersionSetRequest2 CreateTierVersionSetRequest2

// NewCreateTierVersionSetRequest2 instantiates a new CreateTierVersionSetRequest2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTierVersionSetRequest2(type_ string) *CreateTierVersionSetRequest2 {
	this := CreateTierVersionSetRequest2{}
	this.Type = type_
	return &this
}

// NewCreateTierVersionSetRequest2WithDefaults instantiates a new CreateTierVersionSetRequest2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTierVersionSetRequest2WithDefaults() *CreateTierVersionSetRequest2 {
	this := CreateTierVersionSetRequest2{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateTierVersionSetRequest2) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTierVersionSetRequest2) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateTierVersionSetRequest2) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateTierVersionSetRequest2) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTierVersionSetRequest2) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateTierVersionSetRequest2) SetName(v string) {
	o.Name = &v
}

// GetParentVersion returns the ParentVersion field value if set, zero value otherwise.
func (o *CreateTierVersionSetRequest2) GetParentVersion() string {
	if o == nil || IsNil(o.ParentVersion) {
		var ret string
		return ret
	}
	return *o.ParentVersion
}

// GetParentVersionOk returns a tuple with the ParentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTierVersionSetRequest2) GetParentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ParentVersion) {
		return nil, false
	}
	return o.ParentVersion, true
}

// SetParentVersion gets a reference to the given string and assigns it to the ParentVersion field.
func (o *CreateTierVersionSetRequest2) SetParentVersion(v string) {
	o.ParentVersion = &v
}

// GetType returns the Type field value
func (o *CreateTierVersionSetRequest2) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateTierVersionSetRequest2) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateTierVersionSetRequest2) SetType(v string) {
	o.Type = v
}

func (o CreateTierVersionSetRequest2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTierVersionSetRequest2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ParentVersion) {
		toSerialize["parentVersion"] = o.ParentVersion
	}
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateTierVersionSetRequest2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateTierVersionSetRequest2 := _CreateTierVersionSetRequest2{}

	err = json.Unmarshal(data, &varCreateTierVersionSetRequest2)

	if err != nil {
		return err
	}

	*o = CreateTierVersionSetRequest2(varCreateTierVersionSetRequest2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "name")
		delete(additionalProperties, "parentVersion")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateTierVersionSetRequest2 struct {
	value *CreateTierVersionSetRequest2
	isSet bool
}

func (v NullableCreateTierVersionSetRequest2) Get() *CreateTierVersionSetRequest2 {
	return v.value
}

func (v *NullableCreateTierVersionSetRequest2) Set(val *CreateTierVersionSetRequest2) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTierVersionSetRequest2) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTierVersionSetRequest2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTierVersionSetRequest2(val *CreateTierVersionSetRequest2) *NullableCreateTierVersionSetRequest2 {
	return &NullableCreateTierVersionSetRequest2{value: val, isSet: true}
}

func (v NullableCreateTierVersionSetRequest2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTierVersionSetRequest2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


