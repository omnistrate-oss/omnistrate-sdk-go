/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the DescribeNetworkResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeNetworkResult{}

// DescribeNetworkResult struct for DescribeNetworkResult
type DescribeNetworkResult struct {
	// CIDR block for the network
	Cidr *string `json:"cidr,omitempty"`
	// Network to operate on
	Id *string `json:"id,omitempty"`
	// Network config ID for the network
	NetworkConfigId *string `json:"networkConfigId,omitempty"`
	// Service ID context
	ServiceId *string `json:"serviceId,omitempty"`
	// The type of network
	Type *string `json:"type,omitempty"`
	// VUnit ID for the Network
	VunitId *string `json:"vunitId,omitempty"`
}

// NewDescribeNetworkResult instantiates a new DescribeNetworkResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeNetworkResult() *DescribeNetworkResult {
	this := DescribeNetworkResult{}
	return &this
}

// NewDescribeNetworkResultWithDefaults instantiates a new DescribeNetworkResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeNetworkResultWithDefaults() *DescribeNetworkResult {
	this := DescribeNetworkResult{}
	return &this
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *DescribeNetworkResult) GetCidr() string {
	if o == nil || IsNil(o.Cidr) {
		var ret string
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeNetworkResult) GetCidrOk() (*string, bool) {
	if o == nil || IsNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// SetCidr gets a reference to the given string and assigns it to the Cidr field.
func (o *DescribeNetworkResult) SetCidr(v string) {
	o.Cidr = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DescribeNetworkResult) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeNetworkResult) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DescribeNetworkResult) SetId(v string) {
	o.Id = &v
}

// GetNetworkConfigId returns the NetworkConfigId field value if set, zero value otherwise.
func (o *DescribeNetworkResult) GetNetworkConfigId() string {
	if o == nil || IsNil(o.NetworkConfigId) {
		var ret string
		return ret
	}
	return *o.NetworkConfigId
}

// GetNetworkConfigIdOk returns a tuple with the NetworkConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeNetworkResult) GetNetworkConfigIdOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkConfigId) {
		return nil, false
	}
	return o.NetworkConfigId, true
}

// SetNetworkConfigId gets a reference to the given string and assigns it to the NetworkConfigId field.
func (o *DescribeNetworkResult) SetNetworkConfigId(v string) {
	o.NetworkConfigId = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *DescribeNetworkResult) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeNetworkResult) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *DescribeNetworkResult) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DescribeNetworkResult) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeNetworkResult) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DescribeNetworkResult) SetType(v string) {
	o.Type = &v
}

// GetVunitId returns the VunitId field value if set, zero value otherwise.
func (o *DescribeNetworkResult) GetVunitId() string {
	if o == nil || IsNil(o.VunitId) {
		var ret string
		return ret
	}
	return *o.VunitId
}

// GetVunitIdOk returns a tuple with the VunitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeNetworkResult) GetVunitIdOk() (*string, bool) {
	if o == nil || IsNil(o.VunitId) {
		return nil, false
	}
	return o.VunitId, true
}

// SetVunitId gets a reference to the given string and assigns it to the VunitId field.
func (o *DescribeNetworkResult) SetVunitId(v string) {
	o.VunitId = &v
}

func (o DescribeNetworkResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeNetworkResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NetworkConfigId) {
		toSerialize["networkConfigId"] = o.NetworkConfigId
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VunitId) {
		toSerialize["vunitId"] = o.VunitId
	}
	return toSerialize, nil
}

type NullableDescribeNetworkResult struct {
	value *DescribeNetworkResult
	isSet bool
}

func (v NullableDescribeNetworkResult) Get() *DescribeNetworkResult {
	return v.value
}

func (v *NullableDescribeNetworkResult) Set(val *DescribeNetworkResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeNetworkResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeNetworkResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeNetworkResult(val *DescribeNetworkResult) *NullableDescribeNetworkResult {
	return &NullableDescribeNetworkResult{value: val, isSet: true}
}

func (v NullableDescribeNetworkResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeNetworkResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


