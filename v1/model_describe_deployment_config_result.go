/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DescribeDeploymentConfigResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeDeploymentConfigResult{}

// DescribeDeploymentConfigResult struct for DescribeDeploymentConfigResult
type DescribeDeploymentConfigResult struct {
	// A brief description of the deployment config
	Description string `json:"description"`
	// The deployment configuration ID
	Id string `json:"id"`
	InfraRollConfiguration InfraRollConfiguration `json:"infraRollConfiguration"`
	// Name of the deployment config
	Name string `json:"name"`
	RolloutPriorityList []string `json:"rolloutPriorityList"`
}

type _DescribeDeploymentConfigResult DescribeDeploymentConfigResult

// NewDescribeDeploymentConfigResult instantiates a new DescribeDeploymentConfigResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeDeploymentConfigResult(description string, id string, infraRollConfiguration InfraRollConfiguration, name string, rolloutPriorityList []string) *DescribeDeploymentConfigResult {
	this := DescribeDeploymentConfigResult{}
	this.Description = description
	this.Id = id
	this.InfraRollConfiguration = infraRollConfiguration
	this.Name = name
	this.RolloutPriorityList = rolloutPriorityList
	return &this
}

// NewDescribeDeploymentConfigResultWithDefaults instantiates a new DescribeDeploymentConfigResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeDeploymentConfigResultWithDefaults() *DescribeDeploymentConfigResult {
	this := DescribeDeploymentConfigResult{}
	return &this
}

// GetDescription returns the Description field value
func (o *DescribeDeploymentConfigResult) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DescribeDeploymentConfigResult) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DescribeDeploymentConfigResult) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *DescribeDeploymentConfigResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DescribeDeploymentConfigResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DescribeDeploymentConfigResult) SetId(v string) {
	o.Id = v
}

// GetInfraRollConfiguration returns the InfraRollConfiguration field value
func (o *DescribeDeploymentConfigResult) GetInfraRollConfiguration() InfraRollConfiguration {
	if o == nil {
		var ret InfraRollConfiguration
		return ret
	}

	return o.InfraRollConfiguration
}

// GetInfraRollConfigurationOk returns a tuple with the InfraRollConfiguration field value
// and a boolean to check if the value has been set.
func (o *DescribeDeploymentConfigResult) GetInfraRollConfigurationOk() (*InfraRollConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfraRollConfiguration, true
}

// SetInfraRollConfiguration sets field value
func (o *DescribeDeploymentConfigResult) SetInfraRollConfiguration(v InfraRollConfiguration) {
	o.InfraRollConfiguration = v
}

// GetName returns the Name field value
func (o *DescribeDeploymentConfigResult) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DescribeDeploymentConfigResult) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DescribeDeploymentConfigResult) SetName(v string) {
	o.Name = v
}

// GetRolloutPriorityList returns the RolloutPriorityList field value
func (o *DescribeDeploymentConfigResult) GetRolloutPriorityList() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RolloutPriorityList
}

// GetRolloutPriorityListOk returns a tuple with the RolloutPriorityList field value
// and a boolean to check if the value has been set.
func (o *DescribeDeploymentConfigResult) GetRolloutPriorityListOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RolloutPriorityList, true
}

// SetRolloutPriorityList sets field value
func (o *DescribeDeploymentConfigResult) SetRolloutPriorityList(v []string) {
	o.RolloutPriorityList = v
}

func (o DescribeDeploymentConfigResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeDeploymentConfigResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	toSerialize["infraRollConfiguration"] = o.InfraRollConfiguration
	toSerialize["name"] = o.Name
	toSerialize["rolloutPriorityList"] = o.RolloutPriorityList
	return toSerialize, nil
}

func (o *DescribeDeploymentConfigResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"id",
		"infraRollConfiguration",
		"name",
		"rolloutPriorityList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeDeploymentConfigResult := _DescribeDeploymentConfigResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeDeploymentConfigResult)

	if err != nil {
		return err
	}

	*o = DescribeDeploymentConfigResult(varDescribeDeploymentConfigResult)

	return err
}

type NullableDescribeDeploymentConfigResult struct {
	value *DescribeDeploymentConfigResult
	isSet bool
}

func (v NullableDescribeDeploymentConfigResult) Get() *DescribeDeploymentConfigResult {
	return v.value
}

func (v *NullableDescribeDeploymentConfigResult) Set(val *DescribeDeploymentConfigResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeDeploymentConfigResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeDeploymentConfigResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeDeploymentConfigResult(val *DescribeDeploymentConfigResult) *NullableDescribeDeploymentConfigResult {
	return &NullableDescribeDeploymentConfigResult{value: val, isSet: true}
}

func (v NullableDescribeDeploymentConfigResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeDeploymentConfigResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


