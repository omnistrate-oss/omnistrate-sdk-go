/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdatePasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePasswordRequest{}

// UpdatePasswordRequest struct for UpdatePasswordRequest
type UpdatePasswordRequest struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	CurrentPasswordHash *string `json:"currentPasswordHash,omitempty"`
	Password string `json:"password"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _UpdatePasswordRequest UpdatePasswordRequest

// NewUpdatePasswordRequest instantiates a new UpdatePasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePasswordRequest(password string, token string) *UpdatePasswordRequest {
	this := UpdatePasswordRequest{}
	this.Password = password
	this.Token = token
	return &this
}

// NewUpdatePasswordRequestWithDefaults instantiates a new UpdatePasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePasswordRequestWithDefaults() *UpdatePasswordRequest {
	this := UpdatePasswordRequest{}
	return &this
}

// GetCurrentPassword returns the CurrentPassword field value if set, zero value otherwise.
func (o *UpdatePasswordRequest) GetCurrentPassword() string {
	if o == nil || IsNil(o.CurrentPassword) {
		var ret string
		return ret
	}
	return *o.CurrentPassword
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePasswordRequest) GetCurrentPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPassword) {
		return nil, false
	}
	return o.CurrentPassword, true
}

// SetCurrentPassword gets a reference to the given string and assigns it to the CurrentPassword field.
func (o *UpdatePasswordRequest) SetCurrentPassword(v string) {
	o.CurrentPassword = &v
}

// GetCurrentPasswordHash returns the CurrentPasswordHash field value if set, zero value otherwise.
func (o *UpdatePasswordRequest) GetCurrentPasswordHash() string {
	if o == nil || IsNil(o.CurrentPasswordHash) {
		var ret string
		return ret
	}
	return *o.CurrentPasswordHash
}

// GetCurrentPasswordHashOk returns a tuple with the CurrentPasswordHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePasswordRequest) GetCurrentPasswordHashOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentPasswordHash) {
		return nil, false
	}
	return o.CurrentPasswordHash, true
}

// SetCurrentPasswordHash gets a reference to the given string and assigns it to the CurrentPasswordHash field.
func (o *UpdatePasswordRequest) SetCurrentPasswordHash(v string) {
	o.CurrentPasswordHash = &v
}

// GetPassword returns the Password field value
func (o *UpdatePasswordRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UpdatePasswordRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UpdatePasswordRequest) SetPassword(v string) {
	o.Password = v
}

// GetToken returns the Token field value
func (o *UpdatePasswordRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *UpdatePasswordRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *UpdatePasswordRequest) SetToken(v string) {
	o.Token = v
}

func (o UpdatePasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentPassword) {
		toSerialize["currentPassword"] = o.CurrentPassword
	}
	if !IsNil(o.CurrentPasswordHash) {
		toSerialize["currentPasswordHash"] = o.CurrentPasswordHash
	}
	toSerialize["password"] = o.Password
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdatePasswordRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdatePasswordRequest := _UpdatePasswordRequest{}

	err = json.Unmarshal(data, &varUpdatePasswordRequest)

	if err != nil {
		return err
	}

	*o = UpdatePasswordRequest(varUpdatePasswordRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "currentPassword")
		delete(additionalProperties, "currentPasswordHash")
		delete(additionalProperties, "password")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdatePasswordRequest struct {
	value *UpdatePasswordRequest
	isSet bool
}

func (v NullableUpdatePasswordRequest) Get() *UpdatePasswordRequest {
	return v.value
}

func (v *NullableUpdatePasswordRequest) Set(val *UpdatePasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePasswordRequest(val *UpdatePasswordRequest) *NullableUpdatePasswordRequest {
	return &NullableUpdatePasswordRequest{value: val, isSet: true}
}

func (v NullableUpdatePasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

