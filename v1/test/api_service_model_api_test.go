/*
Omnistrate Registration API

Testing ServiceModelApiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/omnistrate-oss/omnistrate-sdk-go/v1"
)

func Test_v1_ServiceModelApiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ServiceModelApiAPIService ServiceModelApiAddAccountConfigToServiceModel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ServiceModelApiAPI.ServiceModelApiAddAccountConfigToServiceModel(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceModelApiAPIService ServiceModelApiCopyServiceModel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var sourceId string

		resp, httpRes, err := apiClient.ServiceModelApiAPI.ServiceModelApiCopyServiceModel(context.Background(), serviceId, sourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceModelApiAPIService ServiceModelApiCreateServiceModel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.ServiceModelApiAPI.ServiceModelApiCreateServiceModel(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceModelApiAPIService ServiceModelApiDeleteServiceModel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ServiceModelApiAPI.ServiceModelApiDeleteServiceModel(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceModelApiAPIService ServiceModelApiDescribeServiceModel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ServiceModelApiAPI.ServiceModelApiDescribeServiceModel(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceModelApiAPIService ServiceModelApiDisableServiceModelFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ServiceModelApiAPI.ServiceModelApiDisableServiceModelFeature(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceModelApiAPIService ServiceModelApiEnableServiceModelFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ServiceModelApiAPI.ServiceModelApiEnableServiceModelFeature(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceModelApiAPIService ServiceModelApiListServiceModel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var serviceApiId string

		resp, httpRes, err := apiClient.ServiceModelApiAPI.ServiceModelApiListServiceModel(context.Background(), serviceId, serviceApiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceModelApiAPIService ServiceModelApiReleaseServiceModelStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ServiceModelApiAPI.ServiceModelApiReleaseServiceModelStatus(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceModelApiAPIService ServiceModelApiRemoveAccountConfigFromServiceModel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ServiceModelApiAPI.ServiceModelApiRemoveAccountConfigFromServiceModel(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceModelApiAPIService ServiceModelApiSetActiveAccountConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string
		var accountConfigId string

		httpRes, err := apiClient.ServiceModelApiAPI.ServiceModelApiSetActiveAccountConfig(context.Background(), serviceId, id, accountConfigId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceModelApiAPIService ServiceModelApiUpdateServiceModel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ServiceModelApiAPI.ServiceModelApiUpdateServiceModel(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
