/*
Omnistrate Registration API

Testing TierVersionSetApiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/omnistrate-oss/omnistrate-sdk-go/v1"
)

func Test_v1_TierVersionSetApiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiCreateTierVersionSet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiCreateTierVersionSet(context.Background(), serviceId, productTierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiCustomerListTierVersionSets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiCustomerListTierVersionSets(context.Background(), serviceId, productTierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiDeprecateTierVersionSet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string
		var version string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiDeprecateTierVersionSet(context.Background(), serviceId, productTierId, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiDescribeTierVersionSet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string
		var version string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiDescribeTierVersionSet(context.Background(), serviceId, productTierId, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiDescribeTierVersionSetMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiDescribeTierVersionSetMetadata(context.Background(), serviceId, productTierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiDiffTierVersionSets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string
		var version string
		var anotherVersion string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiDiffTierVersionSets(context.Background(), serviceId, productTierId, version, anotherVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiGetTierVersionSetSpec", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiGetTierVersionSetSpec(context.Background(), serviceId, productTierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiListTierVersionSetSpecs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiListTierVersionSetSpecs(context.Background(), serviceId, productTierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiListTierVersionSets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiListTierVersionSets(context.Background(), serviceId, productTierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiPromoteTierVersionSet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string
		var version string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiPromoteTierVersionSet(context.Background(), serviceId, productTierId, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiReleaseTierVersionSet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string
		var version string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiReleaseTierVersionSet(context.Background(), serviceId, productTierId, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiUpdateTierVersionSet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string
		var version string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiUpdateTierVersionSet(context.Background(), serviceId, productTierId, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TierVersionSetApiAPIService TierVersionSetApiUpdateTierVersionSetMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string

		resp, httpRes, err := apiClient.TierVersionSetApiAPI.TierVersionSetApiUpdateTierVersionSetMetadata(context.Background(), serviceId, productTierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
