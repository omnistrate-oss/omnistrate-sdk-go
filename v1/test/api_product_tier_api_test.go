/*
Omnistrate Registration API

Testing ProductTierApiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/omnistrate/omnistrate-sdk-go/v1"
)

func Test_v1_ProductTierApiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProductTierApiAPIService ProductTierApiCopyProductTier", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var sourceId string

		resp, httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiCopyProductTier(context.Background(), serviceId, sourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductTierApiAPIService ProductTierApiCreateProductTier", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiCreateProductTier(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductTierApiAPIService ProductTierApiCreateProductTierBillingPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiCreateProductTierBillingPlan(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductTierApiAPIService ProductTierApiDeleteProductTier", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiDeleteProductTier(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductTierApiAPIService ProductTierApiDeleteProductTierBillingPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string
		var id string

		httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiDeleteProductTierBillingPlan(context.Background(), serviceId, productTierId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductTierApiAPIService ProductTierApiDescribeProductTier", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiDescribeProductTier(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductTierApiAPIService ProductTierApiDescribeProductTierBillingPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string
		var id string

		resp, httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiDescribeProductTierBillingPlan(context.Background(), serviceId, productTierId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductTierApiAPIService ProductTierApiDisableProductTierFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiDisableProductTierFeature(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductTierApiAPIService ProductTierApiEnableProductTierFeature", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiEnableProductTierFeature(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductTierApiAPIService ProductTierApiListProductTier", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var serviceModelId string

		resp, httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiListProductTier(context.Background(), serviceId, serviceModelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductTierApiAPIService ProductTierApiListProductTierBillingPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiListProductTierBillingPlan(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductTierApiAPIService ProductTierApiUpdateProductTier", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiUpdateProductTier(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductTierApiAPIService ProductTierApiUpdateProductTierBillingPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var productTierId string
		var id string

		resp, httpRes, err := apiClient.ProductTierApiAPI.ProductTierApiUpdateProductTierBillingPlan(context.Background(), serviceId, productTierId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
