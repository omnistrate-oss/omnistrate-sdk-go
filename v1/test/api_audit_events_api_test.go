/*
Omnistrate Registration API

Testing AuditEventsApiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v1

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/omnistrate-oss/omnistrate-sdk-go/v1"
)

func Test_v1_AuditEventsApiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuditEventsApiAPIService AuditEventsApiDeprecatedDescribeAuditEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.AuditEventsApiAPI.AuditEventsApiDeprecatedDescribeAuditEvent(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuditEventsApiAPIService AuditEventsApiDeprecatedListAuditEventsForInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.AuditEventsApiAPI.AuditEventsApiDeprecatedListAuditEventsForInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuditEventsApiAPIService AuditEventsApiDeprecatedListAuditEventsForServicePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string

		resp, httpRes, err := apiClient.AuditEventsApiAPI.AuditEventsApiDeprecatedListAuditEventsForServicePlan(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuditEventsApiAPIService AuditEventsApiDescribeAuditEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.AuditEventsApiAPI.AuditEventsApiDescribeAuditEvent(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuditEventsApiAPIService AuditEventsApiListAllAuditEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AuditEventsApiAPI.AuditEventsApiListAllAuditEvents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuditEventsApiAPIService AuditEventsApiListAuditEventsForInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceId string

		resp, httpRes, err := apiClient.AuditEventsApiAPI.AuditEventsApiListAuditEventsForInstance(context.Background(), instanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuditEventsApiAPIService AuditEventsApiListAuditEventsForServicePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceProviderId string
		var serviceKey string
		var serviceAPIVersion string
		var serviceEnvironmentKey string
		var serviceModelKey string
		var productTierKey string

		resp, httpRes, err := apiClient.AuditEventsApiAPI.AuditEventsApiListAuditEventsForServicePlan(context.Background(), serviceProviderId, serviceKey, serviceAPIVersion, serviceEnvironmentKey, serviceModelKey, productTierKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
