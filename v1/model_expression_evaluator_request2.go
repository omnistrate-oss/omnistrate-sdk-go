/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the ExpressionEvaluatorRequest2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpressionEvaluatorRequest2{}

// ExpressionEvaluatorRequest2 struct for ExpressionEvaluatorRequest2
type ExpressionEvaluatorRequest2 struct {
	// Either this or the instanceID must be provided to evaluate the expression(s)
	DeploymentCellID *string `json:"deploymentCellID,omitempty"`
	// Expression containing system and api parameter variable references
	Expression *string `json:"expression,omitempty"`
	// If provided, the `expression` field is ignored and all expressions in the map are evaluated. The map keys are preserved in the result.
	ExpressionMap map[string]interface{} `json:"expressionMap,omitempty"`
	// Either this or the deploymentCellID must be provided to evaluate the expression(s)
	InstanceID *string `json:"instanceID,omitempty"`
	// Mandatory if the instanceID is not provided
	ProductTierID *string `json:"productTierID,omitempty"`
	// The resource key to use for evaluating resource parameters
	ResourceKey string `json:"resourceKey"`
	// The service ID to use for evaluating service parameters
	ServiceID string `json:"serviceID"`
	AdditionalProperties map[string]interface{}
}

type _ExpressionEvaluatorRequest2 ExpressionEvaluatorRequest2

// NewExpressionEvaluatorRequest2 instantiates a new ExpressionEvaluatorRequest2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpressionEvaluatorRequest2(resourceKey string, serviceID string) *ExpressionEvaluatorRequest2 {
	this := ExpressionEvaluatorRequest2{}
	this.ResourceKey = resourceKey
	this.ServiceID = serviceID
	return &this
}

// NewExpressionEvaluatorRequest2WithDefaults instantiates a new ExpressionEvaluatorRequest2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpressionEvaluatorRequest2WithDefaults() *ExpressionEvaluatorRequest2 {
	this := ExpressionEvaluatorRequest2{}
	return &this
}

// GetDeploymentCellID returns the DeploymentCellID field value if set, zero value otherwise.
func (o *ExpressionEvaluatorRequest2) GetDeploymentCellID() string {
	if o == nil || IsNil(o.DeploymentCellID) {
		var ret string
		return ret
	}
	return *o.DeploymentCellID
}

// GetDeploymentCellIDOk returns a tuple with the DeploymentCellID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpressionEvaluatorRequest2) GetDeploymentCellIDOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentCellID) {
		return nil, false
	}
	return o.DeploymentCellID, true
}

// SetDeploymentCellID gets a reference to the given string and assigns it to the DeploymentCellID field.
func (o *ExpressionEvaluatorRequest2) SetDeploymentCellID(v string) {
	o.DeploymentCellID = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *ExpressionEvaluatorRequest2) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpressionEvaluatorRequest2) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *ExpressionEvaluatorRequest2) SetExpression(v string) {
	o.Expression = &v
}

// GetExpressionMap returns the ExpressionMap field value if set, zero value otherwise.
func (o *ExpressionEvaluatorRequest2) GetExpressionMap() map[string]interface{} {
	if o == nil || IsNil(o.ExpressionMap) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExpressionMap
}

// GetExpressionMapOk returns a tuple with the ExpressionMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpressionEvaluatorRequest2) GetExpressionMapOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExpressionMap) {
		return map[string]interface{}{}, false
	}
	return o.ExpressionMap, true
}

// SetExpressionMap gets a reference to the given map[string]interface{} and assigns it to the ExpressionMap field.
func (o *ExpressionEvaluatorRequest2) SetExpressionMap(v map[string]interface{}) {
	o.ExpressionMap = v
}

// GetInstanceID returns the InstanceID field value if set, zero value otherwise.
func (o *ExpressionEvaluatorRequest2) GetInstanceID() string {
	if o == nil || IsNil(o.InstanceID) {
		var ret string
		return ret
	}
	return *o.InstanceID
}

// GetInstanceIDOk returns a tuple with the InstanceID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpressionEvaluatorRequest2) GetInstanceIDOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceID) {
		return nil, false
	}
	return o.InstanceID, true
}

// SetInstanceID gets a reference to the given string and assigns it to the InstanceID field.
func (o *ExpressionEvaluatorRequest2) SetInstanceID(v string) {
	o.InstanceID = &v
}

// GetProductTierID returns the ProductTierID field value if set, zero value otherwise.
func (o *ExpressionEvaluatorRequest2) GetProductTierID() string {
	if o == nil || IsNil(o.ProductTierID) {
		var ret string
		return ret
	}
	return *o.ProductTierID
}

// GetProductTierIDOk returns a tuple with the ProductTierID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpressionEvaluatorRequest2) GetProductTierIDOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTierID) {
		return nil, false
	}
	return o.ProductTierID, true
}

// SetProductTierID gets a reference to the given string and assigns it to the ProductTierID field.
func (o *ExpressionEvaluatorRequest2) SetProductTierID(v string) {
	o.ProductTierID = &v
}

// GetResourceKey returns the ResourceKey field value
func (o *ExpressionEvaluatorRequest2) GetResourceKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceKey
}

// GetResourceKeyOk returns a tuple with the ResourceKey field value
// and a boolean to check if the value has been set.
func (o *ExpressionEvaluatorRequest2) GetResourceKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceKey, true
}

// SetResourceKey sets field value
func (o *ExpressionEvaluatorRequest2) SetResourceKey(v string) {
	o.ResourceKey = v
}

// GetServiceID returns the ServiceID field value
func (o *ExpressionEvaluatorRequest2) GetServiceID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceID
}

// GetServiceIDOk returns a tuple with the ServiceID field value
// and a boolean to check if the value has been set.
func (o *ExpressionEvaluatorRequest2) GetServiceIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceID, true
}

// SetServiceID sets field value
func (o *ExpressionEvaluatorRequest2) SetServiceID(v string) {
	o.ServiceID = v
}

func (o ExpressionEvaluatorRequest2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpressionEvaluatorRequest2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeploymentCellID) {
		toSerialize["deploymentCellID"] = o.DeploymentCellID
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.ExpressionMap) {
		toSerialize["expressionMap"] = o.ExpressionMap
	}
	if !IsNil(o.InstanceID) {
		toSerialize["instanceID"] = o.InstanceID
	}
	if !IsNil(o.ProductTierID) {
		toSerialize["productTierID"] = o.ProductTierID
	}
	toSerialize["resourceKey"] = o.ResourceKey
	toSerialize["serviceID"] = o.ServiceID

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExpressionEvaluatorRequest2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceKey",
		"serviceID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExpressionEvaluatorRequest2 := _ExpressionEvaluatorRequest2{}

	err = json.Unmarshal(data, &varExpressionEvaluatorRequest2)

	if err != nil {
		return err
	}

	*o = ExpressionEvaluatorRequest2(varExpressionEvaluatorRequest2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "deploymentCellID")
		delete(additionalProperties, "expression")
		delete(additionalProperties, "expressionMap")
		delete(additionalProperties, "instanceID")
		delete(additionalProperties, "productTierID")
		delete(additionalProperties, "resourceKey")
		delete(additionalProperties, "serviceID")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExpressionEvaluatorRequest2 struct {
	value *ExpressionEvaluatorRequest2
	isSet bool
}

func (v NullableExpressionEvaluatorRequest2) Get() *ExpressionEvaluatorRequest2 {
	return v.value
}

func (v *NullableExpressionEvaluatorRequest2) Set(val *ExpressionEvaluatorRequest2) {
	v.value = val
	v.isSet = true
}

func (v NullableExpressionEvaluatorRequest2) IsSet() bool {
	return v.isSet
}

func (v *NullableExpressionEvaluatorRequest2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpressionEvaluatorRequest2(val *ExpressionEvaluatorRequest2) *NullableExpressionEvaluatorRequest2 {
	return &NullableExpressionEvaluatorRequest2{value: val, isSet: true}
}

func (v NullableExpressionEvaluatorRequest2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpressionEvaluatorRequest2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

