/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceModelFeatureDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceModelFeatureDetail{}

// ServiceModelFeatureDetail struct for ServiceModelFeatureDetail
type ServiceModelFeatureDetail struct {
	// The configuration parameters of the service model feature
	Configuration map[string]interface{} `json:"configuration"`
	// Name of the service model feature
	Feature string `json:"feature"`
	AdditionalProperties map[string]interface{}
}

type _ServiceModelFeatureDetail ServiceModelFeatureDetail

// NewServiceModelFeatureDetail instantiates a new ServiceModelFeatureDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceModelFeatureDetail(configuration map[string]interface{}, feature string) *ServiceModelFeatureDetail {
	this := ServiceModelFeatureDetail{}
	this.Configuration = configuration
	this.Feature = feature
	return &this
}

// NewServiceModelFeatureDetailWithDefaults instantiates a new ServiceModelFeatureDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceModelFeatureDetailWithDefaults() *ServiceModelFeatureDetail {
	this := ServiceModelFeatureDetail{}
	return &this
}

// GetConfiguration returns the Configuration field value
func (o *ServiceModelFeatureDetail) GetConfiguration() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *ServiceModelFeatureDetail) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// SetConfiguration sets field value
func (o *ServiceModelFeatureDetail) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

// GetFeature returns the Feature field value
func (o *ServiceModelFeatureDetail) GetFeature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value
// and a boolean to check if the value has been set.
func (o *ServiceModelFeatureDetail) GetFeatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Feature, true
}

// SetFeature sets field value
func (o *ServiceModelFeatureDetail) SetFeature(v string) {
	o.Feature = v
}

func (o ServiceModelFeatureDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceModelFeatureDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configuration"] = o.Configuration
	toSerialize["feature"] = o.Feature

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceModelFeatureDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"configuration",
		"feature",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceModelFeatureDetail := _ServiceModelFeatureDetail{}

	err = json.Unmarshal(data, &varServiceModelFeatureDetail)

	if err != nil {
		return err
	}

	*o = ServiceModelFeatureDetail(varServiceModelFeatureDetail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "feature")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceModelFeatureDetail struct {
	value *ServiceModelFeatureDetail
	isSet bool
}

func (v NullableServiceModelFeatureDetail) Get() *ServiceModelFeatureDetail {
	return v.value
}

func (v *NullableServiceModelFeatureDetail) Set(val *ServiceModelFeatureDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceModelFeatureDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceModelFeatureDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceModelFeatureDetail(val *ServiceModelFeatureDetail) *NullableServiceModelFeatureDetail {
	return &NullableServiceModelFeatureDetail{value: val, isSet: true}
}

func (v NullableServiceModelFeatureDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceModelFeatureDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

