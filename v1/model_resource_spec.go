/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the ResourceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceSpec{}

// ResourceSpec Resource requirements
type ResourceSpec struct {
	Limits *ResourceSpecLimits `json:"limits,omitempty"`
	Requests *ResourceSpecRequests `json:"requests,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResourceSpec ResourceSpec

// NewResourceSpec instantiates a new ResourceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceSpec() *ResourceSpec {
	this := ResourceSpec{}
	return &this
}

// NewResourceSpecWithDefaults instantiates a new ResourceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceSpecWithDefaults() *ResourceSpec {
	this := ResourceSpec{}
	return &this
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *ResourceSpec) GetLimits() ResourceSpecLimits {
	if o == nil || IsNil(o.Limits) {
		var ret ResourceSpecLimits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceSpec) GetLimitsOk() (*ResourceSpecLimits, bool) {
	if o == nil || IsNil(o.Limits) {
		return nil, false
	}
	return o.Limits, true
}

// SetLimits gets a reference to the given ResourceSpecLimits and assigns it to the Limits field.
func (o *ResourceSpec) SetLimits(v ResourceSpecLimits) {
	o.Limits = &v
}

// GetRequests returns the Requests field value if set, zero value otherwise.
func (o *ResourceSpec) GetRequests() ResourceSpecRequests {
	if o == nil || IsNil(o.Requests) {
		var ret ResourceSpecRequests
		return ret
	}
	return *o.Requests
}

// GetRequestsOk returns a tuple with the Requests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceSpec) GetRequestsOk() (*ResourceSpecRequests, bool) {
	if o == nil || IsNil(o.Requests) {
		return nil, false
	}
	return o.Requests, true
}

// SetRequests gets a reference to the given ResourceSpecRequests and assigns it to the Requests field.
func (o *ResourceSpec) SetRequests(v ResourceSpecRequests) {
	o.Requests = &v
}

func (o ResourceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	if !IsNil(o.Requests) {
		toSerialize["requests"] = o.Requests
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResourceSpec) UnmarshalJSON(data []byte) (err error) {
	varResourceSpec := _ResourceSpec{}

	err = json.Unmarshal(data, &varResourceSpec)

	if err != nil {
		return err
	}

	*o = ResourceSpec(varResourceSpec)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "limits")
		delete(additionalProperties, "requests")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourceSpec struct {
	value *ResourceSpec
	isSet bool
}

func (v NullableResourceSpec) Get() *ResourceSpec {
	return v.value
}

func (v *NullableResourceSpec) Set(val *ResourceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceSpec(val *ResourceSpec) *NullableResourceSpec {
	return &NullableResourceSpec{value: val, isSet: true}
}

func (v NullableResourceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


