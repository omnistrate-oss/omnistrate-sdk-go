/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateSubscriptionRequest2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSubscriptionRequest2{}

// CreateSubscriptionRequest2 struct for CreateSubscriptionRequest2
type CreateSubscriptionRequest2 struct {
	// The product tier ID
	ProductTierId string `json:"productTierId"`
	// The service ID
	ServiceId string `json:"serviceId"`
	AdditionalProperties map[string]interface{}
}

type _CreateSubscriptionRequest2 CreateSubscriptionRequest2

// NewCreateSubscriptionRequest2 instantiates a new CreateSubscriptionRequest2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubscriptionRequest2(productTierId string, serviceId string) *CreateSubscriptionRequest2 {
	this := CreateSubscriptionRequest2{}
	this.ProductTierId = productTierId
	this.ServiceId = serviceId
	return &this
}

// NewCreateSubscriptionRequest2WithDefaults instantiates a new CreateSubscriptionRequest2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubscriptionRequest2WithDefaults() *CreateSubscriptionRequest2 {
	this := CreateSubscriptionRequest2{}
	return &this
}

// GetProductTierId returns the ProductTierId field value
func (o *CreateSubscriptionRequest2) GetProductTierId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value
// and a boolean to check if the value has been set.
func (o *CreateSubscriptionRequest2) GetProductTierIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTierId, true
}

// SetProductTierId sets field value
func (o *CreateSubscriptionRequest2) SetProductTierId(v string) {
	o.ProductTierId = v
}

// GetServiceId returns the ServiceId field value
func (o *CreateSubscriptionRequest2) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *CreateSubscriptionRequest2) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *CreateSubscriptionRequest2) SetServiceId(v string) {
	o.ServiceId = v
}

func (o CreateSubscriptionRequest2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSubscriptionRequest2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["productTierId"] = o.ProductTierId
	toSerialize["serviceId"] = o.ServiceId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateSubscriptionRequest2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"productTierId",
		"serviceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSubscriptionRequest2 := _CreateSubscriptionRequest2{}

	err = json.Unmarshal(data, &varCreateSubscriptionRequest2)

	if err != nil {
		return err
	}

	*o = CreateSubscriptionRequest2(varCreateSubscriptionRequest2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "productTierId")
		delete(additionalProperties, "serviceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateSubscriptionRequest2 struct {
	value *CreateSubscriptionRequest2
	isSet bool
}

func (v NullableCreateSubscriptionRequest2) Get() *CreateSubscriptionRequest2 {
	return v.value
}

func (v *NullableCreateSubscriptionRequest2) Set(val *CreateSubscriptionRequest2) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubscriptionRequest2) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubscriptionRequest2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubscriptionRequest2(val *CreateSubscriptionRequest2) *NullableCreateSubscriptionRequest2 {
	return &NullableCreateSubscriptionRequest2{value: val, isSet: true}
}

func (v NullableCreateSubscriptionRequest2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubscriptionRequest2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


