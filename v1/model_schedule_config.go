/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the ScheduleConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleConfig{}

// ScheduleConfig Configuration for recurring job scheduling
type ScheduleConfig struct {
	// Cron expression for advanced scheduling (e.g., '0 2 * * *' for daily at 2 AM). Takes precedence over simpleInterval if both are provided.
	CronExpression *string `json:"cronExpression,omitempty" validate:"regexp=^(\\\\*|[0-5]?\\\\d)(\\\\s+(\\\\*|[0-1]?\\\\d|2[0-3]))(\\\\s+(\\\\*|[1-2]?\\\\d|3[01]))(\\\\s+(\\\\*|[1-9]|1[0-2]))(\\\\s+(\\\\*|[0-6]))$"`
	// Simple interval scheduling using human-readable format (e.g., '5m', '1h', '30m', '2h'). Supports: s(seconds), m(minutes), h(hours), d(days)
	SimpleInterval *string `json:"simpleInterval,omitempty" validate:"regexp=^(\\\\d+)(s|m|h|d)$"`
	// Timezone for cron scheduling (IANA Time Zone format, e.g., 'UTC', 'America/New_York'). Only applies to cronExpression.
	Timezone *string `json:"timezone,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ScheduleConfig ScheduleConfig

// NewScheduleConfig instantiates a new ScheduleConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleConfig() *ScheduleConfig {
	this := ScheduleConfig{}
	var timezone string = "UTC"
	this.Timezone = &timezone
	return &this
}

// NewScheduleConfigWithDefaults instantiates a new ScheduleConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleConfigWithDefaults() *ScheduleConfig {
	this := ScheduleConfig{}
	var timezone string = "UTC"
	this.Timezone = &timezone
	return &this
}

// GetCronExpression returns the CronExpression field value if set, zero value otherwise.
func (o *ScheduleConfig) GetCronExpression() string {
	if o == nil || IsNil(o.CronExpression) {
		var ret string
		return ret
	}
	return *o.CronExpression
}

// GetCronExpressionOk returns a tuple with the CronExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleConfig) GetCronExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.CronExpression) {
		return nil, false
	}
	return o.CronExpression, true
}

// SetCronExpression gets a reference to the given string and assigns it to the CronExpression field.
func (o *ScheduleConfig) SetCronExpression(v string) {
	o.CronExpression = &v
}

// GetSimpleInterval returns the SimpleInterval field value if set, zero value otherwise.
func (o *ScheduleConfig) GetSimpleInterval() string {
	if o == nil || IsNil(o.SimpleInterval) {
		var ret string
		return ret
	}
	return *o.SimpleInterval
}

// GetSimpleIntervalOk returns a tuple with the SimpleInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleConfig) GetSimpleIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.SimpleInterval) {
		return nil, false
	}
	return o.SimpleInterval, true
}

// SetSimpleInterval gets a reference to the given string and assigns it to the SimpleInterval field.
func (o *ScheduleConfig) SetSimpleInterval(v string) {
	o.SimpleInterval = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *ScheduleConfig) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleConfig) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *ScheduleConfig) SetTimezone(v string) {
	o.Timezone = &v
}

func (o ScheduleConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CronExpression) {
		toSerialize["cronExpression"] = o.CronExpression
	}
	if !IsNil(o.SimpleInterval) {
		toSerialize["simpleInterval"] = o.SimpleInterval
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScheduleConfig) UnmarshalJSON(data []byte) (err error) {
	varScheduleConfig := _ScheduleConfig{}

	err = json.Unmarshal(data, &varScheduleConfig)

	if err != nil {
		return err
	}

	*o = ScheduleConfig(varScheduleConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cronExpression")
		delete(additionalProperties, "simpleInterval")
		delete(additionalProperties, "timezone")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScheduleConfig struct {
	value *ScheduleConfig
	isSet bool
}

func (v NullableScheduleConfig) Get() *ScheduleConfig {
	return v.value
}

func (v *NullableScheduleConfig) Set(val *ScheduleConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleConfig(val *ScheduleConfig) *NullableScheduleConfig {
	return &NullableScheduleConfig{value: val, isSet: true}
}

func (v NullableScheduleConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


