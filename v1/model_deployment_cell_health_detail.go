/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the DeploymentCellHealthDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentCellHealthDetail{}

// DeploymentCellHealthDetail struct for DeploymentCellHealthDetail
type DeploymentCellHealthDetail struct {
	// Name of the Infra Provider
	CloudProvider *string `json:"cloudProvider,omitempty"`
	// ID of a Host Cluster
	HostClusterID *string `json:"hostClusterID,omitempty"`
	// The health summary of the instances by instance ID
	InstanceHealth *map[string]InstanceHealthSummary `json:"instanceHealth,omitempty"`
	// The region code of the host cluster
	RegionCode *string `json:"regionCode,omitempty"`
	// The name of the service environment
	ServiceEnvironmentName *string `json:"serviceEnvironmentName,omitempty"`
	// The name of the service
	ServiceName *string `json:"serviceName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeploymentCellHealthDetail DeploymentCellHealthDetail

// NewDeploymentCellHealthDetail instantiates a new DeploymentCellHealthDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentCellHealthDetail() *DeploymentCellHealthDetail {
	this := DeploymentCellHealthDetail{}
	return &this
}

// NewDeploymentCellHealthDetailWithDefaults instantiates a new DeploymentCellHealthDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentCellHealthDetailWithDefaults() *DeploymentCellHealthDetail {
	this := DeploymentCellHealthDetail{}
	return &this
}

// GetCloudProvider returns the CloudProvider field value if set, zero value otherwise.
func (o *DeploymentCellHealthDetail) GetCloudProvider() string {
	if o == nil || IsNil(o.CloudProvider) {
		var ret string
		return ret
	}
	return *o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentCellHealthDetail) GetCloudProviderOk() (*string, bool) {
	if o == nil || IsNil(o.CloudProvider) {
		return nil, false
	}
	return o.CloudProvider, true
}

// SetCloudProvider gets a reference to the given string and assigns it to the CloudProvider field.
func (o *DeploymentCellHealthDetail) SetCloudProvider(v string) {
	o.CloudProvider = &v
}

// GetHostClusterID returns the HostClusterID field value if set, zero value otherwise.
func (o *DeploymentCellHealthDetail) GetHostClusterID() string {
	if o == nil || IsNil(o.HostClusterID) {
		var ret string
		return ret
	}
	return *o.HostClusterID
}

// GetHostClusterIDOk returns a tuple with the HostClusterID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentCellHealthDetail) GetHostClusterIDOk() (*string, bool) {
	if o == nil || IsNil(o.HostClusterID) {
		return nil, false
	}
	return o.HostClusterID, true
}

// SetHostClusterID gets a reference to the given string and assigns it to the HostClusterID field.
func (o *DeploymentCellHealthDetail) SetHostClusterID(v string) {
	o.HostClusterID = &v
}

// GetInstanceHealth returns the InstanceHealth field value if set, zero value otherwise.
func (o *DeploymentCellHealthDetail) GetInstanceHealth() map[string]InstanceHealthSummary {
	if o == nil || IsNil(o.InstanceHealth) {
		var ret map[string]InstanceHealthSummary
		return ret
	}
	return *o.InstanceHealth
}

// GetInstanceHealthOk returns a tuple with the InstanceHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentCellHealthDetail) GetInstanceHealthOk() (*map[string]InstanceHealthSummary, bool) {
	if o == nil || IsNil(o.InstanceHealth) {
		return nil, false
	}
	return o.InstanceHealth, true
}

// SetInstanceHealth gets a reference to the given map[string]InstanceHealthSummary and assigns it to the InstanceHealth field.
func (o *DeploymentCellHealthDetail) SetInstanceHealth(v map[string]InstanceHealthSummary) {
	o.InstanceHealth = &v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *DeploymentCellHealthDetail) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentCellHealthDetail) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *DeploymentCellHealthDetail) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetServiceEnvironmentName returns the ServiceEnvironmentName field value if set, zero value otherwise.
func (o *DeploymentCellHealthDetail) GetServiceEnvironmentName() string {
	if o == nil || IsNil(o.ServiceEnvironmentName) {
		var ret string
		return ret
	}
	return *o.ServiceEnvironmentName
}

// GetServiceEnvironmentNameOk returns a tuple with the ServiceEnvironmentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentCellHealthDetail) GetServiceEnvironmentNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceEnvironmentName) {
		return nil, false
	}
	return o.ServiceEnvironmentName, true
}

// SetServiceEnvironmentName gets a reference to the given string and assigns it to the ServiceEnvironmentName field.
func (o *DeploymentCellHealthDetail) SetServiceEnvironmentName(v string) {
	o.ServiceEnvironmentName = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *DeploymentCellHealthDetail) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentCellHealthDetail) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *DeploymentCellHealthDetail) SetServiceName(v string) {
	o.ServiceName = &v
}

func (o DeploymentCellHealthDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentCellHealthDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudProvider) {
		toSerialize["cloudProvider"] = o.CloudProvider
	}
	if !IsNil(o.HostClusterID) {
		toSerialize["hostClusterID"] = o.HostClusterID
	}
	if !IsNil(o.InstanceHealth) {
		toSerialize["instanceHealth"] = o.InstanceHealth
	}
	if !IsNil(o.RegionCode) {
		toSerialize["regionCode"] = o.RegionCode
	}
	if !IsNil(o.ServiceEnvironmentName) {
		toSerialize["serviceEnvironmentName"] = o.ServiceEnvironmentName
	}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeploymentCellHealthDetail) UnmarshalJSON(data []byte) (err error) {
	varDeploymentCellHealthDetail := _DeploymentCellHealthDetail{}

	err = json.Unmarshal(data, &varDeploymentCellHealthDetail)

	if err != nil {
		return err
	}

	*o = DeploymentCellHealthDetail(varDeploymentCellHealthDetail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cloudProvider")
		delete(additionalProperties, "hostClusterID")
		delete(additionalProperties, "instanceHealth")
		delete(additionalProperties, "regionCode")
		delete(additionalProperties, "serviceEnvironmentName")
		delete(additionalProperties, "serviceName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeploymentCellHealthDetail struct {
	value *DeploymentCellHealthDetail
	isSet bool
}

func (v NullableDeploymentCellHealthDetail) Get() *DeploymentCellHealthDetail {
	return v.value
}

func (v *NullableDeploymentCellHealthDetail) Set(val *DeploymentCellHealthDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentCellHealthDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentCellHealthDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentCellHealthDetail(val *DeploymentCellHealthDetail) *NullableDeploymentCellHealthDetail {
	return &NullableDeploymentCellHealthDetail{value: val, isSet: true}
}

func (v NullableDeploymentCellHealthDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentCellHealthDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


