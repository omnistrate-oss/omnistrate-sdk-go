/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the ListLimitRequest2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListLimitRequest2{}

// ListLimitRequest2 struct for ListLimitRequest2
type ListLimitRequest2 struct {
	// Limit family
	Family string `json:"family"`
	AdditionalProperties map[string]interface{}
}

type _ListLimitRequest2 ListLimitRequest2

// NewListLimitRequest2 instantiates a new ListLimitRequest2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListLimitRequest2(family string) *ListLimitRequest2 {
	this := ListLimitRequest2{}
	this.Family = family
	return &this
}

// NewListLimitRequest2WithDefaults instantiates a new ListLimitRequest2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListLimitRequest2WithDefaults() *ListLimitRequest2 {
	this := ListLimitRequest2{}
	return &this
}

// GetFamily returns the Family field value
func (o *ListLimitRequest2) GetFamily() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Family
}

// GetFamilyOk returns a tuple with the Family field value
// and a boolean to check if the value has been set.
func (o *ListLimitRequest2) GetFamilyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Family, true
}

// SetFamily sets field value
func (o *ListLimitRequest2) SetFamily(v string) {
	o.Family = v
}

func (o ListLimitRequest2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListLimitRequest2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["family"] = o.Family

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListLimitRequest2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"family",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListLimitRequest2 := _ListLimitRequest2{}

	err = json.Unmarshal(data, &varListLimitRequest2)

	if err != nil {
		return err
	}

	*o = ListLimitRequest2(varListLimitRequest2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "family")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListLimitRequest2 struct {
	value *ListLimitRequest2
	isSet bool
}

func (v NullableListLimitRequest2) Get() *ListLimitRequest2 {
	return v.value
}

func (v *NullableListLimitRequest2) Set(val *ListLimitRequest2) {
	v.value = val
	v.isSet = true
}

func (v NullableListLimitRequest2) IsSet() bool {
	return v.isSet
}

func (v *NullableListLimitRequest2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListLimitRequest2(val *ListLimitRequest2) *NullableListLimitRequest2 {
	return &NullableListLimitRequest2{value: val, isSet: true}
}

func (v NullableListLimitRequest2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListLimitRequest2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

