/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the ListRegionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListRegionsRequest{}

// ListRegionsRequest struct for ListRegionsRequest
type ListRegionsRequest struct {
	// Name of the Infra Provider
	CloudProviderName string `json:"cloudProviderName"`
	// The model type encapsulating this service
	ModelType *string `json:"modelType,omitempty"`
	// ID of a Product Tier
	ProductTierId *string `json:"productTierId,omitempty"`
	// ID of a Service
	ServiceId *string `json:"serviceId,omitempty"`
	// ID of a Service Model
	ServiceModelId *string `json:"serviceModelId,omitempty"`
	// JWT token used to perform authorization
	Token string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _ListRegionsRequest ListRegionsRequest

// NewListRegionsRequest instantiates a new ListRegionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListRegionsRequest(cloudProviderName string, token string) *ListRegionsRequest {
	this := ListRegionsRequest{}
	this.CloudProviderName = cloudProviderName
	this.Token = token
	return &this
}

// NewListRegionsRequestWithDefaults instantiates a new ListRegionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListRegionsRequestWithDefaults() *ListRegionsRequest {
	this := ListRegionsRequest{}
	return &this
}

// GetCloudProviderName returns the CloudProviderName field value
func (o *ListRegionsRequest) GetCloudProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProviderName
}

// GetCloudProviderNameOk returns a tuple with the CloudProviderName field value
// and a boolean to check if the value has been set.
func (o *ListRegionsRequest) GetCloudProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProviderName, true
}

// SetCloudProviderName sets field value
func (o *ListRegionsRequest) SetCloudProviderName(v string) {
	o.CloudProviderName = v
}

// GetModelType returns the ModelType field value if set, zero value otherwise.
func (o *ListRegionsRequest) GetModelType() string {
	if o == nil || IsNil(o.ModelType) {
		var ret string
		return ret
	}
	return *o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRegionsRequest) GetModelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ModelType) {
		return nil, false
	}
	return o.ModelType, true
}

// SetModelType gets a reference to the given string and assigns it to the ModelType field.
func (o *ListRegionsRequest) SetModelType(v string) {
	o.ModelType = &v
}

// GetProductTierId returns the ProductTierId field value if set, zero value otherwise.
func (o *ListRegionsRequest) GetProductTierId() string {
	if o == nil || IsNil(o.ProductTierId) {
		var ret string
		return ret
	}
	return *o.ProductTierId
}

// GetProductTierIdOk returns a tuple with the ProductTierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRegionsRequest) GetProductTierIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTierId) {
		return nil, false
	}
	return o.ProductTierId, true
}

// SetProductTierId gets a reference to the given string and assigns it to the ProductTierId field.
func (o *ListRegionsRequest) SetProductTierId(v string) {
	o.ProductTierId = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *ListRegionsRequest) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRegionsRequest) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *ListRegionsRequest) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceModelId returns the ServiceModelId field value if set, zero value otherwise.
func (o *ListRegionsRequest) GetServiceModelId() string {
	if o == nil || IsNil(o.ServiceModelId) {
		var ret string
		return ret
	}
	return *o.ServiceModelId
}

// GetServiceModelIdOk returns a tuple with the ServiceModelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRegionsRequest) GetServiceModelIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceModelId) {
		return nil, false
	}
	return o.ServiceModelId, true
}

// SetServiceModelId gets a reference to the given string and assigns it to the ServiceModelId field.
func (o *ListRegionsRequest) SetServiceModelId(v string) {
	o.ServiceModelId = &v
}

// GetToken returns the Token field value
func (o *ListRegionsRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *ListRegionsRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *ListRegionsRequest) SetToken(v string) {
	o.Token = v
}

func (o ListRegionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListRegionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloudProviderName"] = o.CloudProviderName
	if !IsNil(o.ModelType) {
		toSerialize["modelType"] = o.ModelType
	}
	if !IsNil(o.ProductTierId) {
		toSerialize["productTierId"] = o.ProductTierId
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	if !IsNil(o.ServiceModelId) {
		toSerialize["serviceModelId"] = o.ServiceModelId
	}
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListRegionsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloudProviderName",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListRegionsRequest := _ListRegionsRequest{}

	err = json.Unmarshal(data, &varListRegionsRequest)

	if err != nil {
		return err
	}

	*o = ListRegionsRequest(varListRegionsRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cloudProviderName")
		delete(additionalProperties, "modelType")
		delete(additionalProperties, "productTierId")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "serviceModelId")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListRegionsRequest struct {
	value *ListRegionsRequest
	isSet bool
}

func (v NullableListRegionsRequest) Get() *ListRegionsRequest {
	return v.value
}

func (v *NullableListRegionsRequest) Set(val *ListRegionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableListRegionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableListRegionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRegionsRequest(val *ListRegionsRequest) *NullableListRegionsRequest {
	return &NullableListRegionsRequest{value: val, isSet: true}
}

func (v NullableListRegionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRegionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

