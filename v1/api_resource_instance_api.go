/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ResourceInstanceApiAPI interface {

	/*
	ResourceInstanceApiAddCapacityToResourceInstance AddCapacityToResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiAddCapacityToResourceInstanceRequest
	*/
	ResourceInstanceApiAddCapacityToResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiAddCapacityToResourceInstanceRequest

	// ResourceInstanceApiAddCapacityToResourceInstanceExecute executes the request
	ResourceInstanceApiAddCapacityToResourceInstanceExecute(r ApiResourceInstanceApiAddCapacityToResourceInstanceRequest) (*http.Response, error)

	/*
	ResourceInstanceApiAddCustomDNSToResourceInstance AddCustomDNSToResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest
	*/
	ResourceInstanceApiAddCustomDNSToResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest

	// ResourceInstanceApiAddCustomDNSToResourceInstanceExecute executes the request
	ResourceInstanceApiAddCustomDNSToResourceInstanceExecute(r ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest) (*http.Response, error)

	/*
	ResourceInstanceApiCreateResourceInstance CreateResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@return ApiResourceInstanceApiCreateResourceInstanceRequest
	*/
	ResourceInstanceApiCreateResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string) ApiResourceInstanceApiCreateResourceInstanceRequest

	// ResourceInstanceApiCreateResourceInstanceExecute executes the request
	//  @return CreateServicesOrchestrationResponseBody
	ResourceInstanceApiCreateResourceInstanceExecute(r ApiResourceInstanceApiCreateResourceInstanceRequest) (*CreateServicesOrchestrationResponseBody, *http.Response, error)

	/*
	ResourceInstanceApiDeleteResourceInstance DeleteResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiDeleteResourceInstanceRequest
	*/
	ResourceInstanceApiDeleteResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiDeleteResourceInstanceRequest

	// ResourceInstanceApiDeleteResourceInstanceExecute executes the request
	ResourceInstanceApiDeleteResourceInstanceExecute(r ApiResourceInstanceApiDeleteResourceInstanceRequest) (*http.Response, error)

	/*
	ResourceInstanceApiDescribeResourceInstance DescribeResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiDescribeResourceInstanceRequest
	*/
	ResourceInstanceApiDescribeResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiDescribeResourceInstanceRequest

	// ResourceInstanceApiDescribeResourceInstanceExecute executes the request
	//  @return DescribeResourceInstanceResult
	ResourceInstanceApiDescribeResourceInstanceExecute(r ApiResourceInstanceApiDescribeResourceInstanceRequest) (*DescribeResourceInstanceResult, *http.Response, error)

	/*
	ResourceInstanceApiFailoverResourceInstance FailoverResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiFailoverResourceInstanceRequest
	*/
	ResourceInstanceApiFailoverResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiFailoverResourceInstanceRequest

	// ResourceInstanceApiFailoverResourceInstanceExecute executes the request
	ResourceInstanceApiFailoverResourceInstanceExecute(r ApiResourceInstanceApiFailoverResourceInstanceRequest) (*http.Response, error)

	/*
	ResourceInstanceApiGenerateTokenForDeploymentCellDashboard GenerateTokenForDeploymentCellDashboard resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The instance ID whose deployment cell dashboard token is to be generated
	@return ApiResourceInstanceApiGenerateTokenForDeploymentCellDashboardRequest
	*/
	ResourceInstanceApiGenerateTokenForDeploymentCellDashboard(ctx context.Context, id string) ApiResourceInstanceApiGenerateTokenForDeploymentCellDashboardRequest

	// ResourceInstanceApiGenerateTokenForDeploymentCellDashboardExecute executes the request
	//  @return GenerateTokenForDeploymentCellDashboardResult
	ResourceInstanceApiGenerateTokenForDeploymentCellDashboardExecute(r ApiResourceInstanceApiGenerateTokenForDeploymentCellDashboardRequest) (*GenerateTokenForDeploymentCellDashboardResult, *http.Response, error)

	/*
	ResourceInstanceApiListAllResourceInstances ListAllResourceInstances resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiResourceInstanceApiListAllResourceInstancesRequest
	*/
	ResourceInstanceApiListAllResourceInstances(ctx context.Context) ApiResourceInstanceApiListAllResourceInstancesRequest

	// ResourceInstanceApiListAllResourceInstancesExecute executes the request
	//  @return ListAllResourceInstancesResult
	ResourceInstanceApiListAllResourceInstancesExecute(r ApiResourceInstanceApiListAllResourceInstancesRequest) (*ListAllResourceInstancesResult, *http.Response, error)

	/*
	ResourceInstanceApiListResourceInstanceSnapshots ListResourceInstanceSnapshots resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service key
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiListResourceInstanceSnapshotsRequest
	*/
	ResourceInstanceApiListResourceInstanceSnapshots(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiListResourceInstanceSnapshotsRequest

	// ResourceInstanceApiListResourceInstanceSnapshotsExecute executes the request
	//  @return ListResourceInstanceSnapshotsResult
	ResourceInstanceApiListResourceInstanceSnapshotsExecute(r ApiResourceInstanceApiListResourceInstanceSnapshotsRequest) (*ListResourceInstanceSnapshotsResult, *http.Response, error)

	/*
	ResourceInstanceApiListResourceInstances ListResourceInstances resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service key
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@return ApiResourceInstanceApiListResourceInstancesRequest
	*/
	ResourceInstanceApiListResourceInstances(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string) ApiResourceInstanceApiListResourceInstancesRequest

	// ResourceInstanceApiListResourceInstancesExecute executes the request
	//  @return ListResourceInstancesResult
	ResourceInstanceApiListResourceInstancesExecute(r ApiResourceInstanceApiListResourceInstancesRequest) (*ListResourceInstancesResult, *http.Response, error)

	/*
	ResourceInstanceApiRemoveCapacityFromResourceInstance RemoveCapacityFromResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest
	*/
	ResourceInstanceApiRemoveCapacityFromResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest

	// ResourceInstanceApiRemoveCapacityFromResourceInstanceExecute executes the request
	ResourceInstanceApiRemoveCapacityFromResourceInstanceExecute(r ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest) (*http.Response, error)

	/*
	ResourceInstanceApiRemoveCustomDNSFromResourceInstance RemoveCustomDNSFromResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiRemoveCustomDNSFromResourceInstanceRequest
	*/
	ResourceInstanceApiRemoveCustomDNSFromResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiRemoveCustomDNSFromResourceInstanceRequest

	// ResourceInstanceApiRemoveCustomDNSFromResourceInstanceExecute executes the request
	ResourceInstanceApiRemoveCustomDNSFromResourceInstanceExecute(r ApiResourceInstanceApiRemoveCustomDNSFromResourceInstanceRequest) (*http.Response, error)

	/*
	ResourceInstanceApiResourceInstanceProvisionerSetupKit ResourceInstanceProvisionerSetupKit resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@return ApiResourceInstanceApiResourceInstanceProvisionerSetupKitRequest
	*/
	ResourceInstanceApiResourceInstanceProvisionerSetupKit(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string) ApiResourceInstanceApiResourceInstanceProvisionerSetupKitRequest

	// ResourceInstanceApiResourceInstanceProvisionerSetupKitExecute executes the request
	ResourceInstanceApiResourceInstanceProvisionerSetupKitExecute(r ApiResourceInstanceApiResourceInstanceProvisionerSetupKitRequest) (*http.Response, error)

	/*
	ResourceInstanceApiRestartResourceInstance RestartResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiRestartResourceInstanceRequest
	*/
	ResourceInstanceApiRestartResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiRestartResourceInstanceRequest

	// ResourceInstanceApiRestartResourceInstanceExecute executes the request
	ResourceInstanceApiRestartResourceInstanceExecute(r ApiResourceInstanceApiRestartResourceInstanceRequest) (*http.Response, error)

	/*
	ResourceInstanceApiRestoreResourceInstance RestoreResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiRestoreResourceInstanceRequest
	*/
	ResourceInstanceApiRestoreResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiRestoreResourceInstanceRequest

	// ResourceInstanceApiRestoreResourceInstanceExecute executes the request
	//  @return CreateServicesOrchestrationResponseBody
	ResourceInstanceApiRestoreResourceInstanceExecute(r ApiResourceInstanceApiRestoreResourceInstanceRequest) (*CreateServicesOrchestrationResponseBody, *http.Response, error)

	/*
	ResourceInstanceApiRestoreResourceInstanceFromSnapshot RestoreResourceInstanceFromSnapshot resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param snapshotId The snapshot ID
	@return ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest
	*/
	ResourceInstanceApiRestoreResourceInstanceFromSnapshot(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, snapshotId string) ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest

	// ResourceInstanceApiRestoreResourceInstanceFromSnapshotExecute executes the request
	//  @return CreateServicesOrchestrationResponseBody
	ResourceInstanceApiRestoreResourceInstanceFromSnapshotExecute(r ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest) (*CreateServicesOrchestrationResponseBody, *http.Response, error)

	/*
	ResourceInstanceApiStartResourceInstance StartResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiStartResourceInstanceRequest
	*/
	ResourceInstanceApiStartResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiStartResourceInstanceRequest

	// ResourceInstanceApiStartResourceInstanceExecute executes the request
	ResourceInstanceApiStartResourceInstanceExecute(r ApiResourceInstanceApiStartResourceInstanceRequest) (*http.Response, error)

	/*
	ResourceInstanceApiStopResourceInstance StopResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiStopResourceInstanceRequest
	*/
	ResourceInstanceApiStopResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiStopResourceInstanceRequest

	// ResourceInstanceApiStopResourceInstanceExecute executes the request
	ResourceInstanceApiStopResourceInstanceExecute(r ApiResourceInstanceApiStopResourceInstanceRequest) (*http.Response, error)

	/*
	ResourceInstanceApiUpdateAccountConfigResourceInstance UpdateAccountConfigResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The instance ID
	@return ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest
	*/
	ResourceInstanceApiUpdateAccountConfigResourceInstance(ctx context.Context, id string) ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest

	// ResourceInstanceApiUpdateAccountConfigResourceInstanceExecute executes the request
	ResourceInstanceApiUpdateAccountConfigResourceInstanceExecute(r ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest) (*http.Response, error)

	/*
	ResourceInstanceApiUpdateResourceInstance UpdateResourceInstance resource-instance-api

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceProviderId The service provider ID
	@param serviceKey The service name
	@param serviceAPIVersion The service API version
	@param serviceEnvironmentKey The service environment name
	@param serviceModelKey The service model name
	@param productTierKey The product tier name
	@param resourceKey The resource key
	@param id The instance ID
	@return ApiResourceInstanceApiUpdateResourceInstanceRequest
	*/
	ResourceInstanceApiUpdateResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiUpdateResourceInstanceRequest

	// ResourceInstanceApiUpdateResourceInstanceExecute executes the request
	ResourceInstanceApiUpdateResourceInstanceExecute(r ApiResourceInstanceApiUpdateResourceInstanceRequest) (*http.Response, error)
}

// ResourceInstanceApiAPIService ResourceInstanceApiAPI service
type ResourceInstanceApiAPIService service

type ApiResourceInstanceApiAddCapacityToResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	addCapacityToResourceInstanceRequest2 *AddCapacityToResourceInstanceRequest2
	subscriptionId *string
}

func (r ApiResourceInstanceApiAddCapacityToResourceInstanceRequest) AddCapacityToResourceInstanceRequest2(addCapacityToResourceInstanceRequest2 AddCapacityToResourceInstanceRequest2) ApiResourceInstanceApiAddCapacityToResourceInstanceRequest {
	r.addCapacityToResourceInstanceRequest2 = &addCapacityToResourceInstanceRequest2
	return r
}

// Subscription Id
func (r ApiResourceInstanceApiAddCapacityToResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiAddCapacityToResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiAddCapacityToResourceInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceInstanceApiAddCapacityToResourceInstanceExecute(r)
}

/*
ResourceInstanceApiAddCapacityToResourceInstance AddCapacityToResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiAddCapacityToResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiAddCapacityToResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiAddCapacityToResourceInstanceRequest {
	return ApiResourceInstanceApiAddCapacityToResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiAddCapacityToResourceInstanceExecute(r ApiResourceInstanceApiAddCapacityToResourceInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiAddCapacityToResourceInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/add-capacity"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addCapacityToResourceInstanceRequest2 == nil {
		return nil, reportError("addCapacityToResourceInstanceRequest2 is required and must be specified")
	}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addCapacityToResourceInstanceRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	addCustomDNSToResourceInstanceRequest2 *AddCustomDNSToResourceInstanceRequest2
	subscriptionId *string
}

func (r ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest) AddCustomDNSToResourceInstanceRequest2(addCustomDNSToResourceInstanceRequest2 AddCustomDNSToResourceInstanceRequest2) ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest {
	r.addCustomDNSToResourceInstanceRequest2 = &addCustomDNSToResourceInstanceRequest2
	return r
}

// Subscription Id
func (r ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceInstanceApiAddCustomDNSToResourceInstanceExecute(r)
}

/*
ResourceInstanceApiAddCustomDNSToResourceInstance AddCustomDNSToResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiAddCustomDNSToResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest {
	return ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiAddCustomDNSToResourceInstanceExecute(r ApiResourceInstanceApiAddCustomDNSToResourceInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiAddCustomDNSToResourceInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/custom-dns"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addCustomDNSToResourceInstanceRequest2 == nil {
		return nil, reportError("addCustomDNSToResourceInstanceRequest2 is required and must be specified")
	}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addCustomDNSToResourceInstanceRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResourceInstanceApiCreateResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	createResourceInstanceRequest2 *CreateResourceInstanceRequest2
	subscriptionId *string
}

func (r ApiResourceInstanceApiCreateResourceInstanceRequest) CreateResourceInstanceRequest2(createResourceInstanceRequest2 CreateResourceInstanceRequest2) ApiResourceInstanceApiCreateResourceInstanceRequest {
	r.createResourceInstanceRequest2 = &createResourceInstanceRequest2
	return r
}

// Subscription Id
func (r ApiResourceInstanceApiCreateResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiCreateResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiCreateResourceInstanceRequest) Execute() (*CreateServicesOrchestrationResponseBody, *http.Response, error) {
	return r.ApiService.ResourceInstanceApiCreateResourceInstanceExecute(r)
}

/*
ResourceInstanceApiCreateResourceInstance CreateResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @return ApiResourceInstanceApiCreateResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiCreateResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string) ApiResourceInstanceApiCreateResourceInstanceRequest {
	return ApiResourceInstanceApiCreateResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
	}
}

// Execute executes the request
//  @return CreateServicesOrchestrationResponseBody
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiCreateResourceInstanceExecute(r ApiResourceInstanceApiCreateResourceInstanceRequest) (*CreateServicesOrchestrationResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateServicesOrchestrationResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiCreateResourceInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createResourceInstanceRequest2 == nil {
		return localVarReturnValue, nil, reportError("createResourceInstanceRequest2 is required and must be specified")
	}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createResourceInstanceRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceInstanceApiDeleteResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	subscriptionId *string
}

// Subscription Id
func (r ApiResourceInstanceApiDeleteResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiDeleteResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiDeleteResourceInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceInstanceApiDeleteResourceInstanceExecute(r)
}

/*
ResourceInstanceApiDeleteResourceInstance DeleteResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiDeleteResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiDeleteResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiDeleteResourceInstanceRequest {
	return ApiResourceInstanceApiDeleteResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiDeleteResourceInstanceExecute(r ApiResourceInstanceApiDeleteResourceInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiDeleteResourceInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResourceInstanceApiDescribeResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	subscriptionId *string
}

// Subscription Id
func (r ApiResourceInstanceApiDescribeResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiDescribeResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiDescribeResourceInstanceRequest) Execute() (*DescribeResourceInstanceResult, *http.Response, error) {
	return r.ApiService.ResourceInstanceApiDescribeResourceInstanceExecute(r)
}

/*
ResourceInstanceApiDescribeResourceInstance DescribeResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiDescribeResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiDescribeResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiDescribeResourceInstanceRequest {
	return ApiResourceInstanceApiDescribeResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
//  @return DescribeResourceInstanceResult
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiDescribeResourceInstanceExecute(r ApiResourceInstanceApiDescribeResourceInstanceRequest) (*DescribeResourceInstanceResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DescribeResourceInstanceResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiDescribeResourceInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceInstanceApiFailoverResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	failoverResourceInstanceRequest2 *FailoverResourceInstanceRequest2
	subscriptionId *string
}

func (r ApiResourceInstanceApiFailoverResourceInstanceRequest) FailoverResourceInstanceRequest2(failoverResourceInstanceRequest2 FailoverResourceInstanceRequest2) ApiResourceInstanceApiFailoverResourceInstanceRequest {
	r.failoverResourceInstanceRequest2 = &failoverResourceInstanceRequest2
	return r
}

// Subscription Id
func (r ApiResourceInstanceApiFailoverResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiFailoverResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiFailoverResourceInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceInstanceApiFailoverResourceInstanceExecute(r)
}

/*
ResourceInstanceApiFailoverResourceInstance FailoverResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiFailoverResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiFailoverResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiFailoverResourceInstanceRequest {
	return ApiResourceInstanceApiFailoverResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiFailoverResourceInstanceExecute(r ApiResourceInstanceApiFailoverResourceInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiFailoverResourceInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/failover"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.failoverResourceInstanceRequest2 == nil {
		return nil, reportError("failoverResourceInstanceRequest2 is required and must be specified")
	}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.failoverResourceInstanceRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResourceInstanceApiGenerateTokenForDeploymentCellDashboardRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	subscriptionId *string
	id string
}

// Subscription Id
func (r ApiResourceInstanceApiGenerateTokenForDeploymentCellDashboardRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiGenerateTokenForDeploymentCellDashboardRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiGenerateTokenForDeploymentCellDashboardRequest) Execute() (*GenerateTokenForDeploymentCellDashboardResult, *http.Response, error) {
	return r.ApiService.ResourceInstanceApiGenerateTokenForDeploymentCellDashboardExecute(r)
}

/*
ResourceInstanceApiGenerateTokenForDeploymentCellDashboard GenerateTokenForDeploymentCellDashboard resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The instance ID whose deployment cell dashboard token is to be generated
 @return ApiResourceInstanceApiGenerateTokenForDeploymentCellDashboardRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiGenerateTokenForDeploymentCellDashboard(ctx context.Context, id string) ApiResourceInstanceApiGenerateTokenForDeploymentCellDashboardRequest {
	return ApiResourceInstanceApiGenerateTokenForDeploymentCellDashboardRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GenerateTokenForDeploymentCellDashboardResult
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiGenerateTokenForDeploymentCellDashboardExecute(r ApiResourceInstanceApiGenerateTokenForDeploymentCellDashboardRequest) (*GenerateTokenForDeploymentCellDashboardResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GenerateTokenForDeploymentCellDashboardResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiGenerateTokenForDeploymentCellDashboard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{id}/deployment-cell-dashboard/token"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionId == nil {
		return localVarReturnValue, nil, reportError("subscriptionId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceInstanceApiListAllResourceInstancesRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	environmentType *string
}

// The environment type to filter by
func (r ApiResourceInstanceApiListAllResourceInstancesRequest) EnvironmentType(environmentType string) ApiResourceInstanceApiListAllResourceInstancesRequest {
	r.environmentType = &environmentType
	return r
}

func (r ApiResourceInstanceApiListAllResourceInstancesRequest) Execute() (*ListAllResourceInstancesResult, *http.Response, error) {
	return r.ApiService.ResourceInstanceApiListAllResourceInstancesExecute(r)
}

/*
ResourceInstanceApiListAllResourceInstances ListAllResourceInstances resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiResourceInstanceApiListAllResourceInstancesRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiListAllResourceInstances(ctx context.Context) ApiResourceInstanceApiListAllResourceInstancesRequest {
	return ApiResourceInstanceApiListAllResourceInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListAllResourceInstancesResult
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiListAllResourceInstancesExecute(r ApiResourceInstanceApiListAllResourceInstancesRequest) (*ListAllResourceInstancesResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListAllResourceInstancesResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiListAllResourceInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.environmentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environmentType", r.environmentType, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceInstanceApiListResourceInstanceSnapshotsRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	subscriptionId *string
}

// Subscription Id
func (r ApiResourceInstanceApiListResourceInstanceSnapshotsRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiListResourceInstanceSnapshotsRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiListResourceInstanceSnapshotsRequest) Execute() (*ListResourceInstanceSnapshotsResult, *http.Response, error) {
	return r.ApiService.ResourceInstanceApiListResourceInstanceSnapshotsExecute(r)
}

/*
ResourceInstanceApiListResourceInstanceSnapshots ListResourceInstanceSnapshots resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service key
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiListResourceInstanceSnapshotsRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiListResourceInstanceSnapshots(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiListResourceInstanceSnapshotsRequest {
	return ApiResourceInstanceApiListResourceInstanceSnapshotsRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
//  @return ListResourceInstanceSnapshotsResult
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiListResourceInstanceSnapshotsExecute(r ApiResourceInstanceApiListResourceInstanceSnapshotsRequest) (*ListResourceInstanceSnapshotsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListResourceInstanceSnapshotsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiListResourceInstanceSnapshots")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/snapshot"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceInstanceApiListResourceInstancesRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	subscriptionId *string
}

// Subscription Id
func (r ApiResourceInstanceApiListResourceInstancesRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiListResourceInstancesRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiListResourceInstancesRequest) Execute() (*ListResourceInstancesResult, *http.Response, error) {
	return r.ApiService.ResourceInstanceApiListResourceInstancesExecute(r)
}

/*
ResourceInstanceApiListResourceInstances ListResourceInstances resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service key
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @return ApiResourceInstanceApiListResourceInstancesRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiListResourceInstances(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string) ApiResourceInstanceApiListResourceInstancesRequest {
	return ApiResourceInstanceApiListResourceInstancesRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
	}
}

// Execute executes the request
//  @return ListResourceInstancesResult
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiListResourceInstancesExecute(r ApiResourceInstanceApiListResourceInstancesRequest) (*ListResourceInstancesResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListResourceInstancesResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiListResourceInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	removeCapacityFromResourceInstanceRequest2 *RemoveCapacityFromResourceInstanceRequest2
	subscriptionId *string
}

func (r ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest) RemoveCapacityFromResourceInstanceRequest2(removeCapacityFromResourceInstanceRequest2 RemoveCapacityFromResourceInstanceRequest2) ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest {
	r.removeCapacityFromResourceInstanceRequest2 = &removeCapacityFromResourceInstanceRequest2
	return r
}

// Subscription Id
func (r ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceInstanceApiRemoveCapacityFromResourceInstanceExecute(r)
}

/*
ResourceInstanceApiRemoveCapacityFromResourceInstance RemoveCapacityFromResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiRemoveCapacityFromResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest {
	return ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiRemoveCapacityFromResourceInstanceExecute(r ApiResourceInstanceApiRemoveCapacityFromResourceInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiRemoveCapacityFromResourceInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/remove-capacity"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.removeCapacityFromResourceInstanceRequest2 == nil {
		return nil, reportError("removeCapacityFromResourceInstanceRequest2 is required and must be specified")
	}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.removeCapacityFromResourceInstanceRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResourceInstanceApiRemoveCustomDNSFromResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	subscriptionId *string
}

// Subscription Id
func (r ApiResourceInstanceApiRemoveCustomDNSFromResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiRemoveCustomDNSFromResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiRemoveCustomDNSFromResourceInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceInstanceApiRemoveCustomDNSFromResourceInstanceExecute(r)
}

/*
ResourceInstanceApiRemoveCustomDNSFromResourceInstance RemoveCustomDNSFromResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiRemoveCustomDNSFromResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiRemoveCustomDNSFromResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiRemoveCustomDNSFromResourceInstanceRequest {
	return ApiResourceInstanceApiRemoveCustomDNSFromResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiRemoveCustomDNSFromResourceInstanceExecute(r ApiResourceInstanceApiRemoveCustomDNSFromResourceInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiRemoveCustomDNSFromResourceInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/custom-dns"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResourceInstanceApiResourceInstanceProvisionerSetupKitRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	subscriptionId *string
}

// Subscription Id
func (r ApiResourceInstanceApiResourceInstanceProvisionerSetupKitRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiResourceInstanceProvisionerSetupKitRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiResourceInstanceProvisionerSetupKitRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceInstanceApiResourceInstanceProvisionerSetupKitExecute(r)
}

/*
ResourceInstanceApiResourceInstanceProvisionerSetupKit ResourceInstanceProvisionerSetupKit resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @return ApiResourceInstanceApiResourceInstanceProvisionerSetupKitRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiResourceInstanceProvisionerSetupKit(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string) ApiResourceInstanceApiResourceInstanceProvisionerSetupKitRequest {
	return ApiResourceInstanceApiResourceInstanceProvisionerSetupKitRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
	}
}

// Execute executes the request
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiResourceInstanceProvisionerSetupKitExecute(r ApiResourceInstanceApiResourceInstanceProvisionerSetupKitRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiResourceInstanceProvisionerSetupKit")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/setup-kit"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResourceInstanceApiRestartResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	subscriptionId *string
}

// Subscription Id
func (r ApiResourceInstanceApiRestartResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiRestartResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiRestartResourceInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceInstanceApiRestartResourceInstanceExecute(r)
}

/*
ResourceInstanceApiRestartResourceInstance RestartResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiRestartResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiRestartResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiRestartResourceInstanceRequest {
	return ApiResourceInstanceApiRestartResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiRestartResourceInstanceExecute(r ApiResourceInstanceApiRestartResourceInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiRestartResourceInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/restart"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResourceInstanceApiRestoreResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	restoreResourceInstanceRequest2 *RestoreResourceInstanceRequest2
	subscriptionId *string
}

func (r ApiResourceInstanceApiRestoreResourceInstanceRequest) RestoreResourceInstanceRequest2(restoreResourceInstanceRequest2 RestoreResourceInstanceRequest2) ApiResourceInstanceApiRestoreResourceInstanceRequest {
	r.restoreResourceInstanceRequest2 = &restoreResourceInstanceRequest2
	return r
}

// Subscription Id
func (r ApiResourceInstanceApiRestoreResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiRestoreResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiRestoreResourceInstanceRequest) Execute() (*CreateServicesOrchestrationResponseBody, *http.Response, error) {
	return r.ApiService.ResourceInstanceApiRestoreResourceInstanceExecute(r)
}

/*
ResourceInstanceApiRestoreResourceInstance RestoreResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiRestoreResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiRestoreResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiRestoreResourceInstanceRequest {
	return ApiResourceInstanceApiRestoreResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
//  @return CreateServicesOrchestrationResponseBody
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiRestoreResourceInstanceExecute(r ApiResourceInstanceApiRestoreResourceInstanceRequest) (*CreateServicesOrchestrationResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateServicesOrchestrationResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiRestoreResourceInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/restore"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.restoreResourceInstanceRequest2 == nil {
		return localVarReturnValue, nil, reportError("restoreResourceInstanceRequest2 is required and must be specified")
	}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.restoreResourceInstanceRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	snapshotId string
	restoreResourceInstanceFromSnapshotRequest2 *RestoreResourceInstanceFromSnapshotRequest2
	subscriptionId *string
}

func (r ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest) RestoreResourceInstanceFromSnapshotRequest2(restoreResourceInstanceFromSnapshotRequest2 RestoreResourceInstanceFromSnapshotRequest2) ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest {
	r.restoreResourceInstanceFromSnapshotRequest2 = &restoreResourceInstanceFromSnapshotRequest2
	return r
}

// Subscription Id
func (r ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest) Execute() (*CreateServicesOrchestrationResponseBody, *http.Response, error) {
	return r.ApiService.ResourceInstanceApiRestoreResourceInstanceFromSnapshotExecute(r)
}

/*
ResourceInstanceApiRestoreResourceInstanceFromSnapshot RestoreResourceInstanceFromSnapshot resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param snapshotId The snapshot ID
 @return ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiRestoreResourceInstanceFromSnapshot(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, snapshotId string) ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest {
	return ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		snapshotId: snapshotId,
	}
}

// Execute executes the request
//  @return CreateServicesOrchestrationResponseBody
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiRestoreResourceInstanceFromSnapshotExecute(r ApiResourceInstanceApiRestoreResourceInstanceFromSnapshotRequest) (*CreateServicesOrchestrationResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateServicesOrchestrationResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiRestoreResourceInstanceFromSnapshot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/snapshot/{snapshotId}/restore"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"snapshotId"+"}", url.PathEscape(parameterValueToString(r.snapshotId, "snapshotId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.restoreResourceInstanceFromSnapshotRequest2 == nil {
		return localVarReturnValue, nil, reportError("restoreResourceInstanceFromSnapshotRequest2 is required and must be specified")
	}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.restoreResourceInstanceFromSnapshotRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceInstanceApiStartResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	subscriptionId *string
}

// Subscription Id
func (r ApiResourceInstanceApiStartResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiStartResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiStartResourceInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceInstanceApiStartResourceInstanceExecute(r)
}

/*
ResourceInstanceApiStartResourceInstance StartResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiStartResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiStartResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiStartResourceInstanceRequest {
	return ApiResourceInstanceApiStartResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiStartResourceInstanceExecute(r ApiResourceInstanceApiStartResourceInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiStartResourceInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/start"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResourceInstanceApiStopResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	subscriptionId *string
}

// Subscription Id
func (r ApiResourceInstanceApiStopResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiStopResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiStopResourceInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceInstanceApiStopResourceInstanceExecute(r)
}

/*
ResourceInstanceApiStopResourceInstance StopResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiStopResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiStopResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiStopResourceInstanceRequest {
	return ApiResourceInstanceApiStopResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiStopResourceInstanceExecute(r ApiResourceInstanceApiStopResourceInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiStopResourceInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/stop"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	id string
	updateAccountConfigResourceInstanceRequest2 *UpdateAccountConfigResourceInstanceRequest2
	subscriptionId *string
}

func (r ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest) UpdateAccountConfigResourceInstanceRequest2(updateAccountConfigResourceInstanceRequest2 UpdateAccountConfigResourceInstanceRequest2) ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest {
	r.updateAccountConfigResourceInstanceRequest2 = &updateAccountConfigResourceInstanceRequest2
	return r
}

// Subscription Id
func (r ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceInstanceApiUpdateAccountConfigResourceInstanceExecute(r)
}

/*
ResourceInstanceApiUpdateAccountConfigResourceInstance UpdateAccountConfigResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The instance ID
 @return ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiUpdateAccountConfigResourceInstance(ctx context.Context, id string) ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest {
	return ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiUpdateAccountConfigResourceInstanceExecute(r ApiResourceInstanceApiUpdateAccountConfigResourceInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiUpdateAccountConfigResourceInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/account-config/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateAccountConfigResourceInstanceRequest2 == nil {
		return nil, reportError("updateAccountConfigResourceInstanceRequest2 is required and must be specified")
	}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateAccountConfigResourceInstanceRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResourceInstanceApiUpdateResourceInstanceRequest struct {
	ctx context.Context
	ApiService ResourceInstanceApiAPI
	serviceProviderId string
	serviceKey string
	serviceAPIVersion string
	serviceEnvironmentKey string
	serviceModelKey string
	productTierKey string
	resourceKey string
	id string
	updateResourceInstanceRequest2 *UpdateResourceInstanceRequest2
	subscriptionId *string
}

func (r ApiResourceInstanceApiUpdateResourceInstanceRequest) UpdateResourceInstanceRequest2(updateResourceInstanceRequest2 UpdateResourceInstanceRequest2) ApiResourceInstanceApiUpdateResourceInstanceRequest {
	r.updateResourceInstanceRequest2 = &updateResourceInstanceRequest2
	return r
}

// Subscription Id
func (r ApiResourceInstanceApiUpdateResourceInstanceRequest) SubscriptionId(subscriptionId string) ApiResourceInstanceApiUpdateResourceInstanceRequest {
	r.subscriptionId = &subscriptionId
	return r
}

func (r ApiResourceInstanceApiUpdateResourceInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceInstanceApiUpdateResourceInstanceExecute(r)
}

/*
ResourceInstanceApiUpdateResourceInstance UpdateResourceInstance resource-instance-api

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serviceProviderId The service provider ID
 @param serviceKey The service name
 @param serviceAPIVersion The service API version
 @param serviceEnvironmentKey The service environment name
 @param serviceModelKey The service model name
 @param productTierKey The product tier name
 @param resourceKey The resource key
 @param id The instance ID
 @return ApiResourceInstanceApiUpdateResourceInstanceRequest
*/
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiUpdateResourceInstance(ctx context.Context, serviceProviderId string, serviceKey string, serviceAPIVersion string, serviceEnvironmentKey string, serviceModelKey string, productTierKey string, resourceKey string, id string) ApiResourceInstanceApiUpdateResourceInstanceRequest {
	return ApiResourceInstanceApiUpdateResourceInstanceRequest{
		ApiService: a,
		ctx: ctx,
		serviceProviderId: serviceProviderId,
		serviceKey: serviceKey,
		serviceAPIVersion: serviceAPIVersion,
		serviceEnvironmentKey: serviceEnvironmentKey,
		serviceModelKey: serviceModelKey,
		productTierKey: productTierKey,
		resourceKey: resourceKey,
		id: id,
	}
}

// Execute executes the request
func (a *ResourceInstanceApiAPIService) ResourceInstanceApiUpdateResourceInstanceExecute(r ApiResourceInstanceApiUpdateResourceInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceInstanceApiAPIService.ResourceInstanceApiUpdateResourceInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceProviderId"+"}", url.PathEscape(parameterValueToString(r.serviceProviderId, "serviceProviderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceKey"+"}", url.PathEscape(parameterValueToString(r.serviceKey, "serviceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAPIVersion"+"}", url.PathEscape(parameterValueToString(r.serviceAPIVersion, "serviceAPIVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceEnvironmentKey"+"}", url.PathEscape(parameterValueToString(r.serviceEnvironmentKey, "serviceEnvironmentKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceModelKey"+"}", url.PathEscape(parameterValueToString(r.serviceModelKey, "serviceModelKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"productTierKey"+"}", url.PathEscape(parameterValueToString(r.productTierKey, "productTierKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceKey"+"}", url.PathEscape(parameterValueToString(r.resourceKey, "resourceKey")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateResourceInstanceRequest2 == nil {
		return nil, reportError("updateResourceInstanceRequest2 is required and must be specified")
	}

	if r.subscriptionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriptionId", r.subscriptionId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.goa.error"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateResourceInstanceRequest2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
