/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the TaintConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaintConfiguration{}

// TaintConfiguration Taint configuration for compute nodes
type TaintConfiguration struct {
	// The effect of the taint
	Effect string `json:"effect"`
	// The key of the taint
	Key string `json:"key"`
	// The value of the taint
	Value string `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _TaintConfiguration TaintConfiguration

// NewTaintConfiguration instantiates a new TaintConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaintConfiguration(effect string, key string, value string) *TaintConfiguration {
	this := TaintConfiguration{}
	this.Effect = effect
	this.Key = key
	this.Value = value
	return &this
}

// NewTaintConfigurationWithDefaults instantiates a new TaintConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaintConfigurationWithDefaults() *TaintConfiguration {
	this := TaintConfiguration{}
	return &this
}

// GetEffect returns the Effect field value
func (o *TaintConfiguration) GetEffect() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Effect
}

// GetEffectOk returns a tuple with the Effect field value
// and a boolean to check if the value has been set.
func (o *TaintConfiguration) GetEffectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Effect, true
}

// SetEffect sets field value
func (o *TaintConfiguration) SetEffect(v string) {
	o.Effect = v
}

// GetKey returns the Key field value
func (o *TaintConfiguration) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TaintConfiguration) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TaintConfiguration) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *TaintConfiguration) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TaintConfiguration) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TaintConfiguration) SetValue(v string) {
	o.Value = v
}

func (o TaintConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaintConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["effect"] = o.Effect
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TaintConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"effect",
		"key",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaintConfiguration := _TaintConfiguration{}

	err = json.Unmarshal(data, &varTaintConfiguration)

	if err != nil {
		return err
	}

	*o = TaintConfiguration(varTaintConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "effect")
		delete(additionalProperties, "key")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTaintConfiguration struct {
	value *TaintConfiguration
	isSet bool
}

func (v NullableTaintConfiguration) Get() *TaintConfiguration {
	return v.value
}

func (v *NullableTaintConfiguration) Set(val *TaintConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableTaintConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableTaintConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaintConfiguration(val *TaintConfiguration) *NullableTaintConfiguration {
	return &NullableTaintConfiguration{value: val, isSet: true}
}

func (v NullableTaintConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaintConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

