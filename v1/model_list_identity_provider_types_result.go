/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the ListIdentityProviderTypesResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListIdentityProviderTypesResult{}

// ListIdentityProviderTypesResult struct for ListIdentityProviderTypesResult
type ListIdentityProviderTypesResult struct {
	// The list of Identity Provider Types
	IdentityProviderTypes []DescribeIdentityProviderTypeResult `json:"identityProviderTypes"`
	AdditionalProperties map[string]interface{}
}

type _ListIdentityProviderTypesResult ListIdentityProviderTypesResult

// NewListIdentityProviderTypesResult instantiates a new ListIdentityProviderTypesResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListIdentityProviderTypesResult(identityProviderTypes []DescribeIdentityProviderTypeResult) *ListIdentityProviderTypesResult {
	this := ListIdentityProviderTypesResult{}
	this.IdentityProviderTypes = identityProviderTypes
	return &this
}

// NewListIdentityProviderTypesResultWithDefaults instantiates a new ListIdentityProviderTypesResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListIdentityProviderTypesResultWithDefaults() *ListIdentityProviderTypesResult {
	this := ListIdentityProviderTypesResult{}
	return &this
}

// GetIdentityProviderTypes returns the IdentityProviderTypes field value
func (o *ListIdentityProviderTypesResult) GetIdentityProviderTypes() []DescribeIdentityProviderTypeResult {
	if o == nil {
		var ret []DescribeIdentityProviderTypeResult
		return ret
	}

	return o.IdentityProviderTypes
}

// GetIdentityProviderTypesOk returns a tuple with the IdentityProviderTypes field value
// and a boolean to check if the value has been set.
func (o *ListIdentityProviderTypesResult) GetIdentityProviderTypesOk() ([]DescribeIdentityProviderTypeResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdentityProviderTypes, true
}

// SetIdentityProviderTypes sets field value
func (o *ListIdentityProviderTypesResult) SetIdentityProviderTypes(v []DescribeIdentityProviderTypeResult) {
	o.IdentityProviderTypes = v
}

func (o ListIdentityProviderTypesResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListIdentityProviderTypesResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identityProviderTypes"] = o.IdentityProviderTypes

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListIdentityProviderTypesResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identityProviderTypes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListIdentityProviderTypesResult := _ListIdentityProviderTypesResult{}

	err = json.Unmarshal(data, &varListIdentityProviderTypesResult)

	if err != nil {
		return err
	}

	*o = ListIdentityProviderTypesResult(varListIdentityProviderTypesResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "identityProviderTypes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListIdentityProviderTypesResult struct {
	value *ListIdentityProviderTypesResult
	isSet bool
}

func (v NullableListIdentityProviderTypesResult) Get() *ListIdentityProviderTypesResult {
	return v.value
}

func (v *NullableListIdentityProviderTypesResult) Set(val *ListIdentityProviderTypesResult) {
	v.value = val
	v.isSet = true
}

func (v NullableListIdentityProviderTypesResult) IsSet() bool {
	return v.isSet
}

func (v *NullableListIdentityProviderTypesResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIdentityProviderTypesResult(val *ListIdentityProviderTypesResult) *NullableListIdentityProviderTypesResult {
	return &NullableListIdentityProviderTypesResult{value: val, isSet: true}
}

func (v NullableListIdentityProviderTypesResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIdentityProviderTypesResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

