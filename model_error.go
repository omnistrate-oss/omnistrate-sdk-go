/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package omnistrategosdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Error type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Error{}

// Error struct for Error
type Error struct {
	// Is the error a server-side fault?
	Fault bool `json:"fault"`
	// ID is a unique identifier for this particular occurrence of the problem.
	Id string `json:"id"`
	// Message is a human-readable explanation specific to this occurrence of the problem.
	Message string `json:"message"`
	// Name is the name of this class of errors.
	Name string `json:"name"`
	// Is the error temporary?
	Temporary bool `json:"temporary"`
	// Is the error a timeout?
	Timeout bool `json:"timeout"`
}

type _Error Error

// NewError instantiates a new Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError(fault bool, id string, message string, name string, temporary bool, timeout bool) *Error {
	this := Error{}
	this.Fault = fault
	this.Id = id
	this.Message = message
	this.Name = name
	this.Temporary = temporary
	this.Timeout = timeout
	return &this
}

// NewErrorWithDefaults instantiates a new Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithDefaults() *Error {
	this := Error{}
	return &this
}

// GetFault returns the Fault field value
func (o *Error) GetFault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Fault
}

// GetFaultOk returns a tuple with the Fault field value
// and a boolean to check if the value has been set.
func (o *Error) GetFaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fault, true
}

// SetFault sets field value
func (o *Error) SetFault(v bool) {
	o.Fault = v
}

// GetId returns the Id field value
func (o *Error) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Error) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Error) SetId(v string) {
	o.Id = v
}

// GetMessage returns the Message field value
func (o *Error) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Error) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Error) SetMessage(v string) {
	o.Message = v
}

// GetName returns the Name field value
func (o *Error) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Error) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Error) SetName(v string) {
	o.Name = v
}

// GetTemporary returns the Temporary field value
func (o *Error) GetTemporary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Temporary
}

// GetTemporaryOk returns a tuple with the Temporary field value
// and a boolean to check if the value has been set.
func (o *Error) GetTemporaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Temporary, true
}

// SetTemporary sets field value
func (o *Error) SetTemporary(v bool) {
	o.Temporary = v
}

// GetTimeout returns the Timeout field value
func (o *Error) GetTimeout() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *Error) GetTimeoutOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *Error) SetTimeout(v bool) {
	o.Timeout = v
}

func (o Error) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Error) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fault"] = o.Fault
	toSerialize["id"] = o.Id
	toSerialize["message"] = o.Message
	toSerialize["name"] = o.Name
	toSerialize["temporary"] = o.Temporary
	toSerialize["timeout"] = o.Timeout
	return toSerialize, nil
}

func (o *Error) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fault",
		"id",
		"message",
		"name",
		"temporary",
		"timeout",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varError := _Error{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varError)

	if err != nil {
		return err
	}

	*o = Error(varError)

	return err
}

type NullableError struct {
	value *Error
	isSet bool
}

func (v NullableError) Get() *Error {
	return v.value
}

func (v *NullableError) Set(val *Error) {
	v.value = val
	v.isSet = true
}

func (v NullableError) IsSet() bool {
	return v.isSet
}

func (v *NullableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError(val *Error) *NullableError {
	return &NullableError{value: val, isSet: true}
}

func (v NullableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


