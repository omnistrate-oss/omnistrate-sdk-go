/*
Omnistrate Registration API

Testing ImageConfigApiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package registration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/omnistrate/omnistrate-sdk-go/registration"
)

func Test_registration_ImageConfigApiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ImageConfigApiAPIService ImageConfigApiCreateImageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.ImageConfigApiAPI.ImageConfigApiCreateImageConfig(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageConfigApiAPIService ImageConfigApiDeleteImageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ImageConfigApiAPI.ImageConfigApiDeleteImageConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageConfigApiAPIService ImageConfigApiDescribeImageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ImageConfigApiAPI.ImageConfigApiDescribeImageConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageConfigApiAPIService ImageConfigApiListImageConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var serviceEnvironmentId string

		resp, httpRes, err := apiClient.ImageConfigApiAPI.ImageConfigApiListImageConfigs(context.Background(), serviceId, serviceEnvironmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageConfigApiAPIService ImageConfigApiReleaseImageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ImageConfigApiAPI.ImageConfigApiReleaseImageConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageConfigApiAPIService ImageConfigApiRolloutFleetImageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ImageConfigApiAPI.ImageConfigApiRolloutFleetImageConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageConfigApiAPIService ImageConfigApiRolloutFleetImageStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.ImageConfigApiAPI.ImageConfigApiRolloutFleetImageStatus(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageConfigApiAPIService ImageConfigApiUpdateImageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.ImageConfigApiAPI.ImageConfigApiUpdateImageConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
