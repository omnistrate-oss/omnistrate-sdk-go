/*
Omnistrate Registration API

Testing InfraConfigApiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package registration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/omnistrate/omnistrate-sdk-go/registration"
)

func Test_registration_InfraConfigApiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InfraConfigApiAPIService InfraConfigApiCreateInfraConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.InfraConfigApiAPI.InfraConfigApiCreateInfraConfig(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfraConfigApiAPIService InfraConfigApiDeleteInfraConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.InfraConfigApiAPI.InfraConfigApiDeleteInfraConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfraConfigApiAPIService InfraConfigApiDescribeInfraConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.InfraConfigApiAPI.InfraConfigApiDescribeInfraConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfraConfigApiAPIService InfraConfigApiDetachComputeConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.InfraConfigApiAPI.InfraConfigApiDetachComputeConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfraConfigApiAPIService InfraConfigApiDetachNetworkConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.InfraConfigApiAPI.InfraConfigApiDetachNetworkConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfraConfigApiAPIService InfraConfigApiDetachStorageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.InfraConfigApiAPI.InfraConfigApiDetachStorageConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfraConfigApiAPIService InfraConfigApiListAssociatedResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.InfraConfigApiAPI.InfraConfigApiListAssociatedResources(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfraConfigApiAPIService InfraConfigApiListInfraConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var serviceEnvironmentId string

		resp, httpRes, err := apiClient.InfraConfigApiAPI.InfraConfigApiListInfraConfig(context.Background(), serviceId, serviceEnvironmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfraConfigApiAPIService InfraConfigApiReleaseInfraConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.InfraConfigApiAPI.InfraConfigApiReleaseInfraConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfraConfigApiAPIService InfraConfigApiRolloutFleetInfra", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.InfraConfigApiAPI.InfraConfigApiRolloutFleetInfra(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfraConfigApiAPIService InfraConfigApiRolloutFleetInfraStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		resp, httpRes, err := apiClient.InfraConfigApiAPI.InfraConfigApiRolloutFleetInfraStatus(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfraConfigApiAPIService InfraConfigApiUpdateInfraConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var id string

		httpRes, err := apiClient.InfraConfigApiAPI.InfraConfigApiUpdateInfraConfig(context.Background(), serviceId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
