/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
)

// checks if the L4LoadBalancerConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &L4LoadBalancerConfiguration{}

// L4LoadBalancerConfiguration struct for L4LoadBalancerConfiguration
type L4LoadBalancerConfiguration struct {
	// The ingress port configuration to configure on the load balancer
	IngressPortConfiguration []BackendPortConfiguration `json:"ingressPortConfiguration,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _L4LoadBalancerConfiguration L4LoadBalancerConfiguration

// NewL4LoadBalancerConfiguration instantiates a new L4LoadBalancerConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewL4LoadBalancerConfiguration() *L4LoadBalancerConfiguration {
	this := L4LoadBalancerConfiguration{}
	return &this
}

// NewL4LoadBalancerConfigurationWithDefaults instantiates a new L4LoadBalancerConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewL4LoadBalancerConfigurationWithDefaults() *L4LoadBalancerConfiguration {
	this := L4LoadBalancerConfiguration{}
	return &this
}

// GetIngressPortConfiguration returns the IngressPortConfiguration field value if set, zero value otherwise.
func (o *L4LoadBalancerConfiguration) GetIngressPortConfiguration() []BackendPortConfiguration {
	if o == nil || IsNil(o.IngressPortConfiguration) {
		var ret []BackendPortConfiguration
		return ret
	}
	return o.IngressPortConfiguration
}

// GetIngressPortConfigurationOk returns a tuple with the IngressPortConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *L4LoadBalancerConfiguration) GetIngressPortConfigurationOk() ([]BackendPortConfiguration, bool) {
	if o == nil || IsNil(o.IngressPortConfiguration) {
		return nil, false
	}
	return o.IngressPortConfiguration, true
}

// HasIngressPortConfiguration returns a boolean if a field has been set.
func (o *L4LoadBalancerConfiguration) HasIngressPortConfiguration() bool {
	if o != nil && !IsNil(o.IngressPortConfiguration) {
		return true
	}

	return false
}

// SetIngressPortConfiguration gets a reference to the given []BackendPortConfiguration and assigns it to the IngressPortConfiguration field.
func (o *L4LoadBalancerConfiguration) SetIngressPortConfiguration(v []BackendPortConfiguration) {
	o.IngressPortConfiguration = v
}

func (o L4LoadBalancerConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o L4LoadBalancerConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IngressPortConfiguration) {
		toSerialize["ingressPortConfiguration"] = o.IngressPortConfiguration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *L4LoadBalancerConfiguration) UnmarshalJSON(data []byte) (err error) {
	varL4LoadBalancerConfiguration := _L4LoadBalancerConfiguration{}

	err = json.Unmarshal(data, &varL4LoadBalancerConfiguration)

	if err != nil {
		return err
	}

	*o = L4LoadBalancerConfiguration(varL4LoadBalancerConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ingressPortConfiguration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableL4LoadBalancerConfiguration struct {
	value *L4LoadBalancerConfiguration
	isSet bool
}

func (v NullableL4LoadBalancerConfiguration) Get() *L4LoadBalancerConfiguration {
	return v.value
}

func (v *NullableL4LoadBalancerConfiguration) Set(val *L4LoadBalancerConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableL4LoadBalancerConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableL4LoadBalancerConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableL4LoadBalancerConfiguration(val *L4LoadBalancerConfiguration) *NullableL4LoadBalancerConfiguration {
	return &NullableL4LoadBalancerConfiguration{value: val, isSet: true}
}

func (v NullableL4LoadBalancerConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableL4LoadBalancerConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


