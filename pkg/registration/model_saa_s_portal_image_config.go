/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
	"fmt"
)

// checks if the SaaSPortalImageConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaaSPortalImageConfig{}

// SaaSPortalImageConfig struct for SaaSPortalImageConfig
type SaaSPortalImageConfig struct {
	// The image name for the SaaS portal
	ImageName string `json:"imageName"`
	// The image registry for the SaaS portal
	ImageRegistry string `json:"imageRegistry"`
	// The image tag for the SaaS portal
	ImageTag string `json:"imageTag"`
	AdditionalProperties map[string]interface{}
}

type _SaaSPortalImageConfig SaaSPortalImageConfig

// NewSaaSPortalImageConfig instantiates a new SaaSPortalImageConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaaSPortalImageConfig(imageName string, imageRegistry string, imageTag string) *SaaSPortalImageConfig {
	this := SaaSPortalImageConfig{}
	this.ImageName = imageName
	this.ImageRegistry = imageRegistry
	this.ImageTag = imageTag
	return &this
}

// NewSaaSPortalImageConfigWithDefaults instantiates a new SaaSPortalImageConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaaSPortalImageConfigWithDefaults() *SaaSPortalImageConfig {
	this := SaaSPortalImageConfig{}
	return &this
}

// GetImageName returns the ImageName field value
func (o *SaaSPortalImageConfig) GetImageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value
// and a boolean to check if the value has been set.
func (o *SaaSPortalImageConfig) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageName, true
}

// SetImageName sets field value
func (o *SaaSPortalImageConfig) SetImageName(v string) {
	o.ImageName = v
}

// GetImageRegistry returns the ImageRegistry field value
func (o *SaaSPortalImageConfig) GetImageRegistry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageRegistry
}

// GetImageRegistryOk returns a tuple with the ImageRegistry field value
// and a boolean to check if the value has been set.
func (o *SaaSPortalImageConfig) GetImageRegistryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageRegistry, true
}

// SetImageRegistry sets field value
func (o *SaaSPortalImageConfig) SetImageRegistry(v string) {
	o.ImageRegistry = v
}

// GetImageTag returns the ImageTag field value
func (o *SaaSPortalImageConfig) GetImageTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageTag
}

// GetImageTagOk returns a tuple with the ImageTag field value
// and a boolean to check if the value has been set.
func (o *SaaSPortalImageConfig) GetImageTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageTag, true
}

// SetImageTag sets field value
func (o *SaaSPortalImageConfig) SetImageTag(v string) {
	o.ImageTag = v
}

func (o SaaSPortalImageConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaaSPortalImageConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["imageName"] = o.ImageName
	toSerialize["imageRegistry"] = o.ImageRegistry
	toSerialize["imageTag"] = o.ImageTag

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SaaSPortalImageConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageName",
		"imageRegistry",
		"imageTag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSaaSPortalImageConfig := _SaaSPortalImageConfig{}

	err = json.Unmarshal(data, &varSaaSPortalImageConfig)

	if err != nil {
		return err
	}

	*o = SaaSPortalImageConfig(varSaaSPortalImageConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "imageName")
		delete(additionalProperties, "imageRegistry")
		delete(additionalProperties, "imageTag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSaaSPortalImageConfig struct {
	value *SaaSPortalImageConfig
	isSet bool
}

func (v NullableSaaSPortalImageConfig) Get() *SaaSPortalImageConfig {
	return v.value
}

func (v *NullableSaaSPortalImageConfig) Set(val *SaaSPortalImageConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSaaSPortalImageConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSaaSPortalImageConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaaSPortalImageConfig(val *SaaSPortalImageConfig) *NullableSaaSPortalImageConfig {
	return &NullableSaaSPortalImageConfig{value: val, isSet: true}
}

func (v NullableSaaSPortalImageConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaaSPortalImageConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


