/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
)

// checks if the InfraRollConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfraRollConfiguration{}

// InfraRollConfiguration The rollout configuration to use for making changes to the resources backed by this infra
type InfraRollConfiguration struct {
	// Rollout strategy to use for infra config updates
	InfraRolloutStrategy *string `json:"infraRolloutStrategy,omitempty"`
	// Maximum number of resource instances to update in a single batch
	MaximumNumberOfResourceInstancesPerBatch *int64 `json:"maximumNumberOfResourceInstancesPerBatch,omitempty"`
	// Maximum number of replicas of this resource that can be unavailable before halting the rollout
	MaximumUnavailableReplicas *int64 `json:"maximumUnavailableReplicas,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InfraRollConfiguration InfraRollConfiguration

// NewInfraRollConfiguration instantiates a new InfraRollConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfraRollConfiguration() *InfraRollConfiguration {
	this := InfraRollConfiguration{}
	var maximumNumberOfResourceInstancesPerBatch int64 = 1
	this.MaximumNumberOfResourceInstancesPerBatch = &maximumNumberOfResourceInstancesPerBatch
	var maximumUnavailableReplicas int64 = 1
	this.MaximumUnavailableReplicas = &maximumUnavailableReplicas
	return &this
}

// NewInfraRollConfigurationWithDefaults instantiates a new InfraRollConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfraRollConfigurationWithDefaults() *InfraRollConfiguration {
	this := InfraRollConfiguration{}
	var maximumNumberOfResourceInstancesPerBatch int64 = 1
	this.MaximumNumberOfResourceInstancesPerBatch = &maximumNumberOfResourceInstancesPerBatch
	var maximumUnavailableReplicas int64 = 1
	this.MaximumUnavailableReplicas = &maximumUnavailableReplicas
	return &this
}

// GetInfraRolloutStrategy returns the InfraRolloutStrategy field value if set, zero value otherwise.
func (o *InfraRollConfiguration) GetInfraRolloutStrategy() string {
	if o == nil || IsNil(o.InfraRolloutStrategy) {
		var ret string
		return ret
	}
	return *o.InfraRolloutStrategy
}

// GetInfraRolloutStrategyOk returns a tuple with the InfraRolloutStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraRollConfiguration) GetInfraRolloutStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.InfraRolloutStrategy) {
		return nil, false
	}
	return o.InfraRolloutStrategy, true
}

// HasInfraRolloutStrategy returns a boolean if a field has been set.
func (o *InfraRollConfiguration) HasInfraRolloutStrategy() bool {
	if o != nil && !IsNil(o.InfraRolloutStrategy) {
		return true
	}

	return false
}

// SetInfraRolloutStrategy gets a reference to the given string and assigns it to the InfraRolloutStrategy field.
func (o *InfraRollConfiguration) SetInfraRolloutStrategy(v string) {
	o.InfraRolloutStrategy = &v
}

// GetMaximumNumberOfResourceInstancesPerBatch returns the MaximumNumberOfResourceInstancesPerBatch field value if set, zero value otherwise.
func (o *InfraRollConfiguration) GetMaximumNumberOfResourceInstancesPerBatch() int64 {
	if o == nil || IsNil(o.MaximumNumberOfResourceInstancesPerBatch) {
		var ret int64
		return ret
	}
	return *o.MaximumNumberOfResourceInstancesPerBatch
}

// GetMaximumNumberOfResourceInstancesPerBatchOk returns a tuple with the MaximumNumberOfResourceInstancesPerBatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraRollConfiguration) GetMaximumNumberOfResourceInstancesPerBatchOk() (*int64, bool) {
	if o == nil || IsNil(o.MaximumNumberOfResourceInstancesPerBatch) {
		return nil, false
	}
	return o.MaximumNumberOfResourceInstancesPerBatch, true
}

// HasMaximumNumberOfResourceInstancesPerBatch returns a boolean if a field has been set.
func (o *InfraRollConfiguration) HasMaximumNumberOfResourceInstancesPerBatch() bool {
	if o != nil && !IsNil(o.MaximumNumberOfResourceInstancesPerBatch) {
		return true
	}

	return false
}

// SetMaximumNumberOfResourceInstancesPerBatch gets a reference to the given int64 and assigns it to the MaximumNumberOfResourceInstancesPerBatch field.
func (o *InfraRollConfiguration) SetMaximumNumberOfResourceInstancesPerBatch(v int64) {
	o.MaximumNumberOfResourceInstancesPerBatch = &v
}

// GetMaximumUnavailableReplicas returns the MaximumUnavailableReplicas field value if set, zero value otherwise.
func (o *InfraRollConfiguration) GetMaximumUnavailableReplicas() int64 {
	if o == nil || IsNil(o.MaximumUnavailableReplicas) {
		var ret int64
		return ret
	}
	return *o.MaximumUnavailableReplicas
}

// GetMaximumUnavailableReplicasOk returns a tuple with the MaximumUnavailableReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfraRollConfiguration) GetMaximumUnavailableReplicasOk() (*int64, bool) {
	if o == nil || IsNil(o.MaximumUnavailableReplicas) {
		return nil, false
	}
	return o.MaximumUnavailableReplicas, true
}

// HasMaximumUnavailableReplicas returns a boolean if a field has been set.
func (o *InfraRollConfiguration) HasMaximumUnavailableReplicas() bool {
	if o != nil && !IsNil(o.MaximumUnavailableReplicas) {
		return true
	}

	return false
}

// SetMaximumUnavailableReplicas gets a reference to the given int64 and assigns it to the MaximumUnavailableReplicas field.
func (o *InfraRollConfiguration) SetMaximumUnavailableReplicas(v int64) {
	o.MaximumUnavailableReplicas = &v
}

func (o InfraRollConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfraRollConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InfraRolloutStrategy) {
		toSerialize["infraRolloutStrategy"] = o.InfraRolloutStrategy
	}
	if !IsNil(o.MaximumNumberOfResourceInstancesPerBatch) {
		toSerialize["maximumNumberOfResourceInstancesPerBatch"] = o.MaximumNumberOfResourceInstancesPerBatch
	}
	if !IsNil(o.MaximumUnavailableReplicas) {
		toSerialize["maximumUnavailableReplicas"] = o.MaximumUnavailableReplicas
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InfraRollConfiguration) UnmarshalJSON(data []byte) (err error) {
	varInfraRollConfiguration := _InfraRollConfiguration{}

	err = json.Unmarshal(data, &varInfraRollConfiguration)

	if err != nil {
		return err
	}

	*o = InfraRollConfiguration(varInfraRollConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "infraRolloutStrategy")
		delete(additionalProperties, "maximumNumberOfResourceInstancesPerBatch")
		delete(additionalProperties, "maximumUnavailableReplicas")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfraRollConfiguration struct {
	value *InfraRollConfiguration
	isSet bool
}

func (v NullableInfraRollConfiguration) Get() *InfraRollConfiguration {
	return v.value
}

func (v *NullableInfraRollConfiguration) Set(val *InfraRollConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableInfraRollConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableInfraRollConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfraRollConfiguration(val *InfraRollConfiguration) *NullableInfraRollConfiguration {
	return &NullableInfraRollConfiguration{value: val, isSet: true}
}

func (v NullableInfraRollConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfraRollConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


