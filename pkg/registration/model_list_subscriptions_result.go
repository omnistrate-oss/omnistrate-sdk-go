/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
	"fmt"
)

// checks if the ListSubscriptionsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListSubscriptionsResult{}

// ListSubscriptionsResult struct for ListSubscriptionsResult
type ListSubscriptionsResult struct {
	// List of subscription IDs
	Ids []string `json:"ids"`
	// The next token to use when listing subscriptions
	NextPageToken *string `json:"nextPageToken,omitempty"`
	// List of subscriptions
	Subscriptions []DescribeSubscriptionResult `json:"subscriptions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListSubscriptionsResult ListSubscriptionsResult

// NewListSubscriptionsResult instantiates a new ListSubscriptionsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSubscriptionsResult(ids []string) *ListSubscriptionsResult {
	this := ListSubscriptionsResult{}
	this.Ids = ids
	return &this
}

// NewListSubscriptionsResultWithDefaults instantiates a new ListSubscriptionsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSubscriptionsResultWithDefaults() *ListSubscriptionsResult {
	this := ListSubscriptionsResult{}
	return &this
}

// GetIds returns the Ids field value
func (o *ListSubscriptionsResult) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *ListSubscriptionsResult) GetIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *ListSubscriptionsResult) SetIds(v []string) {
	o.Ids = v
}

// GetNextPageToken returns the NextPageToken field value if set, zero value otherwise.
func (o *ListSubscriptionsResult) GetNextPageToken() string {
	if o == nil || IsNil(o.NextPageToken) {
		var ret string
		return ret
	}
	return *o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubscriptionsResult) GetNextPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageToken) {
		return nil, false
	}
	return o.NextPageToken, true
}

// HasNextPageToken returns a boolean if a field has been set.
func (o *ListSubscriptionsResult) HasNextPageToken() bool {
	if o != nil && !IsNil(o.NextPageToken) {
		return true
	}

	return false
}

// SetNextPageToken gets a reference to the given string and assigns it to the NextPageToken field.
func (o *ListSubscriptionsResult) SetNextPageToken(v string) {
	o.NextPageToken = &v
}

// GetSubscriptions returns the Subscriptions field value if set, zero value otherwise.
func (o *ListSubscriptionsResult) GetSubscriptions() []DescribeSubscriptionResult {
	if o == nil || IsNil(o.Subscriptions) {
		var ret []DescribeSubscriptionResult
		return ret
	}
	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubscriptionsResult) GetSubscriptionsOk() ([]DescribeSubscriptionResult, bool) {
	if o == nil || IsNil(o.Subscriptions) {
		return nil, false
	}
	return o.Subscriptions, true
}

// HasSubscriptions returns a boolean if a field has been set.
func (o *ListSubscriptionsResult) HasSubscriptions() bool {
	if o != nil && !IsNil(o.Subscriptions) {
		return true
	}

	return false
}

// SetSubscriptions gets a reference to the given []DescribeSubscriptionResult and assigns it to the Subscriptions field.
func (o *ListSubscriptionsResult) SetSubscriptions(v []DescribeSubscriptionResult) {
	o.Subscriptions = v
}

func (o ListSubscriptionsResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListSubscriptionsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ids"] = o.Ids
	if !IsNil(o.NextPageToken) {
		toSerialize["nextPageToken"] = o.NextPageToken
	}
	if !IsNil(o.Subscriptions) {
		toSerialize["subscriptions"] = o.Subscriptions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListSubscriptionsResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListSubscriptionsResult := _ListSubscriptionsResult{}

	err = json.Unmarshal(data, &varListSubscriptionsResult)

	if err != nil {
		return err
	}

	*o = ListSubscriptionsResult(varListSubscriptionsResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ids")
		delete(additionalProperties, "nextPageToken")
		delete(additionalProperties, "subscriptions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListSubscriptionsResult struct {
	value *ListSubscriptionsResult
	isSet bool
}

func (v NullableListSubscriptionsResult) Get() *ListSubscriptionsResult {
	return v.value
}

func (v *NullableListSubscriptionsResult) Set(val *ListSubscriptionsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableListSubscriptionsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableListSubscriptionsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSubscriptionsResult(val *ListSubscriptionsResult) *NullableListSubscriptionsResult {
	return &NullableListSubscriptionsResult{value: val, isSet: true}
}

func (v NullableListSubscriptionsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSubscriptionsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


