/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
)

// checks if the Limits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Limits{}

// Limits Limit of a parameter
type Limits struct {
	// Maximum value for an integer or floating-point parameter
	Max *string `json:"max,omitempty"`
	// Maximum length of a string parameter
	MaxLength *string `json:"maxLength,omitempty"`
	// Minimum value for an integer or floating-point parameter
	Min *string `json:"min,omitempty"`
	// Minimum length of a string parameter
	MinLength *string `json:"minLength,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Limits Limits

// NewLimits instantiates a new Limits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLimits() *Limits {
	this := Limits{}
	return &this
}

// NewLimitsWithDefaults instantiates a new Limits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimitsWithDefaults() *Limits {
	this := Limits{}
	return &this
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *Limits) GetMax() string {
	if o == nil || IsNil(o.Max) {
		var ret string
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Limits) GetMaxOk() (*string, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *Limits) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given string and assigns it to the Max field.
func (o *Limits) SetMax(v string) {
	o.Max = &v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *Limits) GetMaxLength() string {
	if o == nil || IsNil(o.MaxLength) {
		var ret string
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Limits) GetMaxLengthOk() (*string, bool) {
	if o == nil || IsNil(o.MaxLength) {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *Limits) HasMaxLength() bool {
	if o != nil && !IsNil(o.MaxLength) {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given string and assigns it to the MaxLength field.
func (o *Limits) SetMaxLength(v string) {
	o.MaxLength = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *Limits) GetMin() string {
	if o == nil || IsNil(o.Min) {
		var ret string
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Limits) GetMinOk() (*string, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *Limits) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given string and assigns it to the Min field.
func (o *Limits) SetMin(v string) {
	o.Min = &v
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *Limits) GetMinLength() string {
	if o == nil || IsNil(o.MinLength) {
		var ret string
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Limits) GetMinLengthOk() (*string, bool) {
	if o == nil || IsNil(o.MinLength) {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *Limits) HasMinLength() bool {
	if o != nil && !IsNil(o.MinLength) {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given string and assigns it to the MinLength field.
func (o *Limits) SetMinLength(v string) {
	o.MinLength = &v
}

func (o Limits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Limits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.MaxLength) {
		toSerialize["maxLength"] = o.MaxLength
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.MinLength) {
		toSerialize["minLength"] = o.MinLength
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Limits) UnmarshalJSON(data []byte) (err error) {
	varLimits := _Limits{}

	err = json.Unmarshal(data, &varLimits)

	if err != nil {
		return err
	}

	*o = Limits(varLimits)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "max")
		delete(additionalProperties, "maxLength")
		delete(additionalProperties, "min")
		delete(additionalProperties, "minLength")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLimits struct {
	value *Limits
	isSet bool
}

func (v NullableLimits) Get() *Limits {
	return v.value
}

func (v *NullableLimits) Set(val *Limits) {
	v.value = val
	v.isSet = true
}

func (v NullableLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimits(val *Limits) *NullableLimits {
	return &NullableLimits{value: val, isSet: true}
}

func (v NullableLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


