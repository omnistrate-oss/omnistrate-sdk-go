/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
)

// checks if the CustomImageCommandsAndArgs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomImageCommandsAndArgs{}

// CustomImageCommandsAndArgs Commands and arguments to run in the container
type CustomImageCommandsAndArgs struct {
	// Arguments to pass to the container
	Args []string `json:"args,omitempty"`
	// Commands to run in the container
	Commands []string `json:"commands,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomImageCommandsAndArgs CustomImageCommandsAndArgs

// NewCustomImageCommandsAndArgs instantiates a new CustomImageCommandsAndArgs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomImageCommandsAndArgs() *CustomImageCommandsAndArgs {
	this := CustomImageCommandsAndArgs{}
	return &this
}

// NewCustomImageCommandsAndArgsWithDefaults instantiates a new CustomImageCommandsAndArgs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomImageCommandsAndArgsWithDefaults() *CustomImageCommandsAndArgs {
	this := CustomImageCommandsAndArgs{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *CustomImageCommandsAndArgs) GetArgs() []string {
	if o == nil || IsNil(o.Args) {
		var ret []string
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomImageCommandsAndArgs) GetArgsOk() ([]string, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *CustomImageCommandsAndArgs) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *CustomImageCommandsAndArgs) SetArgs(v []string) {
	o.Args = v
}

// GetCommands returns the Commands field value if set, zero value otherwise.
func (o *CustomImageCommandsAndArgs) GetCommands() []string {
	if o == nil || IsNil(o.Commands) {
		var ret []string
		return ret
	}
	return o.Commands
}

// GetCommandsOk returns a tuple with the Commands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomImageCommandsAndArgs) GetCommandsOk() ([]string, bool) {
	if o == nil || IsNil(o.Commands) {
		return nil, false
	}
	return o.Commands, true
}

// HasCommands returns a boolean if a field has been set.
func (o *CustomImageCommandsAndArgs) HasCommands() bool {
	if o != nil && !IsNil(o.Commands) {
		return true
	}

	return false
}

// SetCommands gets a reference to the given []string and assigns it to the Commands field.
func (o *CustomImageCommandsAndArgs) SetCommands(v []string) {
	o.Commands = v
}

func (o CustomImageCommandsAndArgs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomImageCommandsAndArgs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !IsNil(o.Commands) {
		toSerialize["commands"] = o.Commands
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomImageCommandsAndArgs) UnmarshalJSON(data []byte) (err error) {
	varCustomImageCommandsAndArgs := _CustomImageCommandsAndArgs{}

	err = json.Unmarshal(data, &varCustomImageCommandsAndArgs)

	if err != nil {
		return err
	}

	*o = CustomImageCommandsAndArgs(varCustomImageCommandsAndArgs)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "args")
		delete(additionalProperties, "commands")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomImageCommandsAndArgs struct {
	value *CustomImageCommandsAndArgs
	isSet bool
}

func (v NullableCustomImageCommandsAndArgs) Get() *CustomImageCommandsAndArgs {
	return v.value
}

func (v *NullableCustomImageCommandsAndArgs) Set(val *CustomImageCommandsAndArgs) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomImageCommandsAndArgs) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomImageCommandsAndArgs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomImageCommandsAndArgs(val *CustomImageCommandsAndArgs) *NullableCustomImageCommandsAndArgs {
	return &NullableCustomImageCommandsAndArgs{value: val, isSet: true}
}

func (v NullableCustomImageCommandsAndArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomImageCommandsAndArgs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


