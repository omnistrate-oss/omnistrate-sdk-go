/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
	"fmt"
)

// checks if the DescribeEventResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeEventResult{}

// DescribeEventResult struct for DescribeEventResult
type DescribeEventResult struct {
	// The event source
	EventSource *string `json:"eventSource,omitempty"`
	// The ID of the event
	Id string `json:"id"`
	// Resource Instance of message
	Message string `json:"message"`
	// The organization ID of the user that caused the event
	OrgId *string `json:"orgId,omitempty"`
	// The organization name of the user that caused the event
	OrgName *string `json:"orgName,omitempty"`
	// Instance Id of the resource instance
	ResourceInstanceId string `json:"resourceInstanceId"`
	// Name of the resource
	ResourceName string `json:"resourceName"`
	// The event time
	Time string `json:"time"`
	// The ID of the user that caused the event
	UserId *string `json:"userId,omitempty"`
	// The user name of the user that caused the event
	UserName *string `json:"userName,omitempty"`
	// The list of workflow events that indicate failures
	WorkflowFailures []WorkflowFailure `json:"workflowFailures,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DescribeEventResult DescribeEventResult

// NewDescribeEventResult instantiates a new DescribeEventResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeEventResult(id string, message string, resourceInstanceId string, resourceName string, time string) *DescribeEventResult {
	this := DescribeEventResult{}
	this.Id = id
	this.Message = message
	this.ResourceInstanceId = resourceInstanceId
	this.ResourceName = resourceName
	this.Time = time
	return &this
}

// NewDescribeEventResultWithDefaults instantiates a new DescribeEventResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeEventResultWithDefaults() *DescribeEventResult {
	this := DescribeEventResult{}
	return &this
}

// GetEventSource returns the EventSource field value if set, zero value otherwise.
func (o *DescribeEventResult) GetEventSource() string {
	if o == nil || IsNil(o.EventSource) {
		var ret string
		return ret
	}
	return *o.EventSource
}

// GetEventSourceOk returns a tuple with the EventSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeEventResult) GetEventSourceOk() (*string, bool) {
	if o == nil || IsNil(o.EventSource) {
		return nil, false
	}
	return o.EventSource, true
}

// HasEventSource returns a boolean if a field has been set.
func (o *DescribeEventResult) HasEventSource() bool {
	if o != nil && !IsNil(o.EventSource) {
		return true
	}

	return false
}

// SetEventSource gets a reference to the given string and assigns it to the EventSource field.
func (o *DescribeEventResult) SetEventSource(v string) {
	o.EventSource = &v
}

// GetId returns the Id field value
func (o *DescribeEventResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DescribeEventResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DescribeEventResult) SetId(v string) {
	o.Id = v
}

// GetMessage returns the Message field value
func (o *DescribeEventResult) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *DescribeEventResult) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *DescribeEventResult) SetMessage(v string) {
	o.Message = v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *DescribeEventResult) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeEventResult) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *DescribeEventResult) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *DescribeEventResult) SetOrgId(v string) {
	o.OrgId = &v
}

// GetOrgName returns the OrgName field value if set, zero value otherwise.
func (o *DescribeEventResult) GetOrgName() string {
	if o == nil || IsNil(o.OrgName) {
		var ret string
		return ret
	}
	return *o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeEventResult) GetOrgNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgName) {
		return nil, false
	}
	return o.OrgName, true
}

// HasOrgName returns a boolean if a field has been set.
func (o *DescribeEventResult) HasOrgName() bool {
	if o != nil && !IsNil(o.OrgName) {
		return true
	}

	return false
}

// SetOrgName gets a reference to the given string and assigns it to the OrgName field.
func (o *DescribeEventResult) SetOrgName(v string) {
	o.OrgName = &v
}

// GetResourceInstanceId returns the ResourceInstanceId field value
func (o *DescribeEventResult) GetResourceInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceInstanceId
}

// GetResourceInstanceIdOk returns a tuple with the ResourceInstanceId field value
// and a boolean to check if the value has been set.
func (o *DescribeEventResult) GetResourceInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceInstanceId, true
}

// SetResourceInstanceId sets field value
func (o *DescribeEventResult) SetResourceInstanceId(v string) {
	o.ResourceInstanceId = v
}

// GetResourceName returns the ResourceName field value
func (o *DescribeEventResult) GetResourceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value
// and a boolean to check if the value has been set.
func (o *DescribeEventResult) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceName, true
}

// SetResourceName sets field value
func (o *DescribeEventResult) SetResourceName(v string) {
	o.ResourceName = v
}

// GetTime returns the Time field value
func (o *DescribeEventResult) GetTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *DescribeEventResult) GetTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *DescribeEventResult) SetTime(v string) {
	o.Time = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *DescribeEventResult) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeEventResult) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DescribeEventResult) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *DescribeEventResult) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *DescribeEventResult) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeEventResult) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *DescribeEventResult) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *DescribeEventResult) SetUserName(v string) {
	o.UserName = &v
}

// GetWorkflowFailures returns the WorkflowFailures field value if set, zero value otherwise.
func (o *DescribeEventResult) GetWorkflowFailures() []WorkflowFailure {
	if o == nil || IsNil(o.WorkflowFailures) {
		var ret []WorkflowFailure
		return ret
	}
	return o.WorkflowFailures
}

// GetWorkflowFailuresOk returns a tuple with the WorkflowFailures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeEventResult) GetWorkflowFailuresOk() ([]WorkflowFailure, bool) {
	if o == nil || IsNil(o.WorkflowFailures) {
		return nil, false
	}
	return o.WorkflowFailures, true
}

// HasWorkflowFailures returns a boolean if a field has been set.
func (o *DescribeEventResult) HasWorkflowFailures() bool {
	if o != nil && !IsNil(o.WorkflowFailures) {
		return true
	}

	return false
}

// SetWorkflowFailures gets a reference to the given []WorkflowFailure and assigns it to the WorkflowFailures field.
func (o *DescribeEventResult) SetWorkflowFailures(v []WorkflowFailure) {
	o.WorkflowFailures = v
}

func (o DescribeEventResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeEventResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventSource) {
		toSerialize["eventSource"] = o.EventSource
	}
	toSerialize["id"] = o.Id
	toSerialize["message"] = o.Message
	if !IsNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	if !IsNil(o.OrgName) {
		toSerialize["orgName"] = o.OrgName
	}
	toSerialize["resourceInstanceId"] = o.ResourceInstanceId
	toSerialize["resourceName"] = o.ResourceName
	toSerialize["time"] = o.Time
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.WorkflowFailures) {
		toSerialize["workflowFailures"] = o.WorkflowFailures
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DescribeEventResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"message",
		"resourceInstanceId",
		"resourceName",
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeEventResult := _DescribeEventResult{}

	err = json.Unmarshal(data, &varDescribeEventResult)

	if err != nil {
		return err
	}

	*o = DescribeEventResult(varDescribeEventResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "eventSource")
		delete(additionalProperties, "id")
		delete(additionalProperties, "message")
		delete(additionalProperties, "orgId")
		delete(additionalProperties, "orgName")
		delete(additionalProperties, "resourceInstanceId")
		delete(additionalProperties, "resourceName")
		delete(additionalProperties, "time")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "userName")
		delete(additionalProperties, "workflowFailures")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDescribeEventResult struct {
	value *DescribeEventResult
	isSet bool
}

func (v NullableDescribeEventResult) Get() *DescribeEventResult {
	return v.value
}

func (v *NullableDescribeEventResult) Set(val *DescribeEventResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeEventResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeEventResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeEventResult(val *DescribeEventResult) *NullableDescribeEventResult {
	return &NullableDescribeEventResult{value: val, isSet: true}
}

func (v NullableDescribeEventResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeEventResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


