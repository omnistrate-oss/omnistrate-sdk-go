/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registration

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateLimitRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLimitRequestBody{}

// UpdateLimitRequestBody struct for UpdateLimitRequestBody
type UpdateLimitRequestBody struct {
	// A brief description of the limit
	Description *string `json:"description,omitempty"`
	// Name of the limit
	Name *string `json:"name,omitempty"`
	// Value of the limit being enforced
	Value int64 `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _UpdateLimitRequestBody UpdateLimitRequestBody

// NewUpdateLimitRequestBody instantiates a new UpdateLimitRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLimitRequestBody(value int64) *UpdateLimitRequestBody {
	this := UpdateLimitRequestBody{}
	this.Value = value
	return &this
}

// NewUpdateLimitRequestBodyWithDefaults instantiates a new UpdateLimitRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLimitRequestBodyWithDefaults() *UpdateLimitRequestBody {
	this := UpdateLimitRequestBody{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateLimitRequestBody) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLimitRequestBody) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateLimitRequestBody) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateLimitRequestBody) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateLimitRequestBody) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLimitRequestBody) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateLimitRequestBody) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateLimitRequestBody) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value
func (o *UpdateLimitRequestBody) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *UpdateLimitRequestBody) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *UpdateLimitRequestBody) SetValue(v int64) {
	o.Value = v
}

func (o UpdateLimitRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLimitRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateLimitRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateLimitRequestBody := _UpdateLimitRequestBody{}

	err = json.Unmarshal(data, &varUpdateLimitRequestBody)

	if err != nil {
		return err
	}

	*o = UpdateLimitRequestBody(varUpdateLimitRequestBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateLimitRequestBody struct {
	value *UpdateLimitRequestBody
	isSet bool
}

func (v NullableUpdateLimitRequestBody) Get() *UpdateLimitRequestBody {
	return v.value
}

func (v *NullableUpdateLimitRequestBody) Set(val *UpdateLimitRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLimitRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLimitRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLimitRequestBody(val *UpdateLimitRequestBody) *NullableUpdateLimitRequestBody {
	return &NullableUpdateLimitRequestBody{value: val, isSet: true}
}

func (v NullableUpdateLimitRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLimitRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


