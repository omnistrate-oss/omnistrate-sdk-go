/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package omnistrategosdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SaaSPortalEmailConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaaSPortalEmailConfig{}

// SaaSPortalEmailConfig struct for SaaSPortalEmailConfig
type SaaSPortalEmailConfig struct {
	// The SMTP from email
	SmtpFromEmail string `json:"smtpFromEmail"`
	// The SMTP host
	SmtpHost string `json:"smtpHost"`
	// The SMTP password
	SmtpPassword string `json:"smtpPassword"`
	// The SMTP port
	SmtpPort *int64 `json:"smtpPort,omitempty"`
	// The SMTP username
	SmtpUsername string `json:"smtpUsername"`
}

type _SaaSPortalEmailConfig SaaSPortalEmailConfig

// NewSaaSPortalEmailConfig instantiates a new SaaSPortalEmailConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaaSPortalEmailConfig(smtpFromEmail string, smtpHost string, smtpPassword string, smtpUsername string) *SaaSPortalEmailConfig {
	this := SaaSPortalEmailConfig{}
	this.SmtpFromEmail = smtpFromEmail
	this.SmtpHost = smtpHost
	this.SmtpPassword = smtpPassword
	this.SmtpUsername = smtpUsername
	return &this
}

// NewSaaSPortalEmailConfigWithDefaults instantiates a new SaaSPortalEmailConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaaSPortalEmailConfigWithDefaults() *SaaSPortalEmailConfig {
	this := SaaSPortalEmailConfig{}
	return &this
}

// GetSmtpFromEmail returns the SmtpFromEmail field value
func (o *SaaSPortalEmailConfig) GetSmtpFromEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmtpFromEmail
}

// GetSmtpFromEmailOk returns a tuple with the SmtpFromEmail field value
// and a boolean to check if the value has been set.
func (o *SaaSPortalEmailConfig) GetSmtpFromEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmtpFromEmail, true
}

// SetSmtpFromEmail sets field value
func (o *SaaSPortalEmailConfig) SetSmtpFromEmail(v string) {
	o.SmtpFromEmail = v
}

// GetSmtpHost returns the SmtpHost field value
func (o *SaaSPortalEmailConfig) GetSmtpHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmtpHost
}

// GetSmtpHostOk returns a tuple with the SmtpHost field value
// and a boolean to check if the value has been set.
func (o *SaaSPortalEmailConfig) GetSmtpHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmtpHost, true
}

// SetSmtpHost sets field value
func (o *SaaSPortalEmailConfig) SetSmtpHost(v string) {
	o.SmtpHost = v
}

// GetSmtpPassword returns the SmtpPassword field value
func (o *SaaSPortalEmailConfig) GetSmtpPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmtpPassword
}

// GetSmtpPasswordOk returns a tuple with the SmtpPassword field value
// and a boolean to check if the value has been set.
func (o *SaaSPortalEmailConfig) GetSmtpPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmtpPassword, true
}

// SetSmtpPassword sets field value
func (o *SaaSPortalEmailConfig) SetSmtpPassword(v string) {
	o.SmtpPassword = v
}

// GetSmtpPort returns the SmtpPort field value if set, zero value otherwise.
func (o *SaaSPortalEmailConfig) GetSmtpPort() int64 {
	if o == nil || IsNil(o.SmtpPort) {
		var ret int64
		return ret
	}
	return *o.SmtpPort
}

// GetSmtpPortOk returns a tuple with the SmtpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaaSPortalEmailConfig) GetSmtpPortOk() (*int64, bool) {
	if o == nil || IsNil(o.SmtpPort) {
		return nil, false
	}
	return o.SmtpPort, true
}

// HasSmtpPort returns a boolean if a field has been set.
func (o *SaaSPortalEmailConfig) HasSmtpPort() bool {
	if o != nil && !IsNil(o.SmtpPort) {
		return true
	}

	return false
}

// SetSmtpPort gets a reference to the given int64 and assigns it to the SmtpPort field.
func (o *SaaSPortalEmailConfig) SetSmtpPort(v int64) {
	o.SmtpPort = &v
}

// GetSmtpUsername returns the SmtpUsername field value
func (o *SaaSPortalEmailConfig) GetSmtpUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmtpUsername
}

// GetSmtpUsernameOk returns a tuple with the SmtpUsername field value
// and a boolean to check if the value has been set.
func (o *SaaSPortalEmailConfig) GetSmtpUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmtpUsername, true
}

// SetSmtpUsername sets field value
func (o *SaaSPortalEmailConfig) SetSmtpUsername(v string) {
	o.SmtpUsername = v
}

func (o SaaSPortalEmailConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaaSPortalEmailConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["smtpFromEmail"] = o.SmtpFromEmail
	toSerialize["smtpHost"] = o.SmtpHost
	toSerialize["smtpPassword"] = o.SmtpPassword
	if !IsNil(o.SmtpPort) {
		toSerialize["smtpPort"] = o.SmtpPort
	}
	toSerialize["smtpUsername"] = o.SmtpUsername
	return toSerialize, nil
}

func (o *SaaSPortalEmailConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"smtpFromEmail",
		"smtpHost",
		"smtpPassword",
		"smtpUsername",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSaaSPortalEmailConfig := _SaaSPortalEmailConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSaaSPortalEmailConfig)

	if err != nil {
		return err
	}

	*o = SaaSPortalEmailConfig(varSaaSPortalEmailConfig)

	return err
}

type NullableSaaSPortalEmailConfig struct {
	value *SaaSPortalEmailConfig
	isSet bool
}

func (v NullableSaaSPortalEmailConfig) Get() *SaaSPortalEmailConfig {
	return v.value
}

func (v *NullableSaaSPortalEmailConfig) Set(val *SaaSPortalEmailConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSaaSPortalEmailConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSaaSPortalEmailConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaaSPortalEmailConfig(val *SaaSPortalEmailConfig) *NullableSaaSPortalEmailConfig {
	return &NullableSaaSPortalEmailConfig{value: val, isSet: true}
}

func (v NullableSaaSPortalEmailConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaaSPortalEmailConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


