/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package omnistrategosdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DescribePendingChangesResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribePendingChangesResult{}

// DescribePendingChangesResult struct for DescribePendingChangesResult
type DescribePendingChangesResult struct {
	// The service API ID
	Id string `json:"id"`
	// The difference for the service API configuration per resource
	ResourceChangeSets map[string]ChangeSet `json:"resourceChangeSets"`
	// The service ID that this API bundle belongs to
	ServiceId string `json:"serviceId"`
}

type _DescribePendingChangesResult DescribePendingChangesResult

// NewDescribePendingChangesResult instantiates a new DescribePendingChangesResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribePendingChangesResult(id string, resourceChangeSets map[string]ChangeSet, serviceId string) *DescribePendingChangesResult {
	this := DescribePendingChangesResult{}
	this.Id = id
	this.ResourceChangeSets = resourceChangeSets
	this.ServiceId = serviceId
	return &this
}

// NewDescribePendingChangesResultWithDefaults instantiates a new DescribePendingChangesResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribePendingChangesResultWithDefaults() *DescribePendingChangesResult {
	this := DescribePendingChangesResult{}
	return &this
}

// GetId returns the Id field value
func (o *DescribePendingChangesResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DescribePendingChangesResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DescribePendingChangesResult) SetId(v string) {
	o.Id = v
}

// GetResourceChangeSets returns the ResourceChangeSets field value
func (o *DescribePendingChangesResult) GetResourceChangeSets() map[string]ChangeSet {
	if o == nil {
		var ret map[string]ChangeSet
		return ret
	}

	return o.ResourceChangeSets
}

// GetResourceChangeSetsOk returns a tuple with the ResourceChangeSets field value
// and a boolean to check if the value has been set.
func (o *DescribePendingChangesResult) GetResourceChangeSetsOk() (*map[string]ChangeSet, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceChangeSets, true
}

// SetResourceChangeSets sets field value
func (o *DescribePendingChangesResult) SetResourceChangeSets(v map[string]ChangeSet) {
	o.ResourceChangeSets = v
}

// GetServiceId returns the ServiceId field value
func (o *DescribePendingChangesResult) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *DescribePendingChangesResult) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *DescribePendingChangesResult) SetServiceId(v string) {
	o.ServiceId = v
}

func (o DescribePendingChangesResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribePendingChangesResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["resourceChangeSets"] = o.ResourceChangeSets
	toSerialize["serviceId"] = o.ServiceId
	return toSerialize, nil
}

func (o *DescribePendingChangesResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"resourceChangeSets",
		"serviceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribePendingChangesResult := _DescribePendingChangesResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribePendingChangesResult)

	if err != nil {
		return err
	}

	*o = DescribePendingChangesResult(varDescribePendingChangesResult)

	return err
}

type NullableDescribePendingChangesResult struct {
	value *DescribePendingChangesResult
	isSet bool
}

func (v NullableDescribePendingChangesResult) Get() *DescribePendingChangesResult {
	return v.value
}

func (v *NullableDescribePendingChangesResult) Set(val *DescribePendingChangesResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribePendingChangesResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribePendingChangesResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribePendingChangesResult(val *DescribePendingChangesResult) *NullableDescribePendingChangesResult {
	return &NullableDescribePendingChangesResult{value: val, isSet: true}
}

func (v NullableDescribePendingChangesResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribePendingChangesResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


