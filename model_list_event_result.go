/*
Omnistrate Registration API

REST API for Omnistrate Service Registration

API version: 2022-09-01-00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package omnistrategosdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListEventResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListEventResult{}

// ListEventResult struct for ListEventResult
type ListEventResult struct {
	// The list of events
	Events []DescribeEventResult `json:"events,omitempty"`
	// The list of event IDs
	Ids []string `json:"ids"`
	// The next token to use for pagination
	NextPageToken *string `json:"nextPageToken,omitempty"`
}

type _ListEventResult ListEventResult

// NewListEventResult instantiates a new ListEventResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListEventResult(ids []string) *ListEventResult {
	this := ListEventResult{}
	this.Ids = ids
	return &this
}

// NewListEventResultWithDefaults instantiates a new ListEventResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListEventResultWithDefaults() *ListEventResult {
	this := ListEventResult{}
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *ListEventResult) GetEvents() []DescribeEventResult {
	if o == nil || IsNil(o.Events) {
		var ret []DescribeEventResult
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListEventResult) GetEventsOk() ([]DescribeEventResult, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *ListEventResult) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []DescribeEventResult and assigns it to the Events field.
func (o *ListEventResult) SetEvents(v []DescribeEventResult) {
	o.Events = v
}

// GetIds returns the Ids field value
func (o *ListEventResult) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *ListEventResult) GetIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *ListEventResult) SetIds(v []string) {
	o.Ids = v
}

// GetNextPageToken returns the NextPageToken field value if set, zero value otherwise.
func (o *ListEventResult) GetNextPageToken() string {
	if o == nil || IsNil(o.NextPageToken) {
		var ret string
		return ret
	}
	return *o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListEventResult) GetNextPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageToken) {
		return nil, false
	}
	return o.NextPageToken, true
}

// HasNextPageToken returns a boolean if a field has been set.
func (o *ListEventResult) HasNextPageToken() bool {
	if o != nil && !IsNil(o.NextPageToken) {
		return true
	}

	return false
}

// SetNextPageToken gets a reference to the given string and assigns it to the NextPageToken field.
func (o *ListEventResult) SetNextPageToken(v string) {
	o.NextPageToken = &v
}

func (o ListEventResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListEventResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	toSerialize["ids"] = o.Ids
	if !IsNil(o.NextPageToken) {
		toSerialize["nextPageToken"] = o.NextPageToken
	}
	return toSerialize, nil
}

func (o *ListEventResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListEventResult := _ListEventResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListEventResult)

	if err != nil {
		return err
	}

	*o = ListEventResult(varListEventResult)

	return err
}

type NullableListEventResult struct {
	value *ListEventResult
	isSet bool
}

func (v NullableListEventResult) Get() *ListEventResult {
	return v.value
}

func (v *NullableListEventResult) Set(val *ListEventResult) {
	v.value = val
	v.isSet = true
}

func (v NullableListEventResult) IsSet() bool {
	return v.isSet
}

func (v *NullableListEventResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListEventResult(val *ListEventResult) *NullableListEventResult {
	return &NullableListEventResult{value: val, isSet: true}
}

func (v NullableListEventResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListEventResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


